<html>
<head>
<meta http-equiv="content-type" content="text/html; charset=GB2312">
<link rel="stylesheet" href="res/temp1.css" type="text/css">
<script type='text/javascript' src='binary/dynaload.js?103'></script>
<script language="JavaScript">
function OnReady(id)
{
 AF.func("Build", "report/xmlsheet1.xml");
}
</script>
</head>

<body topmargin=4>
<center>

<table cols=2 border=0 width=100%>
<col valign=top width=90>
<col>
<tr>
<td align=center><img src='res/how.bmp'></td>
<td><b>1</b>.本例是查询条件一体化的范例，请按报表内的提示“请选择国家”操作;<br>
<b>备注</b>: 每次下拉后，报表是从数据源重新加载数据的。实现原理请参考“技术分析区”.</td>
</tr></table>

<div style="position:relative;width:98%;height:480px">
	<script>insertReport('AF', 'separatebar=40%')</script>
</div>


<!--  以下为技术分析区 -->
<br><br><br>
<table border=0 cols=1 border=0 width=97% style='line-height:21px'>
<tr><td><img src='res/tech.jpg'></td></tr><tr><td>
<b>1.含动态参数的数据源</b><br>
　　ds1(订单)数据源含动态参数：<br>
<center><img src='res/illu21.png'></center>
　　可查看数据源GetOrder.aspx的<a href="reportdata/GetOrder.aspx.txt" target=_blank>C#源码</a>.<br>
<br><br>

<b>2.使用"订单"数据源</b><br>
　　在B4单元格输入了dataRow( )数据源函数：<br>
<center><img src='res/illu22.png'></center>
<br><br>

<b>3.下拉和字典库</b><br>
　　D2单元格是下拉风格的，下拉内容必须和字典库相关，字典也可以取自另一个数据源：<br>
<img src='res/illu23.png'><br>
　　可查看字典数据源GetOrderCountry.aspx的<a href="reportdata/GetOrderCountry.aspx.txt" target=_blank>C#源码</a>.<br>
<br><br>

<b>4.下拉的选项</b><br>
<center><img src='res/illu24.png'></center>
<br><br><br>

<b>5.“合计”的技巧</b><br>
<center><img src='res/illu25.png'></center>
<br><br><br>

<b>6.备注</b><br>
1.数据源支持多个动态参数;<br>
2.dataRow( )的中的动态参数可以指向单元格，也可以直接输入，或表达式;<br>
3.中心数据源也有类似的动态参数功能;<br>
<br><br>

<b>7.其它说明</b><br>
　　本例演示了报表的查询条件一体化，这只是按条件查询的实现方法之一。在大多数情况下，还是应该把查询条件移出报表的，通常采用常规的html元素，并将其安置在报表控件的上方，并由您自己拼装出URL，比如：<br>
<pre class='xml'>
function RefreshNew(y, m) {
 //拼装出URL
 var url = http://localhost/daldata/orders.aspx?year=" +y+ "&mon=" + m;
 //指定ds1数据源取数的URL地址
 AF.func("SetSource", "ds1 \r\n" + url);
 //重新计算
 AF.func("Calc", ""); 
}</pre>
　　 当然，查询条件一体化也有其好处，比如它降低了报表和页面之间的耦合度，在具体应用中，您应该按需求场景选择实现方法，<b>千万不可太拘泥于本例</b>。
</td></tr></table>

<br>
</center>
</body>
<script type='text/javascript' src='res/nstd.js'></script>
</html>