<HTML>
<head>
<meta http-equiv="content-type" content="text/html; charset=gb2312">
<link rel="stylesheet" href="temp1.css" type="text/css">
<script type="text/javascript" src="../../binary/dynaload.js?103"></script>
<script>
 var xml_="<root><product id='001'>MB</product></root>";
 function demo1()
 {
  var hRoot = AF.func("dom_new", xml_);
  alert(AF.func("dom_export", hRoot));
  AF.func("dom_delete", hRoot);
 }
 function demo2()
 {
  var hRoot = AF.func("dom_new", xml_);
  var hProd = AF.func("dom_find", hRoot + "\r\n product");
  AF.func("dom_setProp", hProd + "\r\n id \r\n100000");
  AF.func("dom_setProp", hProd + "\r\n #text \r\nUser");
  alert(AF.func("dom_export", hRoot));
  AF.func("dom_delete", hRoot);
 }
 function demo3()
 {
  var hRoot = AF.func("dom_new", xml_);
  var hNew = AF.func("dom_new", "");
  AF.func("dom_setName", hNew + "\r\n customer");
  AF.func("dom_setProp", hNew + "\r\n #text \r\nUser");
  AF.func("dom_insertChild", hRoot + "\r\n -1 \r\n" + hNew);
  var hProd = AF.func("dom_find", hRoot + "\r\n product");
  AF.func("dom_Delete", hProd);
  alert(AF.func("dom_export", hRoot));
  AF.func("dom_delete", hRoot);
 }
</script>
</head>
<body bgcolor=#ffffff vlink=#0000ff>
<div id="g0"></div><br>
<p class='sz1'>全局函数</p><hr color=#2266ee size=1>
　　所谓全局函数是一组公共的函数，硕正的所有组件都拥有几乎完全一样的函数形式. 全局函数分如下几类：<br>
　　<a href="#g0">1.对话框函数</a><br>
　　　　<a href="#g1">1.1.非模式对话框函数</a><br>
　　　　<a href="#g2">1.2.模式对话框函数</a><br>
　　<a href="#g3">2.消息框函数</a><br>
　　<a href="#g4">3.下拉List管理函数</a><br>
　　<a href="#g5">4.Validations管理函数</a><br>
　　<a href="#g6">5.对表达式和计算函数的封装</a><br>
　　<a href="#g7">6.DOM函数</a><br>
　　<a href="#g8">7.其它函数</a><br>
<br>
<div id="g0"></div><br>
<p class='sz3'>1.对话框函数</p>
　　全局函数中有二组对话框函数。通过调用对话框函数，您能够打开一个对话框。对话框是以 一个FreeForm 作为显示样式的，其内容完全自定义.<br>
　　硕正的对话框分为 <b>模式</b>对话框 和 <b>非模式</b>对话框 二种，模式对话框是Windows的标准对话框，当对话框出现时, 主线程是阻塞的，直到对话框关闭；而非模式对话框则是在控件的内部浮现出一个freeform，主线程不会阻塞. <br>
　　非模式对话框的好处，是在打开对话框时不影响其它Tab选项卡 - 用户仍能正常切换选项卡. 此外，由于线程不阻塞，对话框中的 freeform 的子控件的事件能触发到页面的OnEvent( )中，能实现与页面的交互，这一点非常有用.<br>
<br>
<div id="g1"></div><br>
<table width=100%>
	<tr>
		<td class="noline"><p class='sz4'>1.1.非模式对话框函数</p></td>
		<td class="noline" align=right></td>
	</tr>
</table>
　　非模式对话框是悬浮在组件中央的一个FreeForm，同时组件本身呈半透明、非活动状态. <br>
　　并不是所有组件都支持内嵌的非模式对话框的，如下组件是支持的(即支持本组函数)：<br>
　　　　<b>Treelist / Freeform / Freeform设计器 / Report / Tree / Chart</b>.<br>
　　非模式对话框 和 它的容器(即组件本身)都会触发页面的OnEvent( )事件，为了相互区分，您应该在事件中调用 IsInnerDialogOpen( ) 这个函数来判断，<font color=red>这一点非常重要</font>，具体请参见自有表头的演示页：“13.基于Freeform的对话框”、“15.辅助Treelist输入(2)”。<br>
<table width="94%" border="1" align="center">
<tr><th>分类</th><th>函数名</th><th>用途</th></tr>
<tr><td rowspan=5>非模式对话框函数</td><td><a href="#TagDlgInnerTableSetDialogFreeForm"><div id="func_TagDlgInnerTableSetDialogFreeForm"/>SetDialogFreeForm</a></td><td>指定对话框的Freeform</td></tr>
<tr><td><a href="#TagDlgInnerTableSetDialogPara"><div id="func_TagDlgInnerTableSetDialogPara"/>SetDialogPara</a></td><td>指定对话框的参数</td></tr>
<tr><td><a href="#TagDlgInnerTableOpenInnerDialog"><div id="func_TagDlgInnerTableOpenInnerDialog"/>OpenInnerDialog</a></td><td>打开非模式对话框</td></tr>
<tr><td><a href="#TagDlgInnerTableCloseInnerDialog"><div id="func_TagDlgInnerTableCloseInnerDialog"/>CloseInnerDialog</a></td><td>关闭非模式对话框</td></tr>
<tr><td><a href="#TagDlgInnerTableIsInnerDialogOpen"><div id="func_TagDlgInnerTableIsInnerDialogOpen"/>IsInnerDialogOpen</a></td><td>非模式对话框是否正打开着</td></tr>
</table>
<br>
 函数详解:
<div id="TagDlgInnerTableSetDialogFreeForm"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>SetDialogFreeForm</td><td class="funcTD">指定对话框的Freeform</td><td align="right" style="border-left:0px;"><img src="image/documentg.bmp" title="请参见自由表头的演示页: 13.基于Freeform的对话框">&nbsp;&nbsp;<a href="#func_TagDlgInnerTableSetDialogFreeForm"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>FreeForm的URL(相对或绝对)，或者直接就是XML大串</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
</table>
<br>

<div id="TagDlgInnerTableSetDialogPara"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>SetDialogPara</td><td class="funcTD">指定对话框的参数</td><td align="right" style="border-left:0px;"><a href="#func_TagDlgInnerTableSetDialogPara"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>可选，可以是如下属性值(多个属性间以分号(;)分隔)：<br>
<b> width / height </b> - 宽度和高度，可以是百分比(如"80%"，相对于组件的宽/高)、整数(绝对像素数)，默认都是80%;<br>
<b>ExtWidth / ExtHeight</b> - 扩展宽度/高度, 默认分别是20/14;<br>
备注：扩展宽度/高度表示对话框右、下方预留的空白边界.<br>
<b>IdFocus(或FocusId)</b> - 指定定位焦点，如果为空，则按freeform的TabOrder自动定位;<br>
<b>bgColor(或backColor)</b> - 组件被遮罩的底色，默认是#C8C8C8;<br>
<b>alpha</b> - 遮罩时组件画面的透明度, 0-255, 默认是70;<br>
</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
</table>
<br>

<div id="TagDlgInnerTableOpenInnerDialog"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>OpenInnerDialog</td><td class="funcTD">打开非模式对话框</td><td align="right" style="border-left:0px;"><img src="image/documentg.bmp" title="请参见自由表头的演示页: 13.基于Freeform的对话框">&nbsp;&nbsp;<a href="#func_TagDlgInnerTableOpenInnerDialog"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>加载的数据的URL, 或直接就是XML/JSON大串，用于为FreeForm赋初值</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>成功 - 返回对话框的freeform的句柄(一个整数串); <br>失败 - 空串, 原因通常为：freeform的XML模版不存在、或对话框已经打开着</td></tr>
  <tr><td align=right>备注</td><td colspan=2>由于函数返回了freeform的句柄，所以您可以以扩展函数的方式调用freeform的所有函数</td></tr>
  <tr><td align=right>备注</td><td colspan=2>关闭后，Freeform并未被销毁，您仍然可以使用这个返回的句柄，通过扩展函数存取freeform中的内容</td></tr>
  <tr class="example"><td align=right>示例</td><td colspan=2>//打开 freeform 弹窗, 并取得句柄<br>var h = AF.func("OpenInnerDialog", "");<br>
//弹出的 freeform 中有选项卡、树列表, 要对其执行函数, 必须是如下这种扩展函数的形式<br>
AF.func(h + "tab1.T.Load", "treelistdata/data60.tsv-ex.txt");</td></tr>
</table>
<br>

<div id="TagDlgInnerTableCloseInnerDialog"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>CloseInnerDialog</td><td class="funcTD">关闭非模式对话框</td><td align="right" style="border-left:0px;"><img src="image/documentg.bmp" title="请参见自由表头的演示页: 13.基于Freeform的对话框、15.辅助Treelist输入(2)">&nbsp;&nbsp;<a href="#func_TagDlgInnerTableCloseInnerDialog"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>成功 - 返回对话框的freeform的句柄(一个整数串); <br>失败 - 空串, 对话框本来就没有打开</td></tr>
</table>
<br>

<div id="TagDlgInnerTableIsInnerDialogOpen"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>IsInnerDialogOpen</td><td class="funcTD">或"IsInnerDialogOpened"，非模式对话框是否正打开着</td><td align="right" style="border-left:0px;"><img src="image/documentg.bmp" title="请参见自由表头的演示页: 13.基于Freeform的对话框、15.辅助Treelist输入(2)">&nbsp;&nbsp;<a href="#func_TagDlgInnerTableIsInnerDialogOpen"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>1 / 0</td></tr>
  <tr><td align=right>备注</td><td colspan=2>该函数很重要，常用于在OnEvent( )事件中判断当前的消息发送者.</td></tr>
</table>
<br>
<br>
<br>




<div id="g2"></div><br><hr>
<table width=95%>
	<tr>
		<td class="noline"><p class='sz4'>1.2.模式对话框函数</p></td>
		<td class="noline" align=right><a href="#g0"><img border=0 src="image/home.bmp" title="回到总目录"/></a></td>
	</tr>
</table>
　　模式对话框的FreeForm至少要有1个Button，但不支持菜单、下拉菜单按钮、分页器.<br>
　　模式对话框弹出后，如果用户按下其中的Button，对话框随即关闭，并返回Button按钮的ID。<br>
　　由于模式对话框是线程阻塞的，对话框中的控件的事件是无法被页面拦截的。模式对话框的函数分类说明如下:<br>

<table width=94% border=1 align="center">
<tr><th>分类</th><th>函数名</th><th>用途</th></tr>
<tr><td rowspan=6>模式对话框函数</td><td><a href="#TagDlgTableSetDialogFreeForm"><div id="func_TagDlgTableSetDialogFreeForm"/>SetDialogFreeForm</a></td><td>指定对话框的Freeform</td></tr>
<tr><td><a href="#TagDlgTableSetDialogPara"><div id="func_TagDlgTableSetDialogPara"/>SetDialogPara</a></td><td>指定对话框的标题等参数</td></tr>
<tr><td><a href="#TagDlgTableOpenDialog"><div id="func_TagDlgTableOpenDialog"/>OpenDialog</a></td><td>打开模式对话框</td></tr>
<tr><td><a href="#TagDlgTableGetDialogValues"><div id="func_TagDlgTableGetDialogValues"/>GetDialogValues</a></td><td>取得刚关闭的对话框中的FreeForm的所有input的输入内容</td></tr>
<tr><td><a href="#TagDlgTableGetDialogValue"><div id="func_TagDlgTableGetDialogValue"/>GetDialogValue</a></td><td>取得刚关闭的对话框中的FreeForm的某个input的输入内容</td></tr>
<tr><td><a href="#TagDlgTableGetDialogIDs"><div id="func_TagDlgTableGetDialogIDs"/>GetDialogIDs</a></td><td>取得刚关闭的对话框中的FreeForm中的所有ID</td></tr>
</table>
<br>
 函数详解:
<div id="TagDlgTableSetDialogFreeForm"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>SetDialogFreeForm</td><td class="funcTD">指定对话框的Freeform</td><td align="right" style="border-left:0px;"><img src="image/documentg.bmp" title="请参见自由表头的演示页: 13.基于Freeform的对话框">&nbsp;&nbsp;<a href="#func_TagDlgTableSetDialogFreeForm"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>FreeForm的URL(相对或绝对)，或者直接就是XML大串</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>备注</td><td colspan=2><font color=red>该Freeform中必须要有一个按钮控件</font>，否则不起作用</td></tr>
</table>
<br>

<div id="TagDlgTableSetDialogPara"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>SetDialogPara</td><td class="funcTD">指定对话框的标题等参数</td><td align="right" style="border-left:0px;"><img src="image/documentg.bmp" title="请参见自由表头的演示页: 13.基于Freeform的对话框">&nbsp;&nbsp;<a href="#func_TagDlgTableSetDialogPara"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>可选，可以是如下属性值(多个属性间以分号(;)分隔)：<br>
<b>title</b> - 对话框窗口的标题<br>
<b>IdOk(或OkId)</b> - 相当于“确认”的按钮的id, 点击后能自动执行Freeform的 Validate( ) 验证函数;<br>
<b>IdFocus(或FocusId)</b> - 指定定位焦点，如果为空，则按freeform的TabOrder自动定位;<br>
<b>ExtWidth / ExtHeight</b> - 扩展宽度/高度, 默认分别是20/14;<br>
备注：扩展宽度/高度表示对话框右、下方预留的空白边界.<br>
</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
  <tr class="example"><td align=right>示例</td><td colspan=2>AF.func("SetDialogPara", "title=警告; ExtWidth=20; ExtHeight=20");</td></tr>
</table>
<br>

<div id="TagDlgTableOpenDialog"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>OpenDialog</td><td class="funcTD">打开模式对话框</td><td align="right" style="border-left:0px;"><img src="image/documentg.bmp" title="请参见自由表头的演示页: 13.基于Freeform的对话框">&nbsp;&nbsp;<a href="#func_TagDlgTableOpenDialog"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>可选，加载的数据的URL, 或直接就是XML/JSON大串，用于为FreeForm赋初值</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>鼠标点击Freeform中的Button按钮的ID</td></tr>
  <tr><td align=right>备注</td><td colspan=2>1.如果未弹出对话框，可能是Freeform的URL不正确、或Freeform中没有Button导致;<br>
2.本函数执行时，线程进入阻塞状态，直到对话框关闭，本函数才返回.</td></tr>
  <tr class="example"><td align=right>示例</td><td colspan=2>AF.func("OpenDialog", "{price:20, date1:2010.12.20, checked:true}");</td></tr>
</table>
<br>

<div id="TagDlgTableGetDialogValues"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetDialogValues</td><td class="funcTD">取得刚关闭的对话框中的FreeForm的所有input的输入内容</td><td align="right" style="border-left:0px;"><img src="image/documentg.bmp" title="请参见自由表头的演示页: 13.基于Freeform的对话框">&nbsp;&nbsp;<a href="#func_TagDlgTableGetDialogValues"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>可选，可以为 XML / JSON, 默认是XML</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>XML或JSON串</td></tr>
  <tr><td align=right>备注</td><td colspan=2>如果返回JSON串，可能是类似这样的：{"price":"20", "date1":"2010.12.20", "checked":"1"}</td></tr>
</table>
<br>

<div id="TagDlgTableGetDialogValue"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetDialogValue</td><td class="funcTD">取得刚关闭的对话框中的FreeForm的某个input的输入内容</td><td align="right" style="border-left:0px;"><img src="image/documentg.bmp" title="请参见自由表头的演示页: 13.基于Freeform的对话框">&nbsp;&nbsp;<a href="#func_TagDlgTableGetDialogValue"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>Input的ID<br>如果是串 @freeform, 表示取得该freeform的ID(在freeform的XML的 &lt;Properties&gt; 中定义的ID)</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>该input的输入内容</td></tr>
</table>
<br>

<div id="TagDlgTableGetDialogIDs"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetDialogIDs</td><td class="funcTD">取得刚关闭的对话框中的FreeForm中的所有ID</td><td align="right" style="border-left:0px;"><a href="#func_TagDlgTableGetDialogIDs"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>以逗号分隔的所有ID</td></tr>
</table>
<br>
<br>
<br>
<br>



<div id="g3"></div><br><hr>
<table width=95%>
	<tr>
		<td class="noline"><p class='sz3'>2.消息框函数</p></td>
		<td class="noline" align=right><a href="#g0"><img border=0 src="image/home.bmp" title="回到总目录"/></a></td>
	</tr>
</table>
　　消息框是指在组件中心位置呈现出的时尚的提示框、数据加载中的小对话，有了这批函数，您可以自己操控这些提示信息了. 函数主要有２个: MessageBoxFloat、MessagaePoint, 也可以简写为 MsgFloat、MsgPoint.<br>
　　消息框显示的文字，支持部分类似HTML的元素，使得文字内容可以较为灵活地呈现，例如代码:<br>
<pre class='cpp'>
var text = "&lt;br&gt;&nbsp;&nbsp;&nbsp;今晚&lt;font color=red&gt;21:00&lt;/font&gt;整，请第二工组到二号库房集合，一起将发往&lt;b&gt;通州、&lt;br>宁波&lt;/b&gt;的货物清点";
text += "完毕，第三工组请打扫货车，并检查核对货柜.&lt;br&gt;";
text += "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;image&gt;res/capu.png&lt;/image&gt;&nbsp;&nbsp;&lt;i&gt;谢谢!&lt;/i&gt;";
AF.func("msgFloat", text + "\r\n hold=0;pos=browser;buttonText1=我请事假;buttonWidth1=120;buttonId1=1112;buttonText2=收到;buttonId2=1000;buttonWidth2=120");
//注: buttonId是给事件消息用的，因为消息框不是模式对话框，不阻塞主线程，点击按钮将触发 UserEvent 事件</pre>
　　呈现的效果是:<br>
<center><img src='image/global1.png'></center><br>
　　如下是树列表的 "12.事件" 示例，在 MouseMoveIn 事件中执行了 MessageBoxPoint函数:<br>
<center><img src='image/global2.png'></center><br>
　　文字仅支持如下类似HTML的元素:<br>
<center><table border=1 width=80%>
<col width="60">
<col width="330">
<col width="60">
<col width="330">
<tr><th>元素名</th><th>规则</th><th>元素名</th><th>规则</th></tr>
<tr><td align="center"><b>b</b></td><td>文字加粗</td>  <td align="center"<b>i</b></td><td>文字倾斜</td></tr>
<tr><td align="center"><b>br</b></td><td>换行,也可以用\\r\\n代替</td><td align="center"><b>center</b></td><td>文字(或图片)居中显示</td></tr>
<tr><td align="center"><b>font</b></td><td>文字颜色和字体，例如&lt;font face="Consolas,Courier New" color="#ff0000"&gt;21:00&lt;/font&gt;<br>支持的属性: 仅 <b>color</b>、<b>face</b> 属性</td><td align="center"><b>image</b></td><td>嵌入图片,如 &lt;image&gt;res/capu.png&lt;/image&gt;<br>支持的属性: <b>height</b>, <b>width</b>, 用以指定显示尺寸</td></tr>
</table></center>
<br>
<table width=94% border=1 align="center">
<tr><th>分类</th><th>函数名</th><th>用途</th></tr>
<tr><td rowspan=9>消息框函数</td><td><a href="#TagMsgTableMessageBoxFloat(语法1)"><div id="func_TagMsgTableMessageBoxFloat(语法1)"/>MessageBoxFloat(语法1)</a></td><td>弹出Supcan风格的能自动关闭的浮动提示框</td></tr>
<tr><td><a href="#TagMsgTableMessageBoxFloat(语法2)"><div id="func_TagMsgTableMessageBoxFloat(语法2)"/>MessageBoxFloat(语法2)</a></td><td>弹出Supcan风格的能自动关闭的浮动提示框</td></tr>
<tr><td><a href="#TagMsgTableMessageBoxPoint(用途1)"><div id="func_TagMsgTableMessageBoxPoint(用途1)"/>MessageBoxPoint(用途1)</a></td><td>弹出Supcan风格的指向某单元格的提示框(for Treelist、Report)</td></tr>
<tr><td><a href="#TagMsgTableMessageBoxPoint(用途2)"><div id="func_TagMsgTableMessageBoxPoint(用途2)"/>MessageBoxPoint(用途2)</a></td><td>弹出Supcan风格的指向某输入框的提示框(for Freeform)</td></tr>
<tr><td><a href="#TagMsgTableMessageBoxPoint(用途3)"><div id="func_TagMsgTableMessageBoxPoint(用途3)"/>MessageBoxPoint(用途3)</a></td><td>弹出Supcan风格的指向当前控件的提示框(for Edit、Upload等)</td></tr>
<tr><td><a href="#TagMsgTableMessageBoxPoint(用途4)"><div id="func_TagMsgTableMessageBoxPoint(用途4)"/>MessageBoxPoint(用途4)</a></td><td>弹出Supcan风格的指向当前光标处的提示框</td></tr>
<tr><td><a href="#TagMsgTableCloseMessageBox"><div id="func_TagMsgTableCloseMessageBox"/>CloseMessageBox</a></td><td>强制关闭提示框</td></tr>
<tr><td><a href="#TagMsgTableOpenLoadMask"><div id="func_TagMsgTableOpenLoadMask"/>OpenLoadMask</a></td><td>显示含义为“加载中”的小动画</td></tr>
<tr><td><a href="#TagMsgTableCloseLoadMask"><div id="func_TagMsgTableCloseLoadMask"/>CloseLoadMask</a></td><td>关闭含义为“加载中”的小动画</td></tr>
</table>
<br>
 函数详解:
<div id="TagMsgTableMessageBoxFloat(语法1)"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>MessageBoxFloat(语法1)</td><td class="funcTD">弹出Supcan风格的能自动关闭的浮动提示框，也可简写为MsgFloat</td><td align="right" style="border-left:0px;"><img src="image/documentg.bmp" title="请参见树列表的演示页: 21.提交修改内容、22.4种提交级别、23.连续输入提交控制">&nbsp;&nbsp;<a href="#func_TagMsgTableMessageBoxFloat(语法1)"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>具体的文字串</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>标题，可选，可含如下文字之一：Warn、Success、Fail、Error、Prompt(可以更长，包含即可，例如Successful、Warning均合法)，默认是Prompt</td></tr>
  <tr><td align=right>参数3</td><td colspan=2>左侧小图标，可选，可含如下文字之一：Stop、Success、Question、Info(可以更长，包含即可，例如Successful、Information均合法)，默认是Info</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>备注</td><td colspan=2>参数2 和 参数3 次序可以颠倒</td></tr>
  <tr class="example"><td align=right>示例</td><td colspan=2>xml = xml.replace(/\r\n/g, "\\r\\n");  //把串中原有的回车符全部转换成\\r\\n<br>AF.func("MessageBoxFloat", xml + "\r\n Warning \r\n Information");</td></tr>
</table>
<br>

<div id="TagMsgTableMessageBoxFloat(语法2)"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>MessageBoxFloat(语法2)</td><td class="funcTD">弹出Supcan风格的能自动关闭的浮动提示框，也可简写为MsgFloat</td><td align="right" style="border-left:0px;"><img src="image/documentg.bmp" title="请参见树列表的演示页: 21.提交修改内容">&nbsp;&nbsp;<a href="#func_TagMsgTableMessageBoxFloat(语法2)"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>具体的文字串</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>属性串，以分号(;)分隔，可以有如下"属性=值"对：<br>
<b>title</b> - 标题，可含如下文字之一：Warn、Success、Fail、Error、Prompt(可以更长，包含即可，例如Successful、Warning均合法)，默认是Prompt;<br>
<b>icon</b> - 左侧小图标，可含如下文字之一：Stop、Success、Question、Info(可以更长，包含即可，例如Successful、Information均合法)，默认是Info;<br>
<b>hold</b> - 保留的时间(单位：秒)，0表示永远显示，点击它才关闭.  它的默认值和icon有关(不是很精确):<br>
　　Success - 2.5秒;<br>
　　Info - 3.5秒;<br>
　　Question - 4.5秒;<br>
　　Stop - 永远显示;<br>
<b>pos</b> - 位置, 如果是串"cursor"，表示当前鼠标位置；否则, 可以是如下子串的组合(逗号分隔): supcan(相对于硕正控件), browser(相对于浏览器), screen(相对于显示器), center(中心对齐),  left(左对齐), right(右对齐), top(上对齐), bottom(下对齐). 默认是"supcan, center";<br>
<br>
　　以及如下的位于底部的自定义按钮:<br>
<b>ButtonText</b> - 按钮的文字;<br>
<b>ButtonWidth</b> - 按钮的宽度，单位是像素，如果不定义宽度，系统将自动算出一个合适的.<br>
<b>ButtonId</b> - 按钮的Id, 须为大于0的数字, 相当于功能号，用于消息通知。由于该消息框不是阻塞线程的对话框，所以点击按钮将触发名为 <b>UserEvent</b> 的事件，事件的 P1 参数就是该 Id 号。注：如果不定义Id, 将不触发 UserEvent 事件;<br>
　　此外，也支持同时安置多个按钮，写法是在上述属性后面加1、2..序号，请参考下面的例子。</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
  <tr class="example"><td align=right>示例</td><td colspan=2>xml = xml.replace(/\r\n/g, "\\r\\n");  //把串中原有的回车符全部转换成\\r\\n<br>
AF.func("MessageBoxFloat", xml + "\r\n title=Warning; icon=Information; hold=0; pos=screen,bottom,right");<br>
<br>
//安置多个按钮<br>
AF.func("MessageBoxFloat", "您确认要保存吗?\r\n title=Warning; ButtonText1=确认;ButtonText2=取消;ButtonId1=123");</td></tr>
</table>
<br>

<div id="TagMsgTableMessageBoxPoint(用途1)"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>MessageBoxPoint(用途1)</td><td class="funcTD">用于Treelist、Report，弹出Supcan风格的能自动关闭的指向某单元格的浮动提示框，也可简写为MsgPoint</td><td align="right" style="border-left:0px;"><a href="#func_TagMsgTableMessageBoxPoint(用途1)"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>行号</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>列号，或列名(for Treelist)</td></tr>
  <tr><td align=right>参数3</td><td colspan=2>接下去的参数接续了和MessageBoxFloat一样的语法(除了不支持 "center")，请参考MessageBoxFloat</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
</table>
<br>

<div id="TagMsgTableMessageBoxPoint(用途2)"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>MessageBoxPoint(用途2)</td><td class="funcTD">用于Freeform，弹出Supcan风格的能自动关闭的指向某输入框的浮动提示框，也可简写为MsgPoint</td><td align="right" style="border-left:0px;"><a href="#func_TagMsgTableMessageBoxPoint(用途2)"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>Freeform中的输入控件的ID号</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>接下去的参数接续了和MessageBoxFloat一样的语法(除了不支持 "center")，请参考MessageBoxFloat</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
</table>
<br>

<div id="TagMsgTableMessageBoxPoint(用途3)"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>MessageBoxPoint(用途3)</td><td class="funcTD">用于Edit、Upload，弹出Supcan风格的能自动关闭的指向当前控件的浮动提示框，也可简写为MsgPoint</td><td align="right" style="border-left:0px;"><a href="#func_TagMsgTableMessageBoxPoint(用途3)"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>参数和MessageBoxFloat一样(除了不支持 "center")，请参考MessageBoxFloat</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
</table>
<br>

<div id="TagMsgTableMessageBoxPoint(用途4)"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>MessageBoxPoint(用途4)</td><td class="funcTD">用于Treelist、Freeform、Report、Edit、Upload，弹出Supcan风格的能自动关闭的指向当前光标的浮动提示框，也可简写为MsgPoint</td><td align="right" style="border-left:0px;"><a href="#func_TagMsgTableMessageBoxPoint(用途4)"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>固定的串 "Cursor" </td></tr>
  <tr><td align=right>参数</td><td colspan=2>参数和MessageBoxFloat一样(除了不支持 pos 属性)，请参考MessageBoxFloat</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
  <tr class="example"><td align=right>示例</td><td colspan=2>xml = xml.replace(/\r\n/g, "\\r\\n");  //把串中原有的回车符全部转换成\\r\\n<br>
AF.func("MsgPoint", "Cursor \r\n" + xml + "\r\n title=Warning; icon=Information; hold=0");</td></tr>
</table>
<br>

<div id="TagMsgTableCloseMessageBox"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>CloseMessageBox</td><td class="funcTD">强制关闭提示框, 也可以简写为CloseMsg</td><td align="right" style="border-left:0px;"><a href="#func_TagMsgTableCloseMessageBox"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
</table>
<br>

<div id="TagMsgTableOpenLoadMask"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>OpenLoadMask</td><td class="funcTD">显示含义为“加载中”的小动画(<img src='image/kdm.bmp'>)。用于js发送独立的Ajax请求时，让控件呈现"正在加载中"的动画效果</td><td align="right" style="border-left:0px;"><a href="#func_TagMsgTableOpenLoadMask"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>延迟的毫秒数，默认500，表示500毫秒后才显示这个动画.</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>备注</td><td colspan=2>随后必需关闭动画，否则永远在动画中。关闭动画有2种途径：<br>1.调用下面的 CloseLoadMask 立即关闭；<br>2.调用Treelist、Freeform的Load( )函数后，动画会自动关闭的;</td></tr>
</table>
<br>

<div id="TagMsgTableCloseLoadMask"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>CloseLoadMask</td><td class="funcTD">关闭含义为“加载中”的小动画</td><td align="right" style="border-left:0px;"><a href="#func_TagMsgTableCloseLoadMask"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
</table>
<br>
<br>
<br>
<br>




<div id="g4"></div><br><hr>
<table width=95%>
	<tr>
		<td class="noline"><p class='sz3'>3.下拉List管理函数</p></td>
		<td class="noline" align=right><a href="#g0"><img border=0 src="image/home.bmp" title="回到总目录"/></a></td>
	</tr>
</table>
　　全局函数中还有一组用于操控下拉List的函数，能单独存取List的内容。下拉List的句柄是通过GetHandle( )函数获取的.<br>
<table width=94% border=1 align="center">
<tr><th>分类</th><th>函数名</th><th>用途</th></tr>
<tr><td rowspan=9>下拉List函数</td><td><a href="#TagDroplistTableDropList_Add"><div id="func_TagDroplistTableDropList_Add"/>DropList_Add</a></td><td>往下拉List中添加 Key-Value 对</td></tr>
<tr><td><a href="#TagDroplistTableDropList_Insert"><div id="func_TagDroplistTableDropList_Insert"/>DropList_Insert</a></td><td>往下拉List中插入一个Key-value对</td></tr>
<tr><td><a href="#TagDroplistTableDropList_Delete"><div id="func_TagDroplistTableDropList_Delete"/>DropList_Delete</a></td><td>删除下拉List中某个Key</td></tr>
<tr><td><a href="#TagDroplistTableDropList_DeleteAll"><div id="func_TagDroplistTableDropList_DeleteAll"/>DropList_DeleteAll</a></td><td>清除下拉List的全部内容</td></tr>
<tr><td><a href="#TagDroplistTableDropList_GetItems"><div id="func_TagDroplistTableDropList_GetItems"/>DropList_GetItems</a></td><td>取得下拉List的记录总条数</td></tr>
<tr><td><a href="#TagDroplistTableDropList_Find"><div id="func_TagDroplistTableDropList_Find"/>DropList_Find</a></td><td>根据Key从下拉List中查找Value</td></tr>
<tr><td><a href="#TagDroplistTableDropList_GetKey"><div id="func_TagDroplistTableDropList_GetKey"/>DropList_GetKey</a></td><td>从下拉List中顺序取得Key</td></tr>
<tr><td><a href="#TagDroplistTableDropList_GetValue"><div id="func_TagDroplistTableDropList_GetValue"/>DropList_GetValue</a></td><td>从下拉List中顺序取得value</td></tr>
<tr><td><a href="#TagDroplistTableDropList_SetValue"><div id="func_TagDroplistTableDropList_SetValue"/>DropList_SetValue</a></td><td>更改下拉List中某个Key对应的value</td></tr>
</table>
<br>
 函数详解:
<div id="TagDroplistTableDropList_Add"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>DropList_Add</td><td class="funcTD">往下拉List中添加 Key-Value 对</td><td align="right" style="border-left:0px;"><a href="#func_TagDroplistTableDropList_Add"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>下拉List的句柄 (注: 通过GetHandle( )函数获取)</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>键(key)</td></tr>
  <tr><td align=right>参数3</td><td colspan=2>值(value)</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>1 - 成功，空串 - 失败，失败的原因通常为Key已经存在</td></tr>
</table>
<br>

<div id="TagDroplistTableDropList_Insert"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>DropList_Insert</td><td class="funcTD">往下拉List中插入一个Key-value对</td><td align="right" style="border-left:0px;"><a href="#func_TagDroplistTableDropList_Insert"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>下拉List的句柄 (注: 通过GetHandle( )函数获取)</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>位置的键(key)，表示位于这个key插入</td></tr>
  <tr><td align=right>参数3</td><td colspan=2>键(key)</td></tr>
  <tr><td align=right>参数4</td><td colspan=2>值(value)</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>1 - 成功，空串 - 失败，失败的原因通常为位置的键(Key)不存在、或新的Key已经存在</td></tr>
</table>
<br>

<div id="TagDroplistTableDropList_Delete"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>DropList_Delete</td><td class="funcTD">删除下拉List中某个Key</td><td align="right" style="border-left:0px;"><a href="#func_TagDroplistTableDropList_Delete"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>下拉List的句柄 (注: 通过GetHandle( )函数获取)</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>键(key)</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>1 - 成功，空串 - 失败，失败的原因通常为Key不存在</td></tr>
</table>
<br>

<div id="TagDroplistTableDropList_DeleteAll"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>DropList_DeleteAll</td><td class="funcTD">清除下拉List的全部内容</td><td align="right" style="border-left:0px;"><a href="#func_TagDroplistTableDropList_DeleteAll"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>下拉List的句柄 (注: 通过GetHandle( )函数获取)</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
</table>
<br>

<div id="TagDroplistTableDropList_GetItems"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>DropList_GetItems</td><td class="funcTD">取得下拉List的记录总条数</td><td align="right" style="border-left:0px;"><a href="#func_TagDroplistTableDropList_GetItems"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>下拉List的句柄 (注: 通过GetHandle( )函数获取)</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>数量</td></tr>
</table>
<br>

<div id="TagDroplistTableDropList_Find"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>DropList_Find</td><td class="funcTD">根据Key从下拉List中查找Value</td><td align="right" style="border-left:0px;"><a href="#func_TagDroplistTableDropList_Find"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>下拉List的句柄 (注: 通过GetHandle( )函数获取)</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>键(key)</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>值(Value)</td></tr>
</table>
<br>

<div id="TagDroplistTableDropList_GetKey"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>DropList_GetKey</td><td class="funcTD">从下拉List中顺序取得Key</td><td align="right" style="border-left:0px;"><a href="#func_TagDroplistTableDropList_GetKey"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>下拉List的句柄 (注: 通过GetHandle( )函数获取)</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>顺序号，从0开始</td></tr>
  <tr><td align=right>参数3</td><td colspan=2>可选，true/false, 表示是否按照下拉中的显示顺序，默认false, 仅用于isSortByKey="true"的情形</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>键(key)的内容</td></tr>
</table>
<br>

<div id="TagDroplistTableDropList_GetValue"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>DropList_GetValue</td><td class="funcTD">从下拉List中顺序取得value</td><td align="right" style="border-left:0px;"><a href="#func_TagDroplistTableDropList_GetValue"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>下拉List的句柄 (注: 通过GetHandle( )函数获取)</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>顺序号，从0开始</td></tr>
  <tr><td align=right>参数3</td><td colspan=2>可选，true/false, 表示是否按照下拉中的显示顺序，默认false, 仅用于isSortByKey="true"的情形</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>值(value)的内容</td></tr>
</table>
<br>

<div id="TagDroplistTableDropList_SetValue"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>DropList_SetValue</td><td class="funcTD">更改下拉List中某个Key对应的value</td><td align="right" style="border-left:0px;"><a href="#func_TagDroplistTableDropList_SetValue"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>下拉List的句柄 (注: 通过GetHandle( )函数获取)</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>键(key)</td></tr>
  <tr><td align=right>参数3</td><td colspan=2>值(value)</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>1 - 成功，空串 - 失败，失败的原因通常为键(Key)不存在</td></tr>
</table>
<br>
<br>
<br>



<br>
<div id="g5"></div><br><hr>
<table width=95%>
	<tr>
		<td class="noline"><p class='sz4'>4.Validations管理函数</p></td>
		<td class="noline" align=right><a href="#g0"><img border=0 src="image/home.bmp" title="回到总目录"/></a></td>
	</tr>
</table>
　　本函数集用于单独管理 Treelist 或 Report 中的&lt;Validations&gt;.<br>
<table width=94% border=1 align="center">
<tr><th>分类</th><th>函数名</th><th>用途</th></tr>
<tr><td rowspan=6>Validation函数</td><td><a href="#TagValidTableValidation_Get"><div id="func_TagValidTableValidation_Get"/>Validation_Get</a></td><td>取得某id的Validation的内容</td></tr>
<tr><td><a href="#TagValidTableValidation_GetIds"><div id="func_TagValidTableValidation_GetIds"/>Validation_GetIds</a></td><td>取得所有Validation的ID</td></tr>
<tr><td><a href="#TagValidTableValidation_Set"><div id="func_TagValidTableValidation_Set"/>Validation_Set</a></td><td>更改或添加Validation</td></tr>
<tr><td><a href="#TagValidTableValidation_Add"><div id="func_TagValidTableValidation_Add"/>Validation_Add</a></td><td>添加Validation</td></tr>
<tr><td><a href="#TagValidTableValidation_Delete"><div id="func_TagValidTableValidation_Delete"/>Validation_Delete</a></td><td>删除某id的Validation</td></tr>
<tr><td><a href="#TagValidTableValidation_DeleteAll"><div id="func_TagValidTableValidation_DeleteAll"/>Validation_DeleteAll</a></td><td>删除所有Validation</td></tr>
</table>
<br>
 函数详解:
<div id="TagValidTableValidation_Get"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>Validation_Get</td><td class="funcTD">取得某id的Validation的内容</td><td align="right" style="border-left:0px;"><a href="#func_TagValidTableValidation_Get"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>Validation的句柄</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>Validation的id</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>该Validation的JSon串</td></tr>
</table>
<br>

<div id="TagValidTableValidation_GetIds"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>Validation_GetIds</td><td class="funcTD">取得所有Validation的ID</td><td align="right" style="border-left:0px;"><a href="#func_TagValidTableValidation_GetIds"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>Validation的句柄</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>ID, 多个ID间以逗号分隔</td></tr>
</table>
<br>

<div id="TagValidTableValidation_Set"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>Validation_Set</td><td class="funcTD">更改或添加Validation</td><td align="right" style="border-left:0px;"><a href="#func_TagValidTableValidation_Set"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>Validation的句柄</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>Validation的id，如果该id不存在，就添加</td></tr>
  <tr><td align=right>参数3</td><td colspan=2>该Validation的JSon串，或以分号分隔的"key=value"格式串</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
  <tr class="example"><td align=right>示例</td><td colspan=2>var h = AF.func("GetHandle", "Validation");  //取得句柄<br>
AF.func("Validation_Set", h+"DJ1 \r\n {'errorText':'价格不对', 'validation':'price>0'}");</td></tr>
</table>
<br>

<div id="TagValidTableValidation_Add"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>Validation_Add</td><td class="funcTD">添加Validation</td><td align="right" style="border-left:0px;"><a href="#func_TagValidTableValidation_Add"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>Validation的句柄</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>Validation的JSon串，或以分号分隔的"key=value"格式串</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
</table>
<br>

<div id="TagValidTableValidation_Delete"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>Validation_Delete</td><td class="funcTD">删除某id的Validation</td><td align="right" style="border-left:0px;"><a href="#func_TagValidTableValidation_Delete"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>Validation的句柄</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>Validation的id</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
</table>
<br>

<div id="TagValidTableValidation_DeleteAll"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>Validation_DeleteAll</td><td class="funcTD">删除所有Validation</td><td align="right" style="border-left:0px;"><a href="#func_TagValidTableValidation_DeleteAll"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>Validation的句柄</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
</table>
<br>
<br>
<br>




<div id="g6"></div><br><hr>
<table width=95%>
	<tr>
		<td class="noline"><p class='sz3'>5.对表达式和计算函数的封装</p></td>
		<td class="noline" align=right><a href="#g0"><img border=0 src="image/home.bmp" title="回到总目录"/></a></td>
	</tr>
</table>
<h4>5.1.对表达式的封装</h4>
　　硕正内部有一表达式解析引擎，它能高效地处理报表、树列表组件的公式表达式，表达式的书写规则在“开发者指南 \ 公共内容” 中的 “表达式” 有专门的介绍，通过如下2个API函数，您也可以单独调用该功能.<br>
<table width=94% border=1 align="center">
<tr><th>分类</th><th>函数名</th><th>用途</th></tr>
<tr><td rowspan=2>表达式函数</td><td><a href="#TagExpTableRunExp"><div id="func_TagExpTableRunExp"/>RunExp</a></td><td>执行表达式</td></tr>
<tr><td><a href="#TagExpTableParseExp"><div id="func_TagExpTableParseExp"/>ParseExp</a></td><td>解析表达式</td></tr>
</table>
<br>
 函数详解:
<div id="TagExpTableRunExp"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>RunExp</td><td class="funcTD">执行表达式</td><td align="right" style="border-left:0px;"><a href="#func_TagExpTableRunExp"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>表达式串</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>结果，如果执行有误，返回的是"[Err!]"</td></tr>
  <tr class="example"><td align=right>示例</td><td colspan=2>var result = AF.func("runExp", "15+3");  //返回18</td></tr>
</table>
<br>

<div id="TagExpTableParseExp"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>ParseExp</td><td class="funcTD">解析表达式</td><td align="right" style="border-left:0px;"><a href="#func_TagExpTableParseExp"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>表达式串</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>空串表示表达式正确，否则返回错误信息</td></tr>
</table>
<br>

<h4>5.2.对计算函数的封装</h4>
　　“开发者指南 \ 公共内容” 中的 “计算函数” 一般单独用于硕正组件自身的表达式，但也可以用 AF.func( ) 单独调用，例如.<br>
<pre class='cpp'>
 //返回串 "壹万零壹佰贰拾叁元贰角肆分"
 var s = AF.func("RMB", "10123.24");
 
 //返回串 "10,123.20"
 var s = AF.func("formatNum", "10123.2 \r\n #,##0.00");
</pre>
　　Report报表中的数据源函数，象 "data"、"head"、"search" 这些取得单个数据的函数，可以通过本方法获取,  但是 "datarow"、"headrow" 这些函数就无法支持了。<br>
<img src='image/glass.bmp' class="imgleft"><p class="glass">执行 Report 报表的这些函数前, 通常还需要执行报表的 <a href="report02.htm#TagFuncTableSetHoldDSData" target=_blank>SetHoldDSData</a> 函数.</p>
<br>
<br>



<br>
<div id="g7"></div><br><hr>
<table width=95%>
	<tr>
		<td class="noline"><p class='sz3'>6.DOM函数</p></td>
		<td class="noline" align=right><a href="#g0"><img border=0 src="image/home.bmp" title="回到总目录"/></a></td>
	</tr>
</table>
　　DOM(文档对象模型)是XML/JSON在内存中的OO结构模型，通过以下的DOM函数集，您可以较方便地解析、修改或生成XML串. 为了能理解函数及参数的作用，我们先对某些术语作一个解释、约定：<br>
<b>1.DOM句柄</b><br>
　　XML/JSON是一棵树，树的每一个节点(包括树杈、树叶)在内存中都是DOM类的对象实例，而每个对象实例都有一个唯一的指针地址的，我们就把这个指针地址称作“句柄”。<br>
<b>2.DOM父亲、子孙</b><br>
　　由于XML/JSON可以是任意级别的复杂树，所以每个DOM对象中，都有父亲、子孙的存储位置的。没有父亲的DOM对象就是根节点，没有儿子的DOM对象就是树叶。<br>
<b>3.DOM元素名、属性</b><br>
　　按常规的资料，都叫做元素，但我们这里稍加区分：<br>
<center><img src='image/dom.png'/></center>
　　这样，每个DOM对象都有一个元素名，同时也可以有多个属性，以及属性对应的值.<br>
<b>4.内存泄漏</b><br>
　　如果您创建了DOM对象，但没有销毁它，那么势必会造成该内存块始终被占用，这就是所谓的内存泄漏。除非如下文档中有特别的声明，否则您最终必须销毁该对象。<br>
　　子孙DOM对象是不需要你去销毁的，因为父对象在销毁自己的同时，它自己会去逐个销毁子孙对象的。<br>
<b>5.实例</b><br>
　　如下3个例子由浅入深，演示了部分DOM函数的功能，假如这是原始的XML:<br>
<pre class='xml'>
&lt;root&gt;
 &lt;product id='001'&gt;MB&lt;/product&gt;
&lt;/root&gt;</pre>
　　<b>例一.简单的转换</b><br>
<pre class='cpp'>
 var xml="&lt;root&gt;&lt;product id='001'&gt;MB&lt;/product&gt;&lt;/root&gt;";
 var hRoot = AF.func("dom_new", xml);  //创建DOM对象
 alert(AF.func("dom_export", hRoot));  //export为 XML 串
 AF.func("dom_delete", hRoot);  //最后必须销毁</pre>
<Center><input type=button value=" 执行 " onClick="demo1()"><div style="position:relative;width:2px;height:2px"><script>insertTree('AF', 'Border=none;BackColor=#ffffff')</script></div></Center>
<br><br>
　　<b>例二.更改元素的内容</b><br>
<pre class='cpp'>
 var hRoot = AF.func("dom_new", xml);  //创建DOM对象
 var hProd = AF.func("dom_find", hRoot + "\r\n product");  //定位到 product 元素
 AF.func("dom_setProp", hProd + "\r\n id \r\n100000");  //修改属性
 AF.func("dom_setProp", hProd + "\r\n #text \r\nUser");  //修改text
 alert(AF.func("dom_export", hRoot));
 AF.func("dom_delete", hRoot);  //最后必须销毁</pre>
<Center><input type=button value=" 执行 " onClick="demo2()"></Center>
<br><br>
　　<b>例三.添加节点、删除节点:</b><br>
<pre class='cpp'>
 var hRoot = AF.func("dom_new", xml);  //创建DOM对象
 
 //插入一个新的对象
 var hNew = AF.func("dom_new", "");  //创建一个空的DOM元素
 AF.func("dom_setName", hNew + "\r\n customer");  //设定元素名
 AF.func("dom_setProp", hNew + "\r\n #text \r\nUser");  //设定text
 AF.func("dom_insertChild", hRoot + "\r\n -1 \r\n" + hNew);
 
 //删除 product 节点
 var hProd = AF.func("dom_find", hRoot + "\r\n product");
 AF.func("dom_Delete", hProd);
 
 //查看结果
 alert(AF.func("dom_export", hRoot));
 AF.func("dom_delete", hRoot);  //最后必须销毁根节点</pre>
<Center><input type=button value=" 执行 " onClick="demo3()"></Center>
<br>

<table width=94% border=1 align="center">
<tr><th>分类</th><th>函数名</th><th>用途</th></tr>
<tr><td rowspan=18>DOM函数</td><td><a href="#TagDomTableDOM_new"><div id="func_TagDomTableDOM_new"/>DOM_new</a></td><td>创建新的DOM对象</td></tr>
<tr><td><a href="#TagDomTableDOM_Delete"><div id="func_TagDomTableDOM_Delete"/>DOM_Delete</a></td><td>销毁某个DOM对象</td></tr>
<tr><td><a href="#TagDomTableDOM_Clone"><div id="func_TagDomTableDOM_Clone"/>DOM_Clone</a></td><td>克隆(即复制)DOM对象</td></tr>
<tr><td><a href="#TagDomTableDOM_IsValid"><div id="func_TagDomTableDOM_IsValid"/>DOM_IsValid</a></td><td>判断某个句柄是否是DOM对象</td></tr>
<tr><td><a href="#TagDomTableDOM_Export"><div id="func_TagDomTableDOM_Export"/>DOM_Export</a></td><td>取得DOM对象的完整的XML内容串(包含子孙)</td></tr>
<tr><td><a href="#TagDomTableDOM_GetName"><div id="func_TagDomTableDOM_GetName"/>DOM_GetName</a></td><td>取得本DOM节点的名称</td></tr>
<tr><td><a href="#TagDomTableDOM_SetName"><div id="func_TagDomTableDOM_SetName"/>DOM_SetName</a></td><td>更改本DOM节点的名称</td></tr>
<tr><td><a href="#TagDomTableDOM_GetProp"><div id="func_TagDomTableDOM_GetProp"/>DOM_GetProp</a></td><td>取得DOM节点中某属性的值</td></tr>
<tr><td><a href="#TagDomTableDOM_SetProp"><div id="func_TagDomTableDOM_SetProp"/>DOM_SetProp</a></td><td>更改本DOM节点某属性的值 (包括了增删改功能)</td></tr>
<tr><td><a href="#TagDomTableDOM_GetPropNames"><div id="func_TagDomTableDOM_GetPropNames"/>DOM_GetPropNames</a></td><td>取得本DOM节点全部的属性名</td></tr>
<tr><td><a href="#TagDomTableDOM_GetParent"><div id="func_TagDomTableDOM_GetParent"/>DOM_GetParent</a></td><td>取得某节点的父节点句柄</td></tr>
<tr><td><a href="#TagDomTableDOM_GetChildCount"><div id="func_TagDomTableDOM_GetChildCount"/>DOM_GetChildCount</a></td><td>取得儿子的个数</td></tr>
<tr><td><a href="#TagDomTableDOM_GetChild"><div id="func_TagDomTableDOM_GetChild"/>DOM_GetChild</a></td><td>取得n个儿子的句柄</td></tr>
<tr><td><a href="#TagDomTableDOM_IsLeaf"><div id="func_TagDomTableDOM_IsLeaf"/>DOM_IsLeaf</a></td><td>判断某节点是否树叶</td></tr>
<tr><td><a href="#TagDomTableDOM_GetLeafArray"><div id="func_TagDomTableDOM_GetLeafArray"/>DOM_GetLeafArray</a></td><td>取得子孙中所有树叶的句柄</td></tr>
<tr><td><a href="#TagDomTableDOM_Find"><div id="func_TagDomTableDOM_Find"/>DOM_Find</a></td><td>从子孙中查找某个元素名的节点句柄</td></tr>
<tr><td><a href="#TagDomTableDOM_InsertChild(用法1)"><div id="func_TagDomTableDOM_InsertChild(用法1)"/>DOM_InsertChild(用法1)</a></td><td>插入一个儿子</td></tr>
<tr><td><a href="#TagDomTableDOM_InsertChild(用法2)"><div id="func_TagDomTableDOM_InsertChild(用法2)"/>DOM_InsertChild(用法2)</a></td><td>插入一个儿子</td></tr>
</table>
<br>
 函数详解:
<div id="TagDomTableDOM_new"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>DOM_new</td><td class="funcTD">创建新的DOM对象</td><td align="right" style="border-left:0px;"><a href="#func_TagDomTableDOM_new"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>XML/JSON大串，或者是URL(相对或绝对)，也可以是空串</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>DOM对象的句柄，空串表示创建失败。失败原因有：不是有效的XML/JSON串，或者参数作为URL时，无法从该URL读取.</td></tr>
  <tr><td align=right>备注</td><td colspan=2>您最终必须通过 DOM_Delete 函数销毁这个句柄的，否则会导致内存泄漏.</td></tr>
</table>
<br>

<div id="TagDomTableDOM_Delete"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>DOM_Delete</td><td class="funcTD">销毁某个DOM对象</td><td align="right" style="border-left:0px;"><a href="#func_TagDomTableDOM_Delete"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>DOM对象的句柄</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>1/0 - 成功/失败，失败原因通常是参数不是有效的DOM对象句柄</td></tr>
  <tr><td align=right>备注</td><td colspan=2>1.DOM对象句柄通常是根节点句柄，但也支持是某个子节点的对象句柄;<br>
2.如果该对象是某个子节点，那么它的父节点将会把它从子孙集合中移除，换句话说，利用本函数，您可以单独删除DOM树中的某一个节点;<br>
3.销毁时，该DOM对象的所有子孙节点DOM对象也将随之销毁；<br>
</td></tr>
</table>
<br>

<div id="TagDomTableDOM_Clone"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>DOM_Clone</td><td class="funcTD">克隆(即复制)DOM对象</td><td align="right" style="border-left:0px;"><a href="#func_TagDomTableDOM_Clone"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>DOM对象句柄</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>新的DOM对象的句柄，空串表示参数无效</td></tr>
  <tr><td align=right>备注</td><td colspan=2>1.返回的DOM对象内容上和原对象一模一样，但是它没有父节点;<br>
2.一般情况下，该句柄也是必须要销毁的，否则也会造成内存泄漏;</td></tr>
</table>
<br>

<div id="TagDomTableDOM_IsValid"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>DOM_IsValid</td><td class="funcTD">判断某个句柄是否是DOM对象</td><td align="right" style="border-left:0px;"><a href="#func_TagDomTableDOM_IsValid"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>句柄</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>1/0 - 是/否</td></tr>
  <tr><td align=right>备注</td><td colspan=2>如果DOM对象被销毁了，那么该句柄就无效了</td></tr>
</table>
<br>

<div id="TagDomTableDOM_Export"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>DOM_Export</td><td class="funcTD">取得DOM对象的完整的XML内容串(包含子孙)</td><td align="right" style="border-left:0px;"><a href="#func_TagDomTableDOM_Export"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>DOM对象句柄</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>XML串， 空串表示句柄无效</td></tr>
</table>
<br>

<div id="TagDomTableDOM_GetName"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>DOM_GetName</td><td class="funcTD">取得本DOM节点的名称</td><td align="right" style="border-left:0px;"><a href="#func_TagDomTableDOM_GetName"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>DOM句柄</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>串</td></tr>
  <tr><td align=right>备注</td><td colspan=2>名称是指元素名，比如 &lt;Properties  height="3" ...&gt; 这样的DOM对象，返回的是串"Properties"</td></tr>
</table>
<br>

<div id="TagDomTableDOM_SetName"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>DOM_SetName</td><td class="funcTD">更改本DOM节点的名称</td><td align="right" style="border-left:0px;"><a href="#func_TagDomTableDOM_SetName"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>DOM句柄</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>名称</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>1/0 - 成功/失败, 失败的原因通常为: DOM句柄不正确、或名称不符合规范</td></tr>
</table>
<br>

<div id="TagDomTableDOM_GetProp"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>DOM_GetProp</td><td class="funcTD">取得DOM节点中某属性的值</td><td align="right" style="border-left:0px;"><a href="#func_TagDomTableDOM_GetProp"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>DOM句柄</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>属性名</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>串</td></tr>
  <tr><td align=right>备注</td><td colspan=2>XML元素自身的内容用 “#text”表示(请参考示例)</td></tr>
  <tr class="example"><td align=right>示例</td><td colspan=2>例如 &lt;Properties  height="3" &gt;ABC&lt;/Properties&gt; 这样的DOM对象：<br>
AF.func("DOM_GetProp", handle + "\r\n height") 返回 3<br>
AF.func("DOM_GetProp", handle + "\r\n #text") 返回 ABC</td></tr>
</table>
<br>

<div id="TagDomTableDOM_SetProp"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>DOM_SetProp</td><td class="funcTD">更改本DOM节点某属性的值 (包括了增删改功能)</td><td align="right" style="border-left:0px;"><a href="#func_TagDomTableDOM_SetProp"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>DOM句柄</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>属性名</td></tr>
  <tr><td align=right>参数3</td><td colspan=2>值串</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>1/0 - 成功/失败。 失败的原因通常为: DOM句柄不正确、或属性名不符合规范</td></tr>
  <tr><td align=right>备注</td><td colspan=2>1.XML元素自身的内容用 “#text”表示;<br>
2.如果属性不存在，则自动增加这个属性;<br>
3.如果值为空，表示删除这个属性;<br>
4.请参考 DOM_GetProp 中的示例</td></tr>
</table>
<br>

<div id="TagDomTableDOM_GetPropNames"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>DOM_GetPropNames</td><td class="funcTD">取得本DOM节点全部的属性名</td><td align="right" style="border-left:0px;"><a href="#func_TagDomTableDOM_GetPropNames"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>DOM句柄</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>以逗号分隔的属性名</td></tr>
  <tr class="example"><td align=right>示例</td><td colspan=2>例如 &lt;Properties  height="3" width="4" /&gt; 这样的DOM对象：<br>
AF.func("DOM_GetPropNames", handle) 返回串 "height,width"</td></tr>
</table>
<br>

<div id="TagDomTableDOM_GetParent"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>DOM_GetParent</td><td class="funcTD">取得某节点的父节点句柄</td><td align="right" style="border-left:0px;"><a href="#func_TagDomTableDOM_GetParent"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>DOM句柄</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>父亲的DOM句柄，空串表示参数句柄无效</td></tr>
</table>
<br>

<div id="TagDomTableDOM_GetChildCount"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>DOM_GetChildCount</td><td class="funcTD">取得儿子的个数</td><td align="right" style="border-left:0px;"><a href="#func_TagDomTableDOM_GetChildCount"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>DOM句柄</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>数字</td></tr>
</table>
<br>

<div id="TagDomTableDOM_GetChild"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>DOM_GetChild</td><td class="funcTD">取得n个儿子的句柄</td><td align="right" style="border-left:0px;"><a href="#func_TagDomTableDOM_GetChild"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>DOM句柄</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>数字，顺序号(从0开始计数)</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>该儿子的DOM句柄，空串表示顺序号已经超出</td></tr>
</table>
<br>

<div id="TagDomTableDOM_IsLeaf"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>DOM_IsLeaf</td><td class="funcTD">判断某节点是否树叶</td><td align="right" style="border-left:0px;"><a href="#func_TagDomTableDOM_IsLeaf"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>DOM句柄</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>1/0/空串 - 是/否/无效的DOM句柄</td></tr>
</table>
<br>

<div id="TagDomTableDOM_GetLeafArray"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>DOM_GetLeafArray</td><td class="funcTD">取得子孙中所有树叶的句柄</td><td align="right" style="border-left:0px;"><a href="#func_TagDomTableDOM_GetLeafArray"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>DOM句柄</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>可选，为 true/false，true - 从儿子、孙子、重孙辈...中查找； false - 仅在儿子辈中查找， 默认是 true</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>以逗号分隔的句柄</td></tr>
</table>
<br>

<div id="TagDomTableDOM_Find"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>DOM_Find</td><td class="funcTD">从子孙中查找某个元素名的节点句柄</td><td align="right" style="border-left:0px;"><a href="#func_TagDomTableDOM_Find"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>DOM句柄</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>要查找的元素名</td></tr>
  <tr><td align=right>参数3</td><td colspan=2>可选，为 true/false，true - 从儿子、孙子、重孙辈...中查找； false - 仅在儿子辈中查找， 默认是 true</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>以逗号分隔的句柄</td></tr>
</table>
<br>

<div id="TagDomTableDOM_InsertChild(用法1)"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>DOM_InsertChild(用法1)</td><td class="funcTD">插入一个儿子</td><td align="right" style="border-left:0px;"><a href="#func_TagDomTableDOM_InsertChild(用法1)"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>DOM句柄</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>位置，-1表示从末尾添加</td></tr>
  <tr><td align=right>参数3</td><td colspan=2>新加入的DOM句柄</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>DOM的句柄，即和参数3完全一样的串，空串表示失败</td></tr>
  <tr><td align=right>备注</td><td colspan=2>1.如果新加入的DOM句柄是通过 DOM_New 函数生成的，那么你不必用DOM_Delete销毁它，因为它的生命周期已经被它的父亲控制了;<br>
2.新加入的DOM句柄允许是现有的某个子孙的句柄(包括来自同一个祖先或其它祖先)，相当于是该DOM对象转移位置(或者说是改变父亲)而已.</td></tr>
</table>
<br>

<div id="TagDomTableDOM_InsertChild(用法2)"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>DOM_InsertChild(用法2)</td><td class="funcTD">插入一个儿子</td><td align="right" style="border-left:0px;"><a href="#func_TagDomTableDOM_InsertChild(用法2)"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>DOM句柄</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>位置，-1表示从末尾添加</td></tr>
  <tr><td align=right>参数3</td><td colspan=2>新插入的节点元素的元素名</td></tr>
  <tr><td align=right>参数4</td><td colspan=2>可选，新插入的元素自己的内容(即所谓 #text)</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>新生儿的句柄，空串表示失败，失败原因通常为父句柄无效、元素名命名不符合规范</td></tr>
</table>
<br>
<br>



<br>
<br>
<div id="g8"></div><br><hr>
<table width=95%>
	<tr>
		<td class="noline"><p class='sz3'>7.其它函数</p></td>
		<td class="noline" align=right><a href="#g0"><img border=0 src="image/home.bmp" title="回到总目录"/></a></td>
	</tr>
</table>
<table width=94% border=1 align="center">
<tr><th>分类</th><th>函数名</th><th>用途</th></tr>
<tr><td rowspan=7>常用函数</td><td><a href="#TagOtherTableCancelEvent"><div id="func_TagOtherTableCancelEvent"/>CancelEvent</a></td><td>取消执行某些事件</td></tr>
<tr><td><a href="#TagOtherTabletoJson"><div id="func_TagOtherTabletoJson"/>toJson</a></td><td>将XML串转换成JSon</td></tr>
<tr><td><a href="#TagOtherTableSetMultiLineEnter"><div id="func_TagOtherTableSetMultiLineEnter"/>SetMultiLineEnter</a></td><td>设置多行编辑是否直接以回车换行</td></tr>
<tr><td><a href="#TagOtherTableGetMultiLineEnter"><div id="func_TagOtherTableGetMultiLineEnter"/>GetMultiLineEnter</a></td><td>取得多行编辑是否直接以回车换行</td></tr>
<tr><td><a href="#TagOtherTableMenu"><div id="func_TagOtherTableMenu"/>Menu</a></td><td>在当前鼠标位置直接弹出一个自定义菜单</td></tr>
<tr><td><a href="#TagOtherTablePostMessage"><div id="func_TagOtherTablePostMessage"/>PostMessage</a></td><td>Post一个自定义消息</td></tr>
<tr><td><a href="#TagOtherTableDeclareAsynch"><div id="func_TagOtherTableDeclareAsynch"/>DeclareAsynch</a></td><td>声明异步执行下一个函数</td></tr>
<tr><td rowspan=1>遮罩函数</td><td><a href="#TagOtherTableGrayWindow"><div id="func_TagOtherTableGrayWindow"/>GrayWindow</a></td><td>使控件呈现被遮罩的半透明效果</td></tr>
<tr><td rowspan=8>缓存函数</td><td><a href="#TagOtherTableClearImageCache"><div id="func_TagOtherTableClearImageCache"/>ClearImageCache</a></td><td>清理某个Treelist/freeform的图片缓存</td></tr>
<tr><td><a href="#TagOtherTableSaveCache"><div id="func_TagOtherTableSaveCache"/>SaveCache</a></td><td>将串存入本地缓存</td></tr>
<tr><td><a href="#TagOtherTableReadCache"><div id="func_TagOtherTableReadCache"/>ReadCache</a></td><td>读取缓存内容</td></tr>
<tr><td><a href="#TagOtherTableGetCacheIDs"><div id="func_TagOtherTableGetCacheIDs"/>GetCacheIDs</a></td><td>取得所有缓存内容的ID号</td></tr>
<tr><td><a href="#TagOtherTableListenEvent"><div id="func_TagOtherTableListenEvent"/>ListenEvent</a></td><td>监听某些特殊事件</td></tr>
<tr><td><a href="#TagOtherTableCacheDirUtility"><div id="func_TagOtherTableCacheDirUtility"/>CacheDirUtility</a></td><td>本地缓存目录实用程序</td></tr>
<tr><td><a href="#TagOtherTableGetDataString"><div id="func_TagOtherTableGetDataString"/>GetDataString</a></td><td>取得某个内存块中的内容</td></tr>
<tr><td><a href="#TagOtherTableSetDataString"><div id="func_TagOtherTableSetDataString"/>SetDataString</a></td><td>将串写入某个内存块</td></tr>
<tr><td rowspan=7>文件相关函数</td><td><a href="#TagOtherTableHttpPostLocalFile"><div id="func_TagOtherTableHttpPostLocalFile"/>HttpPostLocalFile</a></td><td>通过Post简单上传一个本地文件</td></tr>
<tr><td><a href="#TagOtherTableDownload"><div id="func_TagOtherTableDownload"/>Download</a></td><td>文件下载</td></tr>
<tr><td><a href="#TagOtherTableCancelDownload"><div id="func_TagOtherTableCancelDownload"/>CancelDownload</a></td><td>中断文件下载，仅用于异步下载</td></tr>
<tr><td><a href="#TagOtherTableFileUtility"><div id="func_TagOtherTableFileUtility"/>FileUtility</a></td><td>本地文件操作</td></tr>
<tr><td><a href="#TagOtherTableFileDialog"><div id="func_TagOtherTableFileDialog"/>FileDialog</a></td><td>打开文件或目录选择对话框</td></tr>
<tr><td><a href="#TagOtherTableShellExecute"><div id="func_TagOtherTableShellExecute"/>ShellExecute</a></td><td>使用本地操作系统的关联的应用程序, 打开本地的某个文件</td></tr>
<tr><td><a href="#TagOtherTableGetExcelSheetName"><div id="func_TagOtherTableGetExcelSheetName"/>GetExcelSheetName</a></td><td>取得本地 Excel 文件中各个工作表的名称</td></tr>
<tr><td rowspan=11>硬件和操作系统函数</td><td><a href="#TagOtherTableGetMac"><div id="func_TagOtherTableGetMac"/>GetMac</a></td><td>取得网卡Mac地址</td></tr>
<tr><td><a href="#TagOtherTableGetIP"><div id="func_TagOtherTableGetIP"/>GetIP</a></td><td>取得本机IP地址</td></tr>
<tr><td><a href="#TagOtherTableGetComputerName"><div id="func_TagOtherTableGetComputerName"/>GetComputerName</a></td><td>取得客户端的计算机名</td></tr>
<tr><td><a href="#TagOtherTableGetNumberOfProcessors"><div id="func_TagOtherTableGetNumberOfProcessors"/>GetNumberOfProcessors</a></td><td>取得本机CPU核心数</td></tr>
<tr><td><a href="#TagOtherTableGetPrinters"><div id="func_TagOtherTableGetPrinters"/>GetPrinters</a></td><td>取得本地已安装的所有打印机名</td></tr>
<tr><td><a href="#TagOtherTableGetPrinterPapers"><div id="func_TagOtherTableGetPrinterPapers"/>GetPrinterPapers</a></td><td>取得某打印机所支持的所有打印纸号</td></tr>
<tr><td><a href="#TagOtherTableGetLastPrintInfo"><div id="func_TagOtherTableGetLastPrintInfo"/>GetLastPrintInfo</a></td><td>取得上次硕正报表、树列表打印所用的打印机名和份数</td></tr>
<tr><td><a href="#TagOtherTableGetFonts"><div id="func_TagOtherTableGetFonts"/>GetFonts</a></td><td>取得已使用的全部字体资源</td></tr>
<tr><td><a href="#TagOtherTableAddFont"><div id="func_TagOtherTableAddFont"/>AddFont</a></td><td>添加一种字体, 如果字体已经存在，则返回该字体的顺序号(fontIndex)</td></tr>
<tr><td><a href="#TagOtherTableOpenSysFontDialog"><div id="func_TagOtherTableOpenSysFontDialog"/>OpenSysFontDialog</a></td><td>打开操作系统的字体对话框</td></tr>
<tr><td><a href="#TagOtherTableOpenSysColorDialog"><div id="func_TagOtherTableOpenSysColorDialog"/>OpenSysColorDialog</a></td><td>打开操作系统的颜色对话框</td></tr>
<tr><td rowspan=11>系统和实用函数</td><td><a href="#TagOtherTableGetLanguage"><div id="func_TagOtherTableGetLanguage"/>GetLanguage</a></td><td>取得当前语言</td></tr>
<tr><td><a href="#TagOtherTableSetLanguage"><div id="func_TagOtherTableSetLanguage"/>SetLanguage</a></td><td>切换语言</td></tr>
<tr><td><a href="#TagOtherTableGetCtlName"><div id="func_TagOtherTableGetCtlName"/>GetCtlName</a></td><td>取得组件名</td></tr>
<tr><td><a href="#TagOtherTableIsComponentInstalled"><div id="func_TagOtherTableIsComponentInstalled"/>IsComponentInstalled</a></td><td>某组件是否已经下载</td></tr>
<tr><td><a href="#TagOtherTableGetHandleType"><div id="func_TagOtherTableGetHandleType"/>GetHandleType</a></td><td>取得句柄的类型</td></tr>
<tr><td><a href="#TagOtherTableGetCookie"><div id="func_TagOtherTableGetCookie"/>GetCookie</a></td><td>取得当前的Cookie</td></tr>
<tr><td><a href="#TagOtherTableSetCookie"><div id="func_TagOtherTableSetCookie"/>SetCookie</a></td><td>设置Cookie串，用于当前插件对象后续的 http 请求</td></tr>
<tr><td><a href="#TagOtherTableGetChar"><div id="func_TagOtherTableGetChar"/>GetChar</a></td><td>取得某个字符编码所对应的文字</td></tr>
<tr><td><a href="#TagOtherTableScreenShot"><div id="func_TagOtherTableScreenShot"/>ScreenShot</a></td><td>取得当前屏幕截图</td></tr>
<tr><td><a href="#TagOtherTableQR"><div id="func_TagOtherTableQR"/>QR</a></td><td>生成二维码图片(bmp格式)</td></tr>
<tr><td><a href="#TagOtherTableSleep"><div id="func_TagOtherTableSleep"/>Sleep</a></td><td>阻塞当前线程(通常是主线程)，让其等待若干时间</td></tr>
</table>
<br>

 函数详解:
<div id="TagOtherTableCancelEvent"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>CancelEvent</td><td class="funcTD">阻止事件继续执行</td><td align="right" style="border-left:0px;"><a href="#func_TagOtherTableCancelEvent"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>备注</td><td colspan=2>1.只能用在 OnEvent 事件中, 并且需要对照事件说明文档, 因为并不是所有事件都能被阻止的;<br>
2.通常用于某些 "Before..." 事件中. 以分页为例，如果你在 BeforePager 事件中执行了本函数，下一真正步的分页处理将被取消、不再执行;<br>
3.通常是书写在事件返回语句前，即紧挨在 return 前;</td></tr>
</table>
<br>

<div id="TagOtherTabletoJson"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>toJson</td><td class="funcTD">将XML串转换成JSon</td><td align="right" style="border-left:0px;"><img src="image/documentg.bmp" title="请参见Treelist的 30.查询条件(一)、31.查询条件(二)">&nbsp;&nbsp;<a href="#func_TagOtherTabletoJson"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>XML串</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>可选，可以是串"Recordset"，表示待转换的XML是平面结果集数据，转换后的JSON串是类似这种更简洁的格式：<br>
　　{"id":"k203", price:"2230.12", "dept":"fin01"}<br>
如果XML是多条记录，则JSON是数组：<br>
　　[<br>
　　　{"id":"k203", price:"2230.12", "dept":"fin01"},<br>
　　　{"id":"s508", price:"33.00", "dept":"fin02"}<br>
　　]
</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>JSON串(注：如果参数1不是XML，则直接返回该参数)</td></tr>
</table>
<br>

<div id="TagOtherTableSetMultiLineEnter"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>SetMultiLineEnter</td><td class="funcTD">在默认情况下，多行编辑(MultiLineEdit)是以Ctrl+Enter实现换行的。如果设为true，则直接回车就实现换行.</td><td align="right" style="border-left:0px;"><a href="#func_TagOtherTableSetMultiLineEnter"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>true/false, 默认false</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>备注</td><td colspan=2>该函数是全局函数，一旦执行，进程内的多行编辑都将生效</td></tr>
</table>
<br>

<div id="TagOtherTableGetMultiLineEnter"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetMultiLineEnter</td><td class="funcTD">取得多行编辑是否直接以回车换行</td><td align="right" style="border-left:0px;"><a href="#func_TagOtherTableGetMultiLineEnter"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>1/0</td></tr>
</table>
<br>

<div id="TagOtherTableMenu"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>Menu</td><td class="funcTD">在当前鼠标位置直接弹出一个自定义菜单</td><td align="right" style="border-left:0px;"><a href="#func_TagOtherTableMenu"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>菜单的XML/JSON/TXT串，其格式请参考Treelist的帮助文档“13.自定义菜单”.</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>对应id号，0表示未选择，空串表示参数有误</td></tr>
  <tr><td align=right>备注<font color=red>*</font></td><td colspan=2>该函数不一定能正常运行，原因未明</td></tr>
  <tr class="example"><td align=right>示例</td><td colspan=2>var s = "id=BZ-4001; text=男帽; icon=treelist/buttons.zip#301.ico; detail=夏季时装\r\n";<br>
s += "id=K4002; text=时髦头巾; icon=treelist/buttons.zip#302.ico; detail=优惠直销";<br>
alert( AF.func("menu", s));</td></tr>
</table>
<br>


<div id="TagOtherTablePostMessage"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>PostMessage</td><td class="funcTD">以Post方式发送一个消息，相当于在消息队列的末尾添加，在页面的OnEvent( )事件中将能收到一个名为 "UserEvent" 的消息。</td><td align="right" style="border-left:0px;"><a href="#func_TagOtherTablePostMessage"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>格式为 p1=?;p2=?;p3=?;p4=?, 也允许忽略</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
  <tr class="example"><td align=right>示例</td><td colspan=2>function OnEvent(id, Event, p1, p2, p3, p4)<br>
{<br>
　if(Event == 'LooseFocus') {<br>
　　if(p1=='0' && p2=='price')<br>
　　　AF.func('PostMessage', 'p1=kk');<br>
　}<br>
　else if(Event == "UserEvent" && p1=="kk") {<br>
　　AF.func("SelectCell", "0 \r\n price");<br>
　}<br>
}</td></tr>
</table>
<br>

<div id="TagOtherTableDeclareAsynch"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>DeclareAsynch</td><td class="funcTD">声明异步执行下一个函数(通常是会弹出模式对话框的函数、用于解决 Firefox 浏览器线程阻塞问题)</td><td align="right" style="border-left:0px;"><img src="image/documentg.bmp" title="请参见自由表头的演示页: 13.基于Freeform的对话框">&nbsp;&nbsp;<a href="#func_TagOtherTableDeclareAsynch"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>格式为 p1=?;p2=?;p3=?, 也允许忽略。如果忽略(即参数为空、不定义p1,p2,p3), 那么下一个函数执行后，将不触发 UserEvent 事件</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>备注</td><td colspan=2>1.函数使用详解请参考 <a href="act10-4.htm" target=_blank>使用指南 \ 10.不同浏览器的一些差别 \ 10.4 线程阻塞问题</a>;<br>
2.注意：参数只有 p1, p2, p3, 不包括 p4, 因为 p4 是异步函数的返回值;<br>
3.本函数仅对下一个函数生效，即寿命是一次性的;<br>
4.本函数的作用范围是整个进程、全局有效，“下一个函数” 不管是硕正哪个组件、哪个页面，都将被安置到新线程异步执行;</td></tr>
</table>
<br>

<div id="TagOtherTableGrayWindow"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GrayWindow</td><td class="funcTD">使控件呈现被遮罩的半透明效果，用于实现网页模式对话框，可参考Treelist的演示页</td><td align="right" style="border-left:0px;"><img src="image/documentg.bmp" title="请参见树列表的演示页: 35.遮罩效果">&nbsp;&nbsp;<a href="#func_TagOtherTableGrayWindow"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>是否遮罩, true - 遮罩,控件被Disable并呈半透明的灰色; false - 解除遮罩</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>可选，灰度, 0-255，默认200, 数值越大越明亮</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
</table>
<br>

<div id="TagOtherTableClearImageCache"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>ClearImageCache</td><td class="funcTD">清理某个Treelist/freeform的图片缓存，以便在下次Build或Load时能及时刷新图片</td><td align="right" style="border-left:0px;"><a href="#func_TagOtherTableClearImageCache"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>Treelist或Freeform的句柄</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>备注</td><td colspan=2>1.句柄是通过GetHandle( )函数获取的;<br>2.Treelist 或 Freeform 有自己的图片缓存，独立于浏览器的缓存;</td></tr>
</table>
<br>

<div id="TagOtherTableSaveCache"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>SaveCache</td><td class="funcTD">将串存入本地缓存，缓存的内容在<font color=red>全局有效、且和页面无关(即所有页面均能访问到)</font></td><td align="right" style="border-left:0px;"><img src="image/documentg.bmp" title="请参见树列表的演示页:31.查询条件(二)">&nbsp;&nbsp;<a href="#func_TagOtherTableSaveCache"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>ID, 可以是任意串</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>内容串，如果是空串，则表示从缓存中移除该ID的内容</td></tr>
  <tr><td align=right>参数3</td><td colspan=2>可选，格式为Persist=[?];TimeOut=[?D/H/M/S], 其中Persist用于指定保存到何处，格式如下：<br>
1.Persist = <b>Memory</b>,  默认，表示将内容缓存于内存中，当浏览器进程关闭后内容将遗失.<br>
2.Persist = <b>File</b>,  将内容保存在本地文件(在BC目录下的 cache.data 文件).<br>
TimeOut表示如果超过一段时间无访问，将自动删除该缓存，格式如下：<br>
TimeOut = <b>?D/?H/?M/?S</b> - 时间间隔，n天/n小时/n分钟/n秒(D/H/M/S分别表示天数、小时、分钟、秒).</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>备注</td><td colspan=2>1.该缓存是硕正套件自己维护的缓存，与浏览器缓存无关;<br>2.如果是本地文件，它位于 BC 目录下;</td></tr>
  <tr class="example"><td align=right>示例</td><td colspan=2>AF.func("SaveCache", "My.Key1 \r\n MyContent1");  //保存到内存<br>
AF.func("SaveCache", "My.Key1 \r\n MyContent1 \r\n Persist=File");  //保存到文件，永久有效<br>
AF.func("SaveCache", "My.Key1 \r\n MyContent1 \r\n TimeOut=3M");  //保存到内存，有效期为3分钟<br>
AF.func("SaveCache", "My.Key1");  //清除ID为 "My.Key1" 的缓存</td></tr>
</table>
<br>

<div id="TagOtherTableReadCache"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>ReadCache</td><td class="funcTD">读取缓存内容</td><td align="right" style="border-left:0px;"><img src="image/documentg.bmp" title="请参见树列表的演示页:31.查询条件(二)">&nbsp;&nbsp;<a href="#func_TagOtherTableReadCache"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>ID, 注：ID是大小写敏感的</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>内容串</td></tr>
  <tr><td align=right>备注</td><td colspan=2>1.该缓存是硕正套件自己维护的缓存，与浏览器缓存无关;<br>2.通常和前面的 SaveCache 关联使用;</td></tr>
</table>
<br>

<div id="TagOtherTableGetCacheIDs"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetCacheIDs</td><td class="funcTD">取得所有缓存内容的ID号</td><td align="right" style="border-left:0px;"><a href="#func_TagOtherTableGetCacheIDs"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>ID串，以逗号分隔</td></tr>
  <tr><td align=right>备注</td><td colspan=2>1.该缓存是硕正套件自己维护的缓存，与浏览器缓存无关;<br>2.通常和前面的 SaveCache、ReadCache 关联使用;</td></tr>
</table>
<br>

<div id="TagOtherTableListenEvent"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>ListenEvent</td><td class="funcTD">监听某些特殊事件</td><td align="right" style="border-left:0px;"><a href="#func_TagOtherTableListenEvent"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>必须为串“CacheSaved”</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>备注</td><td colspan=2>1.用于监听前面的 SaveCache 动作, 一旦 SaveCache 函数被执行，将触发 CacheSaved 事件，不管内容是否被更新;<br>2.可以是跨页面、跨选项卡触发</td></tr>
  <tr class="example"><td align=right>示例</td><td colspan=2>...<br>
AF1.func("ListenEvent", "CacheSaved");  //AF监听 CacheSave 函数<br>
...<br>
AF2.func("SaveCache", "My.Key1 \r\n MyContent1");  //AF2 执行了 SaveCache 函数, 将触发事件<br>
...<br>
function OnEvent(id, Event, p1, p2, p3, p4)<br>
{<br>
　　if(id == "AF1" && Event == "CacheSaved") alert(p1);<br>
}
</td></tr>
</table>
<br>

<div id="TagOtherTableCacheDirUtility"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>CacheDirUtility</td><td class="funcTD">本地缓存目录实用程序</td><td align="right" style="border-left:0px;"><a href="#func_TagOtherTableCacheDirUtility"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>格式为 Dir=[?]; isCreateTempFile=[?]; Ext=[?]; KeepMB=[?]; DeleteEarlierFile=[?]，含义如下:<br>
　<b>Dir</b> - 本地用于缓存的目录名，如果为空，则表示 BC 目录下的 Temp 目录 (服务器版则指向后端的临时目录);<br>
　<b>isCreateTempFile</b> - true/false,  true 表示在目录中创建一个唯一的文件, 并返回文件名;<br>
　　　<b>Ext</b> - 该文件的后缀, 默认是"tmp";<br>
　<b>DeleteEarlierFile</b> - 删除该目录下 n 小时(或分)前的文件, h/m分别表示时/分, 例如 DeleteEarlierFile=3h 表示删除3个小时前的文件; 如果为空，表示不执行该功能;<br>
　<b>KeepMB</b> - 数字，单位是兆比,  删除该目录下最早的文件, 使文件总尺寸不超过 n 兆比; 如果为空，表示不执行该功能;<br>
</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>如果 isCreateTempFile 为true, 则返回全文件名</td></tr>
  <tr><td align=right>备注</td><td colspan=2>"@"开头的文件是不会被删除的，也不计入KeepMB的尺寸</td></tr>
</table>
<br>

<div id="TagOtherTableGetDataString"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetDataString</td><td class="funcTD">取得某个内存块中的内容</td><td align="right" style="border-left:0px;"><a href="#func_TagOtherTableGetDataString"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>内存块的句柄</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>内容串</td></tr>
  <tr><td align=right>备注</td><td colspan=2>1.通常用于 DataReach 事件;<br>2.在大多数情况下, 句柄的生命周期是十分短暂的, 访问无效句柄会导致异常</td></tr>
</table>
<br>

<div id="TagOtherTableSetDataString"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>SetDataString</td><td class="funcTD">将串写入某个内存块</td><td align="right" style="border-left:0px;"><a href="#func_TagOtherTableSetDataString"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>内存块的句柄</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>要写入的串</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>备注</td><td colspan=2>1.通常用于 DataReach 事件;<br>2.在大多数情况下, 句柄的生命周期是十分短暂的, 访问无效句柄会导致异常</td></tr>
</table>
<br>

<div id="TagOtherTableHttpPostLocalFile"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>HttpPostLocalFile</td><td class="funcTD">通过Post简单上传一个本地文件</td><td align="right" style="border-left:0px;"><a href="#func_TagOtherTableHttpPostLocalFile"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>Http的URL， 可以是绝对或相对URL, 如果是相对URL，是相对于页面URL的</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>本地全文件名</td></tr>
  <tr><td align=right>参数3</td><td colspan=2>可选参数，格式为 mode=[?],含义为：<br>
　<b>mode</b> - synch/asynch, 同步/异步上传，默认是同步;<br>
　<b>isEcho</b> - true/false, 是否提示上传成功或失败，默认是true;<br>
</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>0 - 表示有错误，例如本地文件不存在、http传输错误;  否则，在同步上传时返回服务器返回的串、异步上传时返回1</td></tr>
  <tr><td align=right>备注</td><td colspan=2>1.发起的Request中, Http Body 将是该文件的二进制内容;<br>
2.如果是异步上传，上传完成后能触发名为 “Upload”的事件;<br>
3.本函数只能上传较小的文件，因为是一次性将文件读入内存的，所以文件尺寸受制于客户端内存的大小，上传大文件请用硕正的 upload 组件或 Freeform 中的 upload 控件；
</td></tr>
  <tr class="example"><td align=right>示例</td><td colspan=2>AF.func("HttpPostLocalFile", "http://localhost/hlp.aspx?name=my.mp3 \r\n d:\\my.mp3 \r\n mode=asynch");</td></tr>
</table>
<br>

<div id="TagOtherTableDownload"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>Download</td><td class="funcTD">文件下载</td><td align="right" style="border-left:0px;"><a href="#func_TagOtherTableDownload"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>URL，支持Http、Ftp</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>可选，格式为 isOpenDialog=[true/false]; isEcho=[true/false]; toDir=[?]; toFile=[?]; toString=[?]; Ext=[?]; uid=[?]; pwd=[?], 含义为：<br>
　<b>isOpenDialog</b> - 是否打开选择本地文件或目录的对话框，有如下可选项, 默认是true:;<br>
　　　　<b>true(或file)</b> - 打开文件选择对话框;<br>
　　　　<b>dir</b> - 打开目录选择对话框;<br>
　　　　<b>false</b> - 不打开对话框;<br>
　　　　备注：如果选择“dir”，那么必须指定“toFile”文件名参数，文件名可以是不含路径的纯文件名;<br>
　<b>Ext</b> - 在对话框中允许选择的文件后缀，若有多个后缀则以逗号分隔，仅用于 isOpenDialog=true 时;<br>
　<b>toDir</b> - 指定本地目录(绝对路径)，如果路径不存在能自动创建，默认是空;<br>
　<b>toFile</b> - 指定本地文件(如果isOpenDialog=dir, 可以是不含路径的文件名，否则必须是绝对路径)，如果路径不存在能自动创建，默认是空，如果设定了toFile，通常就不需要设定toDir;<br>
　<b>uid</b> - 登录的用户名;<br>
　<b>pwd</b> - 用户口令;<br>
　<b>zip</b> - Expand / ExpandAndDelete / 空串。Expand表示如果下载的文件是用Zip压缩的，则完成下载后自动解压; ExpandAndDelete表示解压后删除zip文件; 为空表示不做解压处理。默认是空串;<br>
　<b>toString 或 isToString</b> - true/false，默认是false。当为 true 时，表示 http(或ftp) 返回的内容肯定是字符串，并将直接返回该串，而不再将内容保存到文件。此时不需要设定isOpenDialog、toDir、toFile等文件参数了。请参见下面的示例.<br>
　<b>toBufferObj 或 isToBufferObj</b> - true/false，默认是false。当为 true 时，返回的内容二进制被包含在硕正的缓存对象中，函数返回该对象的地址的串。该函数不太常用，在硕正套件C/S版中有例子.<br>
　<b>isEcho</b> - 下载后是否浮现一个提示，失败则浮现错误信息，默认是true;<br>
　<b>mode</b> - synch/asynch, 同步/异步下载，默认是同步;<br>
　<b>isShowProgress</b> - true/false, 是否显示进度条，仅用于异步，默认是false;<br>
　<b>cover</b> - 当本地有同名文件时， overwrite/rename/nocover - 直接覆盖/文件自动改名/不覆盖, 仅用于isOpenDialog=false时, 默认是overwrite;<br>
　<b>offset</b> - 数字，单位为字节，本地文件开始写入的偏移，常用于断点续传;<br>
			</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>返回的是本地全文件名，如果是空串则表示失败、或者对话框中选择了“取消”;<br>
如果 isToString=true，则返回的是内容串;<br>
如果是zip解压的，则返回zip包中第一个文件在该目录的全文件名;<br>
如果 mode=asynch(异步下载)，返回的是一个纯数字的任务ID号，用于 Download 事件，如果是空串表示对话框中选择了“取消”。
</td></tr>
  <tr><td align=right>备注</td><td colspan=2>如果是异步下载，在下载结束时将触发 Download 事件，并且在下载过程中会以1秒左右的间隔不停地发送 Download 事件，报告当前的下载进度、网速，详细请参见组件的"Download"事件文档.</td></tr>
  <tr class="example"><td align=right>示例</td><td colspan=2>//下载一个mp3文件，下载前会打开目的文件对话框<br>
AF.func("download", "ftp://192.168.1.2:21/mymusic.mp3");<br>
//下载到指定文件，但仍会打开目的文件对话框<br>
AF.func("download", "http://localhost/hlp.htm \r\n toFile=d:\\my.htm; ext=htm,html,txt");<br>
//直接取得文本串<br>
var xml = AF.func("download", "http://localhost/text.xml \r\n toString=true");</td></tr>
</table>
<br>

<div id="TagOtherTableCancelDownload"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>CancelDownload</td><td class="funcTD">中断文件下载，仅用于异步下载</td><td align="right" style="border-left:0px;"><a href="#func_TagOtherTableCancelDownload"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>ID号，即 Download 函数的返回值</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>为 DeleteFile / KeepFile。DeleteFile - 删除已下载到本地的这个不完整的文件; KeepFile - 保留这个文件。默认是DeleteFile。</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>如果参数2为 DeleteFile , 则返回空串；如果参数2为 KeepFile，则返回本地文件名、文件总长度、已下载的文件长度，3者之间以回车符分隔</td></tr>
</table>
<br>

<div id="TagOtherTableFileUtility"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>FileUtility</td><td class="funcTD">本地文件操作</td><td align="right" style="border-left:0px;"><a href="#func_TagOtherTableFileUtility"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>操作串，可以为:<br>
　<b>isExists</b> - 文件是否存在, 返回1/0;<br>
　<b>GetByte</b> 或 <b>GetBytes</b> - 返回文件长度(单位: 字节);<br>
　<b>GetKB</b> - 返回文件长度(单位: KB);<br>
　<b>GetMB</b> - 返回文件长度(单位: MB);<br>
　<b>GetCTime</b> - 返回文件创建日期;<br>
　<b>GetMTime</b> - 返回文件最后修改日期;<br>
　<b>delete</b> - 删除文件， 返回1/0;<br>
　<b>GetFilenames / GetPathnames</b> - 取得某个子目录下的某些文件名/含路径的全文件名;<br>
</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>如果参数1是GetFilenames / GetPathnames, 本参数是路径的通配符，比如 "d:\docs\*.jpg" ;<br>
否则, 应该是全文件名<br>
</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>根据参数1而定， 如果参数1是GetFilenames / GetPathnames, 返回的是以回车分隔的文件名/全文件名</td></tr>
  <tr class="example"><td align=right>示例</td><td colspan=2>//返回回车分隔的文件名<br>
var s = AF.func("FileUtility", "GetPathnames \r\n d:\\docs\\*.jpg");</td></tr>
</table>
<br>

<div id="TagOtherTableFileDialog"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>FileDialog</td><td class="funcTD">打开文件或目录选择对话框</td><td align="right" style="border-left:0px;"><a href="#func_TagOtherTableFileDialog"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>操作串，可以为:<br>
　<b>isDir</b> - true/fale - 目录选择对话框 / 文件选择对话框，默认是 false;<br>
如果 isDir = true, 还可以有如下选项<br>
　<b>Title</b> - 自定义对话框的标题;<br>
　<b>Dir</b> - 初始选择、展开的目录;<br>
　<b>Root</b> - 目录树的根节点, 可以是 "Desktop" 或 "Driver", 默认是 "Desktop" ;<br>
如果 isDir = false, 则可以有如下选项:<br>
　<b>isOpen</b> - 用途， true/false - 用于打开文件/用于保存文件, 默认是true;<br>
　<b>FileType</b> - 能打开的文件类型(后缀)，多种类型之间以逗号分隔， 例如串 "jpg,bmp,*"， 默认是 "*";<br>
　<b>FileName</b> - 初始选择的文件名;<br>
</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>全文件名</td></tr>
  <tr class="example"><td align=right>示例</td><td colspan=2>var s = AF.func("FileDialog", "isDir=true; Title=请选择目录:");</td></tr>
</table>
<br>

<div id="TagOtherTableShellExecute"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>ShellExecute</td><td class="funcTD">使用本地操作系统的关联的应用程序, 打开本地的某个文件</td><td align="right" style="border-left:0px;"><a href="#func_TagOtherTableShellExecute"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>全文件名</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>1/0 - 成功/失败</td></tr>
  <tr><td align=right>备注</td><td colspan=2>如下 5 种后缀的文件是无法打开的： exe、bat、com、msi、reg</td></tr>
  <tr class="example"><td align=right>示例</td><td colspan=2>AF.func("ShellExecute", "d:\\photo.jpg");</td></tr>
</table>
<br>

<div id="TagOtherTableGetExcelSheetName"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetExcelSheetName</td><td class="funcTD">取得本地 Excel 文件中各个工作表的名称</td><td align="right" style="border-left:0px;"><a href="#func_TagOtherTableGetExcelSheetName"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>本地 Excel 文件的全文件名</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>工作表名称, 多个名称之间以回车符分隔</td></tr>
  <tr><td align=right>备注</td><td colspan=2>支持 xls, xlsx 文件格式</td></tr>
</table>
<br>

<div id="TagOtherTableGetMac"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetMac</td><td class="funcTD">取得网卡Mac地址</td><td align="right" style="border-left:0px;"><a href="#func_TagOtherTableGetMac"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>串(如："1c-6f-65-d6-b8-d1")</td></tr>
</table>
<br>

<div id="TagOtherTableGetIP"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetIP</td><td class="funcTD">取得本机IP地址</td><td align="right" style="border-left:0px;"><a href="#func_TagOtherTableGetIP"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>串(如："192.168.1.1")</td></tr>
</table>
<br>

<div id="TagOtherTableGetComputerName"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetComputerName</td><td class="funcTD">取得客户端的计算机名</td><td align="right" style="border-left:0px;"><a href="#func_TagOtherTableGetComputerName"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>串</td></tr>
</table>
<br>

<div id="TagOtherTableGetNumberOfProcessors"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetNumberOfProcessors</td><td class="funcTD">取得本机CPU逻辑核心数</td><td align="right" style="border-left:0px;"><a href="#func_TagOtherTableGetNumberOfProcessors"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>数字，假如您的电脑是双核四线程，则返回值是4</td></tr>
</table>
<br>

<div id="TagOtherTableGetPrinters"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetPrinters</td><td class="funcTD">取得本地已安装的所有打印机名</td><td align="right" style="border-left:0px;"><a href="#func_TagOtherTableGetPrinters"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>以逗号分隔的打印机名，其中的第一个是默认打印机</td></tr>
</table>
<br>

<div id="TagOtherTableGetPrinterPapers"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetPrinterPapers</td><td class="funcTD">取得某打印机所支持的所有打印纸号</td><td align="right" style="border-left:0px;"><a href="#func_TagOtherTableGetPrinterPapers"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>打印机名</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>以逗号分隔的打印纸号，其中第一个为该打印机默认的打印纸。各种打印纸号所对应的打印纸名称及尺寸请参见“附录4:打印纸对照表”</td></tr>
</table>
<br>

<div id="TagOtherTableGetLastPrintInfo"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetLastPrintInfo</td><td class="funcTD">取得上次硕正报表、树列表实际打印所采用的打印机名和打印份数</td><td align="right" style="border-left:0px;"><a href="#func_TagOtherTableGetLastPrintInfo"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>JSON串，例如: {"Printer":"HP LaserJet P1007", "Copies": 2}, 如果为空串，表示浏览器进程开启以来尚未打印过</td></tr>
</table>
<br>

<div id="TagOtherTableGetFonts"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetFonts</td><td class="funcTD">取得已使用的全部字体资源</td><td align="right" style="border-left:0px;"><a href="#func_TagOtherTableGetFonts"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>XML串</td></tr>
  <tr><td align=right>备注</td><td colspan=2>1.仅用于 Treelist、Freeform、Report; <br>
2. 对于Report，每个工作表都有自己独立的字体资源，本函数仅针对当前工作表</td></tr>
  <tr class="example"><td align=right>示例</td><td colspan=2>var s=AF.func("getFonts", "");<br>
s = AF.func("toJson", s + "\r\n RecordSet");<br>
alert(s);<br>
/*返回的是类似如下这样的串:<br>
[<br>
 {'faceName':'Verdana', 'height':'-12', 'weight':'400', 'pitchAndFamily':'34', 'quality':'1', 'outPrecision':'3', 'clipPrecision':'2'},<br>
 {'faceName':'SimSun', 'charSet':'134', 'height':'-12', 'weight':'400'}<br>
]<br>
*/</td></tr>
</table>
<br>

<div id="TagOtherTableAddFont"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>AddFont</td><td class="funcTD">添加一种字体, 如果字体已经存在，则返回该字体的顺序号(fontIndex)</td><td align="right" style="border-left:0px;"><a href="#func_TagOtherTableAddFont"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>该字体的xml或json串</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>字体顺序号，返回 -1 表示失败</td></tr>
  <tr><td align=right>备注</td><td colspan=2>1.仅用于 Treelist、Freeform、Report; <br>
2. 对于Report，每个工作表都有自己独立的字体资源，本函数仅针对当前工作表</td></tr>
  <tr class="example"><td align=right>示例</td><td colspan=2>var s=AF.func("addFont", "{'faceName':'宋体', 'height':'-12', 'weight':'400'}");</td></tr>
</table>
<br>

<div id="TagOtherTableOpenSysFontDialog"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>OpenSysFontDialog</td><td class="funcTD">打开操作系统的字体对话框</td><td align="right" style="border-left:0px;"><a href="#func_TagOtherTableOpenSysFontDialog"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>用于在对话框初始显示的字体, xml或json串, 如果参数为空, 对话框显示为操作系统默认字体</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>字体的XML串，空串表示点击了 "取消"</td></tr>
  <tr class="example"><td align=right>示例</td><td colspan=2><pre class='cpp'>var s=AF.func("openSysFontDialog", "{'faceName':'宋体', 'height':'-12', 'weight':'400', 'Color':'red'}");
if(s != '') alert( AF.func("tojson", s + "\r\n recordSet") );</pre></td></tr>
</table>
<br>

<div id="TagOtherTableOpenSysColorDialog"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>OpenSysColorDialog</td><td class="funcTD">打开操作系统的颜色对话框</td><td align="right" style="border-left:0px;"><a href="#func_TagOtherTableOpenSysColorDialog"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>对话框的初始颜色, 可以是 "#FF0000" 或 "Red" 这种串, 参数为空则默认为黑色</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>字体串，空串表示点击了 "取消"</td></tr>
</table>
<br>

<div id="TagOtherTableGetLanguage"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetLanguage</td><td class="funcTD">取得当前语言</td><td align="right" style="border-left:0px;"><a href="#func_TagOtherTableGetLanguage"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>936 - 中文简体，1252 - 英文，950 - 中文繁体</td></tr>
</table>
<br>

<div id="TagOtherTableSetLanguage"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>SetLanguage</td><td class="funcTD">切换语言</td><td align="right" style="border-left:0px;"><img src="image/documentg.bmp" title="请参见报表的演示页: 53.多语言(简繁英)">&nbsp;&nbsp;<a href="#func_TagOtherTableSetLanguage"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>936 - 中文简体，1252 - 英文，950 - 中文繁体</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
</table>
<br>

<div id="TagOtherTableGetCtlName"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetCtlName</td><td class="funcTD">取得组件名</td><td align="right" style="border-left:0px;"><a href="#func_TagOtherTableGetCtlName"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>组件名，如treelist、freeform</td></tr>
</table>
<br>

<div id="TagOtherTableIsComponentInstalled"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>IsComponentInstalled</td><td class="funcTD">某组件是否已经下载</td><td align="right" style="border-left:0px;"><a href="#func_TagOtherTableIsComponentInstalled"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>组件bin包名，如BCV1、LuxForm</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>true/false</td></tr>
</table>
<br>

<div id="TagOtherTableGetHandleType"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetHandleType</td><td class="funcTD">取得句柄的类型</td><td align="right" style="border-left:0px;"><a href="#func_TagOtherTableGetHandleType"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>句柄</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>串，可能为treelist、list、freeform、worksheet、validation、dom或空串</td></tr>
  <tr><td align=right>备注</td><td colspan=2>句柄是通过GetHandle( )函数获取的</td></tr>
</table>
<br>

<div id="TagOtherTableGetCookie"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetCookie</td><td class="funcTD">取得当前的Cookie</td><td align="right" style="border-left:0px;"><a href="#func_TagOtherTableGetCookie"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>Cookie串</td></tr>
  <tr><td align=right>备注</td><td colspan=2>是指 dynaload.js 中创建控件时赋予的 Cookie 串，或通过 SetCookie 函数指定的 Cookie 串</td></tr>
</table>
<br>

<div id="TagOtherTableSetCookie"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>SetCookie</td><td class="funcTD">设置Cookie串，用于当前插件对象后续的 http 请求</td><td align="right" style="border-left:0px;"><a href="#func_TagOtherTableSetCookie"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>串</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
</table>
<br>


<div id="TagOtherTableGetChar"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetChar</td><td class="funcTD">取得某个字符编码所对应的文字</td><td align="right" style="border-left:0px;"><a href="#func_TagOtherTableGetChar"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>字符的ASC码，如果是中文，则为utf-16的编码</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
  <tr class="example"><td align=right>示例</td><td colspan=2>var chr = AF.func("GetChar", "20013");  //返回“中”<br>
var chr = AF.func("GetChar", "97");  //返回“a”</td></tr>
</table>
<br>

<div id="TagOtherTableScreenShot"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>ScreenShot</td><td class="funcTD">取得当前屏幕截图</td><td align="right" style="border-left:0px;"><a href="#func_TagOtherTableScreenShot"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>可选的串，格式为return=[?]; range=[?]; type=[?];precision=[?];isgray=[?];blackwhit=[?];threshold=[?], 其含义如下：<br>
　<b>return</b> - base64/filename, 返回 Base64大串/返回文件名，默认是Base64;<br>
　<b>range</b> - browser/screen/control,  仅截取浏览器界面/截取整个屏幕/仅截取当前控件部分，默认是browser;<br>
　<b>type</b> - jpg/gif/bmp/png/tif, 图片格式，默认是jpg;<br>
　<b>precision</b> - 0到100的数值，仅用于jpg, 含义为jpg的清晰度，数字越大越清晰，默认是75;<br>
　<b>isGray</b> - true/false, 灰度/彩色，默认是false;<br>
　<b>BlackWhite</b> - true/false, 黑白/彩色，默认是false;<br>
　<b>threshold</b> - 1到100之间, 仅用于黑白，数字越小图像越白，默认是70;<br>
</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>根据参数，返回文件名或Base64串</td></tr>
  <tr class="example"><td align=right>示例</td><td colspan=2>var chr = AF.func("screenshot", "return=base64;isgray=true;precision=60");</td></tr>
</table>
<br>

<div id="TagOtherTableQR"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>QR</td><td class="funcTD">生成二维码图片(bmp格式)</td><td align="right" style="border-left:0px;"><a href="#func_TagOtherTableQR"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>需要被编码的字符串</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>可选的串，格式为Level=[?]; maxSize=[?]; isBase64=[?];filename=[?], 其含义如下：<br>
　<b>Level</b> - 纠错等级，0到3的整数， 分别表示 7%、15%、25%、35%的纠错率，纠错率越高，扫描过程越不易出现差错，默认是0;<br>
　<b>maxSize</b> - 期望生成的图片的大小，单位是像素，通常是编码串越长，所需的尺寸也必须越大。最小值是25，默认是300;<br>
　　　如下2个参数决定如何返回结果(不能同时使用):<br>
　<b>filename</b> - 本地文件名，用于保存 bmp 格式的图片;<br>
　<b>isBase64</b> - 将生成的 bmp 二进制转码成 BASE64 串，并返回该串;<br>
</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>根据参数返回, 如果指定了 filename，返回 1/0 - 成功/失败；如果 isBase64=true, 则返回 BASE64 串</td></tr>
  <tr class="example"><td align=right>示例</td><td colspan=2>var str = AF.func("QR", "http://www.supcan.cn \r\n isBase64=true");</td></tr>
</table>
<br>

<div id="TagOtherTableSleep"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>Sleep</td><td class="funcTD">阻塞当前线程(通常是主线程)，让其等待若干时间</td><td align="right" style="border-left:0px;"><a href="#func_TagOtherTableSleep"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>毫秒数</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
</table>
<br>


<br><br><br><br>
<script type='text/javascript' src='nstd.js'></script>
</body></html>