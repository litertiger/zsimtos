<HTML>
<head>
<meta http-equiv="content-type" content="text/html; charset=gb2312">
<link rel="stylesheet" href="temp1.css" type="text/css">
</head>
<body bgcolor=#ffffff vlink=#0000ff>
<br>
<p class="sz1">2.函数</p><hr color=#2266ee size=1>
　　Supcan Report的函数是通过插件/加载项的 func( string funcname, string paras ) 函数间接调用的，在此列举了Supcan Report组件的可用funcname及用途说明。<br>
<table width="94%" border="1" align="center">
<tr><th>分类</th><th>函数名</th><th>用途</th></tr>
<tr><td rowspan=7>基本</td><td><a href="#TagFuncTableBuild 或 ReadSheet"><div id="func_TagFuncTableBuild 或 ReadSheet"/>Build 或 ReadSheet</a></td><td>打开一张报表</td></tr>
<tr><td><a href="#TagFuncTableCalc 或 Fill"><div id="func_TagFuncTableCalc 或 Fill"/>Calc 或 Fill</a></td><td>执行报表的计算，包括数据源的取数填充</td></tr>
<tr><td><a href="#TagFuncTableGetFileXML"><div id="func_TagFuncTableGetFileXML"/>GetFileXML</a></td><td>取得当前报表的XML串</td></tr>
<tr><td><a href="#TagFuncTableGetFileURL"><div id="func_TagFuncTableGetFileURL"/>GetFileURL</a></td><td>取得上次打开(Build)的报表的文件名, 包括URL</td></tr>
<tr><td><a href="#TagFuncTableSubscribeEvent"><div id="func_TagFuncTableSubscribeEvent"/>SubscribeEvent</a></td><td>预订事件</td></tr>
<tr><td><a href="#TagFuncTableCallFunc"><div id="func_TagFuncTableCallFunc"/>CallFunc</a></td><td>调用工具条上的功能</td></tr>
<tr><td><a href="#TagFuncTableGetHandle"><div id="func_TagFuncTableGetHandle"/>GetHandle</a></td><td>取得工作表、或Validation、或树列表、或数据源、或内部非模式对话框的句柄</td></tr>
<tr><td rowspan=24>数据源</td><td><a href="#TagFuncTableSetSource (用途1)"><div id="func_TagFuncTableSetSource (用途1)"/>SetSource (用途1)</a></td><td>设置中心数据源编目的URL</td></tr>
<tr><td><a href="#TagFuncTableSetSource (用途2)"><div id="func_TagFuncTableSetSource (用途2)"/>SetSource (用途2)</a></td><td>设置某临时数据源的URL</td></tr>
<tr><td><a href="#TagFuncTableSetSource (用途3)"><div id="func_TagFuncTableSetSource (用途3)"/>SetSource (用途3)</a></td><td>强制更改某中心数据源的dataURL</td></tr>
<tr><td><a href="#TagFuncTableGetSource"><div id="func_TagFuncTableGetSource"/>GetSource</a></td><td>取得数据源的URL</td></tr>
<tr><td><a href="#TagFuncTableGetSources"><div id="func_TagFuncTableGetSources"/>GetSources</a></td><td>取得所有数据源的ID</td></tr>
<tr><td><a href="#TagFuncTableGetSourceInfo"><div id="func_TagFuncTableGetSourceInfo"/>GetSourceInfo</a></td><td>取得某数据源的某些属性</td></tr>
<tr><td><a href="#TagFuncTableSetSourceInfo"><div id="func_TagFuncTableSetSourceInfo"/>SetSourceInfo</a></td><td>设置某数据源的某些属性</td></tr>
<tr><td><a href="#TagFuncTableSetParas (语法1)"><div id="func_TagFuncTableSetParas (语法1)"/>SetParas (语法1)</a></td><td>设置某数据源的参数的值</td></tr>
<tr><td><a href="#TagFuncTableSetParas (语法2)"><div id="func_TagFuncTableSetParas (语法2)"/>SetParas (语法2)</a></td><td>设置某数据源的参数的值</td></tr>
<tr><td><a href="#TagFuncTableSetParasEx"><div id="func_TagFuncTableSetParasEx"/>SetParasEx</a></td><td>强制设定数据源的附加参数</td></tr>
<tr><td><a href="#TagFuncTableGetParaNames"><div id="func_TagFuncTableGetParaNames"/>GetParaNames</a></td><td>取得某数据源的参数名</td></tr>
<tr><td><a href="#TagFuncTableSetDSColInfo"><div id="func_TagFuncTableSetDSColInfo"/>SetDSColInfo</a></td><td>设置或添加某临时数据源的某个数据列信息</td></tr>
<tr><td><a href="#TagFuncTableDeleteDSCol"><div id="func_TagFuncTableDeleteDSCol"/>DeleteDSCol</a></td><td>删除某临时数据源的某个数据列</td></tr>
<tr><td><a href="#TagFuncTableNewDS"><div id="func_TagFuncTableNewDS"/>NewDS</a></td><td>新建中心数据源</td></tr>
<tr><td><a href="#TagFuncTableDeleteDS"><div id="func_TagFuncTableDeleteDS"/>DeleteDS</a></td><td>删除数据源</td></tr>
<tr><td><a href="#TagFuncTableSynchCenterDS"><div id="func_TagFuncTableSynchCenterDS"/>SynchCenterDS</a></td><td>强制中心数据源和后端同步</td></tr>
<tr><td><a href="#TagFuncTableGetWorkSheetNameOfDs"><div id="func_TagFuncTableGetWorkSheetNameOfDs"/>GetWorkSheetNameOfDs</a></td><td>取得某数据源能够被用于哪些工作表</td></tr>
<tr><td><a href="#TagFuncTableGetDsOfWorkSheet"><div id="func_TagFuncTableGetDsOfWorkSheet"/>GetDsOfWorkSheet</a></td><td>取得工作表能使用哪些数据源</td></tr>
<tr><td><a href="#TagFuncTableGetColsOfDS"><div id="func_TagFuncTableGetColsOfDS"/>GetColsOfDS</a></td><td>取得某数据源对应到表格中的各个列</td></tr>
<tr><td><a href="#TagFuncTableGetDSFillInfo"><div id="func_TagFuncTableGetDSFillInfo"/>GetDSFillInfo</a></td><td>取得某数据源对应到表格中的行、列信息</td></tr>
<tr><td><a href="#TagFuncTableGetDSXML"><div id="func_TagFuncTableGetDSXML"/>GetDSXML</a></td><td>取得某数据源的XML描述串</td></tr>
<tr><td><a href="#TagFuncTableSetDSXML"><div id="func_TagFuncTableSetDSXML"/>SetDSXML</a></td><td>设定数据源的XML描述串，动态更改或添加数据源</td></tr>
<tr><td><a href="#TagFuncTableGetUsedDS"><div id="func_TagFuncTableGetUsedDS"/>GetUsedDS</a></td><td>取得工作表的计算公式中使用了哪些数据源</td></tr>
<tr><td><a href="#TagFuncTableParseUsedDS"><div id="func_TagFuncTableParseUsedDS"/>ParseUsedDS</a></td><td>取得工作表的计算公式中使用了哪些数据源，包括参数</td></tr>
<tr><td rowspan=27>行列</td><td><a href="#TagFuncTableGetRows"><div id="func_TagFuncTableGetRows"/>GetRows</a></td><td>取得总行数</td></tr>
<tr><td><a href="#TagFuncTableGetCols"><div id="func_TagFuncTableGetCols"/>GetCols</a></td><td>取得总列数</td></tr>
<tr><td><a href="#TagFuncTableInsertRows (语法1)"><div id="func_TagFuncTableInsertRows (语法1)"/>InsertRows (语法1)</a></td><td>插入行</td></tr>
<tr><td><a href="#TagFuncTableInsertRows (语法2)"><div id="func_TagFuncTableInsertRows (语法2)"/>InsertRows (语法2)</a></td><td>插入行</td></tr>
<tr><td><a href="#TagFuncTableInsertCols (语法1)"><div id="func_TagFuncTableInsertCols (语法1)"/>InsertCols (语法1)</a></td><td>插入列</td></tr>
<tr><td><a href="#TagFuncTableInsertCols (语法2)"><div id="func_TagFuncTableInsertCols (语法2)"/>InsertCols (语法2)</a></td><td>插入列</td></tr>
<tr><td><a href="#TagFuncTableDeleteRows"><div id="func_TagFuncTableDeleteRows"/>DeleteRows</a></td><td>删除行</td></tr>
<tr><td><a href="#TagFuncTableDeleteCols"><div id="func_TagFuncTableDeleteCols"/>DeleteCols</a></td><td>删除列</td></tr>
<tr><td><a href="#TagFuncTableIsRowHide"><div id="func_TagFuncTableIsRowHide"/>IsRowHide</a></td><td>某行是否被隐藏</td></tr>
<tr><td><a href="#TagFuncTableHideRow"><div id="func_TagFuncTableHideRow"/>HideRow</a></td><td>隐藏行</td></tr>
<tr><td><a href="#TagFuncTableIsColHide"><div id="func_TagFuncTableIsColHide"/>IsColHide</a></td><td>某列是否被隐藏</td></tr>
<tr><td><a href="#TagFuncTableHideCol"><div id="func_TagFuncTableHideCol"/>HideCol</a></td><td>隐藏列</td></tr>
<tr><td><a href="#TagFuncTableGetRowOffset"><div id="func_TagFuncTableGetRowOffset"/>GetRowOffset</a></td><td>取得某行的偏移量</td></tr>
<tr><td><a href="#TagFuncTableGetColOffset"><div id="func_TagFuncTableGetColOffset"/>GetColOffset</a></td><td>取得某列的偏移量</td></tr>
<tr><td><a href="#TagFuncTableGetRowHeight"><div id="func_TagFuncTableGetRowHeight"/>GetRowHeight</a></td><td>取得某行高</td></tr>
<tr><td><a href="#TagFuncTableSetRowHeight"><div id="func_TagFuncTableSetRowHeight"/>SetRowHeight</a></td><td>设置某行高</td></tr>
<tr><td><a href="#TagFuncTableGetColWidth"><div id="func_TagFuncTableGetColWidth"/>GetColWidth</a></td><td>取得某列宽</td></tr>
<tr><td><a href="#TagFuncTableSetColWidth"><div id="func_TagFuncTableSetColWidth"/>SetColWidth</a></td><td>设置某列宽</td></tr>
<tr><td><a href="#TagFuncTableGetRowProp"><div id="func_TagFuncTableGetRowProp"/>GetRowProp</a></td><td>取得某行的某些属性</td></tr>
<tr><td><a href="#TagFuncTableSetRowProp"><div id="func_TagFuncTableSetRowProp"/>SetRowProp</a></td><td>设置某行的某些属性</td></tr>
<tr><td><a href="#TagFuncTableSetColUserProp"><div id="func_TagFuncTableSetColUserProp"/>SetRowUserProp<br>SetColUserProp</a></td><td>设置某行/某列的某个自定义属性的值</td></tr>
<tr><td><a href="#TagFuncTableGetColUserProp"><div id="func_TagFuncTableGetColUserProp"/>GetRowUserProp<br>GetColUserProp</a></td><td>取得某行/某列的某个自定义属性的值</td></tr>
<tr><td><a href="#TagFuncTableGetColUserProps"><div id="func_TagFuncTableGetColUserProps"/>GetRowUserProps<br>GetColUserProps</a></td><td>取得某行/某列的所有自定义属性名</td></tr>
<tr><td><a href="#TagFuncTableRemoveColUserProps"><div id="func_TagFuncTableRemoveColUserProps"/>RemoveRowUserProps<br>RemoveColUserProps</a></td><td>清除某行/某列所有自定义属性</td></tr>
<tr><td><a href="#TagFuncTableSeparateView"><div id="func_TagFuncTableSeparateView"/>SeparateView</a></td><td>设置分屏冻结</td></tr>
<tr><td><a href="#TagFuncTableSort"><div id="func_TagFuncTableSort"/>Sort</a></td><td>排序</td></tr>
<tr><td><a href="#TagFuncTableSortDS"><div id="func_TagFuncTableSortDS"/>SortDS</a></td><td>对数据源填入区进行排序</td></tr>

<tr><td rowspan=3>单元格命名相关函数</td><td><a href="#TagFuncTableGetCellName"><div id="func_TagFuncTableGetCellName"/>GetCellName</a></td><td>根据行列号得到单元名</td></tr>
<tr><td><a href="#TagFuncTableGetCellRow"><div id="func_TagFuncTableGetCellRow"/>GetCellRow</a></td><td>根据单元名得到行号</td></tr>
<tr><td><a href="#TagFuncTableGetCellCol"><div id="func_TagFuncTableGetCellCol"/>GetCellCol</a></td><td>根据单元名得到列号</td></tr>
<tr><td rowspan=17>单元格</td><td><a href="#TagFuncTableSelectCell(用途1)"><div id="func_TagFuncTableSelectCell(用途1)"/>SelectCell(用途1)</a></td><td>选取焦点单元、或嵌入对象(如文本框)</td></tr>
<tr><td><a href="#TagFuncTableGetCurrentCell"><div id="func_TagFuncTableGetCurrentCell"/>GetCurrentCell</a></td><td>取得当前焦点单元格</td></tr>
<tr><td><a href="#TagFuncTableGetCurrentCells"><div id="func_TagFuncTableGetCurrentCells"/>GetCurrentCells</a></td><td>取得当前焦点单元格</td></tr>
<tr><td><a href="#TagFuncTableEnsureVisible"><div id="func_TagFuncTableEnsureVisible"/>EnsureVisible</a></td><td>自动滚动到让某单元格可见</td></tr>
<tr><td><a href="#TagFuncTableGetCellData"><div id="func_TagFuncTableGetCellData"/>GetCellData</a></td><td>取得某单元的内容或计算结果</td></tr>
<tr><td><a href="#TagFuncTableSetCellData"><div id="func_TagFuncTableSetCellData"/>SetCellData</a></td><td>设置某单元内容、或公式</td></tr>
<tr><td><a href="#TagFuncTableGetCellDataEx"><div id="func_TagFuncTableGetCellDataEx"/>GetCellDataEx</a></td><td>取得某单元的内容或计算结果(Checkbox优先)</td></tr>
<tr><td><a href="#TagFuncTableSetCellDataEx"><div id="func_TagFuncTableSetCellDataEx"/>SetCellDataEx</a></td><td>设置某单元内容、或公式(CheckBox优先)</td></tr>
<tr><td><a href="#TagFuncTableGetCellText"><div id="func_TagFuncTableGetCellText"/>GetCellText</a></td><td>取得某单元的显示内容</td></tr>
<tr><td><a href="#TagFuncTableGetCellFormula"><div id="func_TagFuncTableGetCellFormula"/>GetCellFormula</a></td><td>取得某单元的计算公式</td></tr>
<tr><td><a href="#TagFuncTableGetCellProp(用途1)"><div id="func_TagFuncTableGetCellProp(用途1)"/>GetCellProp(用途1)</a></td><td>取得某单元格的属性(包括自定义属性)</td></tr>
<tr><td><a href="#TagFuncTableSetCellProp(用途1)"><div id="func_TagFuncTableSetCellProp(用途1)"/>SetCellProp(用途1)</a></td><td>设置某单元格的属性(包括自定义属性)</td></tr>
<tr><td><a href="#TagFuncTableGetCellUserProps"><div id="func_TagFuncTableGetCellUserProps"/>GetCellUserProps</a></td><td>取得某单元格的全部自定义属性名</td></tr>
<tr><td><a href="#TagFuncTableGetCellFont"><div id="func_TagFuncTableGetCellFont"/>GetCellFont</a></td><td>取得单元格的字体信息</td></tr>
<tr><td><a href="#TagFuncTableSetCellFont"><div id="func_TagFuncTableSetCellFont"/>SetCellFont</a></td><td>设置单元格的字体信息</td></tr>
<tr><td><a href="#TagFuncTableFindCell"><div id="func_TagFuncTableFindCell"/>FindCell</a></td><td>根据表达式查找单元格</td></tr>
<tr><td><a href="#TagFuncTableCloneArea"><div id="func_TagFuncTableCloneArea"/>CloneArea</a></td><td>克隆区域</td></tr>
<tr><td rowspan=11>单元格合并</td><td><a href="#TagFuncTableGetCellStatus"><div id="func_TagFuncTableGetCellStatus"/>GetCellStatus</a></td><td>取得某单元格的状态</td></tr>
<tr><td><a href="#TagFuncTableGetMainCell"><div id="func_TagFuncTableGetMainCell"/>GetMainCell</a></td><td>取得某单元格所在的合并区域中的主单元格(即左上角单元格)</td></tr>
<tr><td><a href="#TagFuncTableGetMergedCells"><div id="func_TagFuncTableGetMergedCells"/>GetMergedCells</a></td><td>取得某单元格所在的合并区域</td></tr>
<tr><td><a href="#TagFuncTableMerge"><div id="func_TagFuncTableMerge"/>Merge</a></td><td>合并单元格</td></tr>
<tr><td><a href="#TagFuncTableDeMerge(用法1)"><div id="func_TagFuncTableDeMerge(用法1)"/>DeMerge(用法1)</a></td><td>解除指定区域的合并</td></tr>
<tr><td><a href="#TagFuncTableDeMerge(用法2)"><div id="func_TagFuncTableDeMerge(用法2)"/>DeMerge(用法2)</a></td><td>解除某个单元格所在区域的合并</td></tr>
<tr><td><a href="#TagFuncTableMergeSame(用途1)"><div id="func_TagFuncTableMergeSame(用途1)"/>MergeSame(用途1)</a></td><td>合并某行给定范围内相同内容的单元格</td></tr>
<tr><td><a href="#TagFuncTableMergeSame(用途2)"><div id="func_TagFuncTableMergeSame(用途2)"/>MergeSame(用途2)</a></td><td>合并某列给定范围内相同内容的单元格</td></tr>
<tr><td><a href="#TagFuncTableMergeSame(用途3)"><div id="func_TagFuncTableMergeSame(用途3)"/>MergeSame(用途3)</a></td><td>多个列按大类、小类方式, 跨行合并相同内容的单元格</td></tr>
<tr><td><a href="#TagFuncTableSplitCol"><div id="func_TagFuncTableSplitCol"/>SplitCol</a></td><td>将某列分拆成多列，并自动合并同类项</td></tr>
<tr><td><a href="#TagFuncTableGetValidCells"><div id="func_TagFuncTableGetValidCells"/>GetValidCells</a></td><td>取得某个区域内有效的单元格</td></tr>
<tr><td rowspan=5>内嵌对象(文本框/图片/统计图/线条)</td><td><a href="#TagFuncTableGetGraphics"><div id="func_TagFuncTableGetGraphics"/>GetGraphics</a></td><td>取得所有内嵌对象的别名</td></tr>
<tr><td><a href="#TagFuncTableGetCellProp(用途2)"><div id="func_TagFuncTableGetCellProp(用途2)"/>GetCellProp(用途2)</a></td><td>取得某内嵌对象的属性</td></tr>
<tr><td><a href="#TagFuncTableSetCellProp(用途2)"><div id="func_TagFuncTableSetCellProp(用途2)"/>SetCellProp(用途2)</a></td><td>设置某内嵌对象的属性</td></tr>
<tr><td><a href="#TagFuncTableDeleteGraphics"><div id="func_TagFuncTableDeleteGraphics"/>DeleteGraphics</a></td><td>删除某些内嵌对象</td></tr>
<tr><td><a href="#TagFuncTableChart_Refresh"><div id="func_TagFuncTableChart_Refresh"/>Chart_Refresh</a></td><td>刷新统计图显示</td></tr>

<tr><td rowspan=20>工作表</td><td><a href="#TagFuncTableGetWorksheets"><div id="func_TagFuncTableGetWorksheets"/>GetWorksheets</a></td><td>取得工作表的个数</td></tr>
<tr><td><a href="#TagFuncTableGetCurrentWorksheet"><div id="func_TagFuncTableGetCurrentWorksheet"/>GetCurrentWorksheet</a></td><td>取得当前工作表序号</td></tr>
<tr><td><a href="#TagFuncTableSetCurrentWorksheet"><div id="func_TagFuncTableSetCurrentWorksheet"/>SetCurrentWorksheet</a></td><td>切换当前工作表</td></tr>
<tr><td><a href="#TagFuncTableGetWorksheetName"><div id="func_TagFuncTableGetWorksheetName"/>GetWorksheetName</a></td><td>取得工作表的名称</td></tr>
<tr><td><a href="#TagFuncTableSetWorksheetName"><div id="func_TagFuncTableSetWorksheetName"/>SetWorksheetName</a></td><td>修改工作表的名称</td></tr>
<tr><td><a href="#TagFuncTableDeleteWorksheet"><div id="func_TagFuncTableDeleteWorksheet"/>DeleteWorksheet</a></td><td>删除工作表</td></tr>
<tr><td><a href="#TagFuncTableAppendWorksheet"><div id="func_TagFuncTableAppendWorksheet"/>AppendWorksheet</a></td><td>添加工作表：从外部报表导入</td></tr>
<tr><td><a href="#TagFuncTableAddWorksheet"><div id="func_TagFuncTableAddWorksheet"/>AddWorksheet</a></td><td>添加工作表：新建空的工作表</td></tr>
<tr><td><a href="#TagFuncTableExchangeWorkSheet"><div id="func_TagFuncTableExchangeWorkSheet"/>ExchangeWorkSheet</a></td><td>工作表交换位置</td></tr>
<tr><td><a href="#TagFuncTableGetWorksheetNameOfDS"><div id="func_TagFuncTableGetWorksheetNameOfDS"/>GetWorksheetNameOfDS</a></td><td>取得某数据源指定用于某些工作表的名称</td></tr>
<tr><td><a href="#TagFuncTableHideWorksheet"><div id="func_TagFuncTableHideWorksheet"/>HideWorkSheet</a></td><td>隐藏工作表</td></tr>
<tr><td><a href="#TagFuncTableUnhideWorksheet"><div id="func_TagFuncTableUnhideWorksheet"/>UnhideWorkSheet</a></td><td>工作表解除隐藏</td></tr>
<tr><td><a href="#TagFuncTableGetHideWorksheet"><div id="func_TagFuncTableGetHideWorksheet"/>GetHideWorkSheet</a></td><td>取得隐藏的工作表</td></tr>
<tr><td><a href="#TagFuncTableSetProp(用途1)"><div id="func_TagFuncTableSetProp(用途1)"/>SetProp(用途1)</a></td><td>设置工作表的某些属性</td></tr>
<tr><td><a href="#TagFuncTableGetProp(用途1)"><div id="func_TagFuncTableGetProp(用途1)"/>GetProp(用途1)</a></td><td>取得工作表的某些属性</td></tr>
<tr><td><a href="#TagFuncTableGetProp(用途2)"><div id="func_TagFuncTableGetProp(用途2)"/>GetProp(用途2)</a></td><td>取得工作表的交叉表、分类汇总配置XML</td></tr>
<tr><td><a href="#TagFuncTableSetProp(用途2)"><div id="func_TagFuncTableSetProp(用途2)"/>SetProp(用途2)</a></td><td>设置工作表的交叉表、分类汇总配置XML</td></tr>
<tr><td><a href="#TagFuncTableGetMemo"><div id="func_TagFuncTableGetMemo"/>GetMemo</a></td><td>取得某自由存储区的存储串</td></tr>
<tr><td><a href="#TagFuncTableSetMemo"><div id="func_TagFuncTableSetMemo"/>SetMemo</a></td><td>设置某自由存储区的存储串</td></tr>
<tr><td><a href="#TagFuncTableGetMemos"><div id="func_TagFuncTableGetMemos"/>GetMemos</a></td><td>取得自由存储区的所有ID</td></tr>

<tr><td rowspan=9>打印</td><td><a href="#TagFuncTablePrint"><div id="func_TagFuncTablePrint"/>Print</a></td><td>打印</td></tr>
<tr><td><a href="#TagFuncTableBeginBatchPrint"><div id="func_TagFuncTableBeginBatchPrint"/>BeginBatchPrint</a></td><td>开始批打印</td></tr>
<tr><td><a href="#TagFuncTableEndBatchPrint"><div id="func_TagFuncTableEndBatchPrint"/>EndBatchPrint</a></td><td>结束批打印，将打印任务发送给打印机</td></tr>
<tr><td><a href="#TagFuncTableGetProp(用途3)"><div id="func_TagFuncTableGetProp(用途3)"/>GetProp(用途3)</a></td><td>取得工作表的打印配置属性</td></tr>
<tr><td><a href="#TagFuncTableSetProp(用途3)"><div id="func_TagFuncTableSetProp(用途3)"/>SetProp(用途3)</a></td><td>设置工作表的打印配置属性</td></tr>
<tr><td><a href="#TagFuncTableGetPrintProp"><div id="func_TagFuncTableGetPrintProp"/>GetPrintProp</a></td><td>取得工作表的某些常用打印配置属性</td></tr>
<tr><td><a href="#TagFuncTableSetPrintProp"><div id="func_TagFuncTableSetPrintProp"/>SetPrintProp</a></td><td>设置工作表的某些常用打印配置属性</td></tr>
<tr><td><a href="#TagFuncTableGetPrintPages"><div id="func_TagFuncTableGetPrintPages"/>GetPrintPages</a></td><td>取得打印的总页数</td></tr>
<tr><td><a href="#TagFuncTableSetPrintPage"><div id="func_TagFuncTableSetPrintPage"/>SetPrintPage</a></td><td>指定下次打印时，具体打印哪些页</td></tr>

<tr><td rowspan=10>汇总上报模式</td><td><a href="#TagFuncTableSetItemLibraryURL"><div id="func_TagFuncTableSetItemLibraryURL"/>SetItemLibraryURL</a></td><td>设定指标库的URL</td></tr>
<tr><td><a href="#TagFuncTableSetItemAttr"><div id="func_TagFuncTableSetItemAttr"/>SetItemAttr</a></td><td>动态修改指标的属性的值</td></tr>
<tr><td><a href="#TagFuncTableGetUploadXML"><div id="func_TagFuncTableGetUploadXML"/>GetUploadXML</a></td><td>用于报表的汇总上报模式(WorkMode=UploadRuntime)，取得当前填入内容的XML串</td></tr>
<tr><td><a href="#TagFuncTableSetUploadXML"><div id="func_TagFuncTableSetUploadXML"/>SetUploadXML</a></td><td>加载已上报的数据，用于报表的显示</td></tr>
<tr><td><a href="#TagFuncTableGetUploadIndex"><div id="func_TagFuncTableGetUploadIndex"/>GetUploadIndex</a></td><td>取得当前采用了多个TabOrder方案中的哪一个，用于上报运行时</td></tr>
<tr><td><a href="#TagFuncTableSetUploadIndex"><div id="func_TagFuncTableSetUploadIndex"/>SetUploadIndex</a></td><td>指定采用多个TabOrder方案中的某一个，用于上报运行时</td></tr>
<tr><td><a href="#TagFuncTableGetUploadNames"><div id="func_TagFuncTableGetUploadNames"/>GetUploadNames</a></td><td>取得所有TabOrder方案的名称</td></tr>
<tr><td><a href="#TagFuncTableGetUploadCells"><div id="func_TagFuncTableGetUploadCells"/>GetUploadCells</a></td><td>取得有TabOrder的单元名</td></tr>
<tr><td><a href="#TagFuncTableSelectCell(用途2)"><div id="func_TagFuncTableSelectCell(用途2)"/>SelectCell(用途2)</a></td><td>用于上报运行时，直接打开第一个可输入的单元格的输入框</td></tr>
<tr><td><a href="#TagFuncTableRebuildTabOrder"><div id="func_TagFuncTableRebuildTabOrder"/>RebuildTabOrder</a></td><td>重新整理、刷新所有 Taborder</td></tr>
<tr><td rowspan=2>简易提交(一)</td><td><a href="#TagFuncTableResetChanged"><div id="func_TagFuncTableResetChanged"/>ResetChanged</a></td><td>合并修改内容，为以后调用 GetChangedCells( ) 作准备.</td></tr>
<tr><td><a href="#TagFuncTableGetChangedCells"><div id="func_TagFuncTableGetChangedCells"/>GetChangedCells</a></td><td>取得所有被修改过的单元格.</td></tr>
<tr><td rowspan=1>简易提交(二)</td><td><a href="#TagFuncTableCollectXML"><div id="func_TagFuncTableCollectXML"/>CollectXML</a></td><td>获取某些单元格的公式、内容</td></tr>
<tr><td rowspan=1>简易提交(数据源部分)</td><td><a href="#TagFuncTableGetChangedXML"><div id="func_TagFuncTableGetChangedXML"/>GetChangedXML</a></td><td>取得数据源填充区内容的XML串</td></tr>
<tr><td rowspan=4>权限相关</td><td><a href="#TagFuncTableSwkrntpomzqa"><div id="func_TagFuncTableSwkrntpomzqa"/>Swkrntpomzqa</a></td><td>限制某些交互功能</td></tr>
<tr><td><a href="#TagFuncTableaddEditAbleOnly"><div id="func_TagFuncTableaddEditAbleOnly"/>addEditAbleOnly</a></td><td>添加可编辑的单元格范围</td></tr>
<tr><td><a href="#TagFuncTableaddUnEditAbleOnly"><div id="func_TagFuncTableaddUnEditAbleOnly"/>addUnEditAbleOnly</a></td><td>添加不可编辑的单元格范围</td></tr>
<tr><td><a href="#TagFuncTableGetCellEditAble"><div id="func_TagFuncTableGetCellEditAble"/>GetCellEditAble</a></td><td>判断某单元是否有编辑权限</td></tr>
<tr><td rowspan=8>计算相关</td><td><a href="#TagFuncTableAddUserFunctions"><div id="func_TagFuncTableAddUserFunctions"/>AddUserFunctions</a></td><td>添加自定义函数的声明</td></tr>
<tr><td><a href="#TagFuncTableRemoveUserFunctions"><div id="func_TagFuncTableRemoveUserFunctions"/>RemoveUserFunctions</a></td><td>清除自定义函数</td></tr>
<tr><td><a href="#TagFuncTableSetBatchFunctionURL"><div id="func_TagFuncTableSetBatchFunctionURL"/>SetBatchFunctionURL</a></td><td>指定批处理自定义函数的URL地址</td></tr>
<tr><td><a href="#TagFuncTableSetAutoCalc"><div id="func_TagFuncTableSetAutoCalc"/>SetAutoCalc</a></td><td>设置自动计算功能生效/失效</td></tr>
<tr><td><a href="#TagFuncTableGetAutoCalc"><div id="func_TagFuncTableGetAutoCalc"/>GetAutoCalc</a></td><td>取得自动计算生效/失效</td></tr>
<tr><td><a href="#TagFuncTableGetLastCalcError"><div id="func_TagFuncTableGetLastCalcError"/>GetLastCalcError</a></td><td>取得上次计算错误信息</td></tr>
<tr><td><a href="#TagFuncTableSetHoldDSData"><div id="func_TagFuncTableSetHoldDSData"/>SetHoldDSData</a></td><td>在计算后, 设置数据源是否仍然保持数据</td></tr>
<tr><td><a href="#TagFuncTableGetHoldDSData"><div id="func_TagFuncTableGetHoldDSData"/>GetHoldDSData</a></td><td>在计算后, 数据源是否仍然保持数据</td></tr>
<tr><td rowspan=12>外部统计图<br>(完全由API控制)</td><td><a href="#TagFuncTableChart_DeleteAllSeries"><div id="func_TagFuncTableChart_DeleteAllSeries"/>Chart_DeleteAllSeries</a></td><td>清除所有系列</td></tr>
<tr><td><a href="#TagFuncTableChart_GetSeriesCount"><div id="func_TagFuncTableChart_GetSeriesCount"/>Chart_GetSeriesCount</a></td><td>取得系列数</td></tr>
<tr><td><a href="#TagFuncTableChart_GetSeriesName"><div id="func_TagFuncTableChart_GetSeriesName"/>Chart_GetSeriesName</a></td><td>取得某系列的名称</td></tr>
<tr><td><a href="#TagFuncTableChart_SetSeriesName"><div id="func_TagFuncTableChart_SetSeriesName"/>Chart_SetSeriesName</a></td><td>系列的增删改操作</td></tr>
<tr><td><a href="#TagFuncTableChart_GetItemNames"><div id="func_TagFuncTableChart_GetItemNames"/>Chart_GetItemNames</a></td><td>取得所有数据项的名称</td></tr>
<tr><td><a href="#TagFuncTableChart_GetItemName"><div id="func_TagFuncTableChart_GetItemName"/>Chart_GetItemName</a></td><td>取得某数据项的名称</td></tr>
<tr><td><a href="#TagFuncTableChart_SetItemNames"><div id="func_TagFuncTableChart_SetItemNames"/>Chart_SetItemNames</a></td><td>设置全部数据项的名称</td></tr>
<tr><td><a href="#TagFuncTableChart_SetItemName"><div id="func_TagFuncTableChart_SetItemName"/>Chart_SetItemName</a></td><td>设置某个数据项的名称</td></tr>
<tr><td><a href="#TagFuncTableChart_GetValues"><div id="func_TagFuncTableChart_GetValues"/>Chart_GetValues</a></td><td>取得某系列的全部数值</td></tr>
<tr><td><a href="#TagFuncTableChart_GetValue"><div id="func_TagFuncTableChart_GetValue"/>Chart_GetValue</a></td><td>取得某系列的某个数值</td></tr>
<tr><td><a href="#TagFuncTableChart_SetValues"><div id="func_TagFuncTableChart_SetValues"/>Chart_SetValues</a></td><td>设置某系列的全部数值</td></tr>
<tr><td><a href="#TagFuncTableChart_SetValue"><div id="func_TagFuncTableChart_SetValue"/>Chart_SetValue</a></td><td>设置某系列的某个数值</td></tr>
<tr><td rowspan=5>下拉字典</td><td><a href="#TagFuncTableDroplists_Get"><div id="func_TagFuncTableDroplists_Get"/>Droplists_Get</a></td><td>取得所有下拉字典</td></tr>
<tr><td><a href="#TagFuncTableDroplists_GetHandle"><div id="func_TagFuncTableDroplists_GetHandle"/>Droplists_GetHandle</a></td><td>取得某个下拉字典的句柄</td></tr>
<tr><td><a href="#TagFuncTableDroplists_FindCells"><div id="func_TagFuncTableDroplists_FindCells"/>Droplists_FindCells</a></td><td>取得当前工作表中使用了某个下拉字典的所有单元格</td></tr>
<tr><td><a href="#TagFuncTableDroplists_Delete"><div id="func_TagFuncTableDroplists_Delete"/>Droplists_Delete</a></td><td>删除某个下拉字典</td></tr>
<tr><td><a href="#TagFuncTableDroplists_Add"><div id="func_TagFuncTableDroplists_Add"/>Droplists_Add</a></td><td>动态添加下拉字典</td></tr>
<tr><td rowspan=5>显示掩码</td><td><a href="#TagFuncTableMasks_Get"><div id="func_TagFuncTableMasks_Get"/>Masks_Get</a></td><td>取得所有显示掩码的id</td></tr>
<tr><td><a href="#TagFuncTableMask_Get"><div id="func_TagFuncTableMask_Get"/>Mask_Get</a></td><td>取得某个显示掩码的表达式</td></tr>
<tr><td><a href="#TagFuncTableMask_Delete"><div id="func_TagFuncTableMask_Delete"/>Mask_Delete</a></td><td>删除某个显示掩码</td></tr>
<tr><td><a href="#TagFuncTableMask_Add"><div id="func_TagFuncTableMask_Add"/>Mask_Add</a></td><td>添加一个显示掩码</td></tr>
<tr><td><a href="#TagFuncTableMask_FindCells"><div id="func_TagFuncTableMask_FindCells"/>Mask_FindCells</a></td><td>取得当前工作表中使用了某个显示掩码的单元格</td></tr>
<tr><td rowspan=6>工具条和菜单</td><td><a href="#TagFuncTableSetToolbarItemImage"><div id="func_TagFuncTableSetToolbarItemImage"/>SetToolbarItemImage</a></td><td>动态更改工具条中某按钮的图标</td></tr>
<tr><td><a href="#TagFuncTableSetToolbarItemTip"><div id="func_TagFuncTableSetToolbarItemTip"/>SetToolbarItemTip</a></td><td>动态更改工具条中某按钮的Tip (鼠标滑过时的文字)</td></tr>
<tr><td><a href="#TagFuncTableGetToolbarItemStatus"><div id="func_TagFuncTableGetToolbarItemStatus"/>GetToolbarItemStatus</a></td><td>取得工具条中某按钮/菜单项的状态</td></tr>
<tr><td><a href="#TagFuncTableSetToolbarItemStatus"><div id="func_TagFuncTableSetToolbarItemStatus"/>SetToolbarItemStatus</a></td><td>动态更改工具条中某按钮/菜单项的状态</td></tr>
<tr><td><a href="#TagFuncTableAddMenu"><div id="func_TagFuncTableAddMenu"/>AddMenu</a></td><td>增加自定义的弹出菜单项</td></tr>
<tr><td><a href="#TagFuncTableAddHotKey"><div id="func_TagFuncTableAddHotKey"/>AddHotKey</a></td><td>增设快捷键</td></tr>

<tr><td rowspan=10>Undo控制</td><td><a href="#TagFuncTableEnableUndo"><div id="func_TagFuncTableEnableUndo"/>EnableUndo</a></td><td>启用或禁用Undo</td></tr>
<tr><td><a href="#TagFuncTableIsUndoEnabled"><div id="func_TagFuncTableIsUndoEnabled"/>IsUndoEnabled</a></td><td>Undo是否启用</td></tr>
<tr><td><a href="#TagFuncTableEnableRedo"><div id="func_TagFuncTableEnableRedo"/>EnableRedo</a></td><td>启用或禁用Redo</td></tr>
<tr><td><a href="#TagFuncTableIsRedoEnabled"><div id="func_TagFuncTableIsRedoEnabled"/>IsRedoEnabled</a></td><td>Redo是否启用</td></tr>
<tr><td><a href="#TagFuncTableUndo"><div id="func_TagFuncTableUndo"/>Undo</a></td><td>执行一步 Undo 操作</td></tr>
<tr><td><a href="#TagFuncTableRedo"><div id="func_TagFuncTableRedo"/>Redo</a></td><td>执行一步 Redo 操作</td></tr>
<tr><td><a href="#TagFuncTableSaveUndo"><div id="func_TagFuncTableSaveUndo"/>SaveUndo</a></td><td>保存当前状态到 Undo 缓存池</td></tr>
<tr><td><a href="#TagFuncTableResetUndo"><div id="func_TagFuncTableResetUndo"/>ResetUndo</a></td><td>清空 Undo 缓存池</td></tr>
<tr><td><a href="#TagFuncTableUndoAble"><div id="func_TagFuncTableUndoAble"/>UndoAble</a></td><td>判断 Undo 缓存池是否允许作 Undo 操作</td></tr>
<tr><td><a href="#TagFuncTableRedoAble"><div id="func_TagFuncTableRedoAble"/>RedoAble</a></td><td>判断 Undo 缓存池是否允许作 Redo 操作</td></tr>

<tr><td rowspan=12>不太常用</td><td><a href="#TagFuncTableGetRedrawAble"><div id="func_TagFuncTableGetRedrawAble"/>GetRedrawAble</a></td><td>是否能够重画</td></tr>
<tr><td><a href="#TagFuncTableSetRedrawAble"><div id="func_TagFuncTableSetRedrawAble"/>SetRedrawAble</a></td><td>设置让报表能够重画或不能重画</td></tr>
<tr><td><a href="#TagFuncTableFlashCell"><div id="func_TagFuncTableFlashCell"/>FlashCell</a></td><td>开启或关闭单元格闪烁</td></tr>
<tr><td><a href="#TagFuncTableCloseEdit"><div id="func_TagFuncTableCloseEdit"/>CloseEdit</a></td><td>强制关闭输入框</td></tr>
<tr><td><a href="#TagFuncTableGetFont"><div id="func_TagFuncTableGetFont"/>GetFont</a></td><td>取得字体信息</td></tr>
<tr><td><a href="#TagFuncTableAddFont"><div id="func_TagFuncTableAddFont"/>AddFont</a></td><td>添加字体</td></tr>
<tr><td><a href="#TagFuncTableDisplayAsPrintSetup"><div id="func_TagFuncTableDisplayAsPrintSetup"/>DisplayAsPrintSetup</a></td><td>将报表切换成仅显示打印配置对话框样式</td></tr>
<tr><td><a href="#TagFuncTableDisplayAsChart"><div id="func_TagFuncTableDisplayAsChart"/>DisplayAsChart</a></td><td>将报表切换成仅显示统计图</td></tr>
<tr><td><a href="#TagFuncTableGetCurrentChart"><div id="func_TagFuncTableGetCurrentChart"/>GetCurrentChart</a></td><td>取得当前统计图(以显示统计图时)</td></tr>
<tr><td><a href="#TagFuncTableGetActiveWindow"><div id="func_TagFuncTableGetActiveWindow"/>GetActiveWindow</a></td><td>取得当前主区域的窗口句柄</td></tr>
<tr><td><a href="#TagFuncTableSetExportFilename"><div id="func_TagFuncTableSetExportFilename"/>SetExportFilename</a></td><td>设置转换输出的文件名</td></tr>
<tr><td><a href="#TagFuncTableSetNavigator"><div id="func_TagFuncTableSetNavigator"/>SetNavigator</a></td><td>设置超链接的重定位，常用于服务器专版</td></tr>
</table>


<br>
 函数详解:
<div id="TagFuncTableBuild 或 ReadSheet"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>Build 或 ReadSheet</td><td class="funcTD">打开一张报表</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableBuild 或 ReadSheet"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>报表的URL(相对或绝对)，或者是Report的XML串, 也可以是 Excel 文件或URL</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>如果是 xlsx 或 xls(需硕正企业版) 文件，可以是 isWithFormula=[?]; SheetName=[?]; SheetNum=[?] 格式的串，含义如下: <br>
<b>isWithFormula</b> - true/false，表示是否也同时导入计算公式。不导入计算公式能加快打开的速度，默认是true;<br>
<b>SheetName</b> - 工作表的名称, 多个名称之间以逗号分隔, 表示仅打开这些工作表;<br>
<b>SheetNum</b> - 工作表的顺序号, 多个顺序号之间以逗号分隔, 顺序号从0开始计数，表示仅打开这些工作表;<br>
</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>1/0 - 成功/失败, 失败的原因通常为 URL 访问失败、返回的内容不是硕正报表的 XML 格式或非 xls、xlsx 格式</td></tr>
  <tr class="example"><td align=right>示例</td><td colspan=2>AF.func("Build", "../myrpt/report1.xml");<br>
AF.func("Build", "../myrpt/report1.xlsx \r\n isWithFormula=false; SheetNum=0,3,8");</td></tr>
</table>
<br>

<div id="TagFuncTableCalc 或 Fill"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>Calc 或 Fill</td><td class="funcTD">执行报表的计算，包括数据源的取数填充</td><td align="right" style="border-left:0px;"><img src="image/documentg.bmp" title="请参见演示页: 10.自定义函数、以及大量的数据源相关的demo页">&nbsp;&nbsp;<a href="#func_TagFuncTableCalc 或 Fill"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>可选，格式为 mode=[?];range=[?], 其含义分别为: <br>
<b>mode</b> - 计算模式，值可以为 synch、asynch, 分别表示同步计算、异步计算，默认是同步计算。异步模式用于改善在数据源取数时服务器端响应缓慢而导致的界面滞涩;<br>
<b>range</b> - 计算范围，值可以为：<br>
　　<b><i>full</i></b> - 表示计算全部工作表，默认;<br>
　　<b><i>current</i></b> - 仅计算当前工作表；<br>
　　<b><i>工作表序号(从0开始计数)</i></b> - 指定计算某工作表，也可以是以逗号分隔的多个工作表，比如 “3,4,0” 表示顺序计算第四、第五、第一个工作表<br>
　　<b><i>单元格名</i></b> -  指定计算某单元格，也可以是单元格的别名、或者是以冒号(:)分隔的单元格范围</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>备注</td><td colspan=2>如果是异步计算，js不应该再执行针对AF的函数了，应该在“Calced”事件中处理后续事务，否则异步将失去意义(<font color=red>非常重要</font>). 例如，如下脚本是不正确的：<br>
  <pre class='cpp'>
...
AF.func("calc", "mode=asynch");
AF.func("SetCellData", "A1 \r\n 1.23");
...</pre>从第三行开始，将不会被执行，原因你应该明白：多线程访问同一资源，极易导致冲突、崩溃.
  </td></tr>
  <tr class="example"><td align=right>示例</td><td colspan=2>AF.func("calc", "mode=asynch; range=current"); //异步计算，仅当前工作表<br>AF.func("calc", "range=B3:C5,A2,G2:G10,MyTh");  //指定单元格范围 (注: MyTh是某个单元格的别名)</td></tr>
</table>
<br>

<div id="TagFuncTableGetFileXML"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetFileXML</td><td class="funcTD">取得当前报表的XML串</td><td align="right" style="border-left:0px;"><img src="image/documentg.bmp" title="请参见演示页: 11.动态创建">&nbsp;&nbsp;<a href="#func_TagFuncTableGetFileXML"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>可选，格式是 isSaveCalculateResult=[?], 值可以为<br>
<b>true</b> - 连同数据源填入的数据一起保存;<br>
<b>false</b> - 清除数据源填入的数据;<br>
<b>default</b> - 按照报表模版中默认的选项(在报表属性中)</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>XML串</td></tr>
  <tr><td align=right>备注</td><td colspan=2>1.Supcan Report是以XML保存的，而不是二进制;<br>2.该函数取得报表的XML后，通常需要再通过Ajax发送给服务器，用以保存报表;</td></tr>
  <tr class="example"><td align=right>示例</td><td colspan=2>AF.func("GetFileXML", "");<br>
AF.func("GetFileXML", "isSaveCalculateResult=true");</td></tr>
</table>
<br>

<div id="TagFuncTableGetFileURL"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetFileURL</td><td class="funcTD">取得上次打开(Build)的报表的文件名, 包括URL</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableGetFileURL"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>文件名或URL，如果上次是通过一个XML大串Build的，那么返回该串</td></tr>
</table>
<br>

<div id="TagFuncTableSubscribeEvent"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>SubscribeEvent</td><td class="funcTD">预订事件</td><td align="right" style="border-left:0px;"><img src="image/documentg.bmp" title="请参见演示页: 27.高级功能">&nbsp;&nbsp;<a href="#func_TagFuncTableSubscribeEvent"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>需要预订的事件有：CurSelChanged、Clicked、DblClicked、EditChanged、Editing、CellPropChanged，其含义分别是：当前单元格切换、鼠标点击单元格、鼠标双击单元格、单元格或文本框的内容输入已更新、单元格或文本框的输入框已打开并且内容有修改、工具箱中单元格的某些属性被修改</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>备注</td><td colspan=2>BeforeCellPropChanged不需要单独预订，它将跟随CellPropChanged事件</td></tr>
  <tr class="example"><td align=right>示例</td><td colspan=2>AF.func("SubscribeEvent", "CurSelChanged, Clicked");</td></tr>
</table>
<br>

<div id="TagFuncTableCallFunc"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>CallFunc</td><td class="funcTD">调用工具条上的功能</td><td align="right" style="border-left:0px;"><img src="image/documentg.bmp" title="请参见演示页: 1.体验硕正报表、10.自定义函数、19.中心数据源、46.左右分页打印">&nbsp;&nbsp;<a href="#func_TagFuncTableCallFunc"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>功能号</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>取决于功能号</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>取决于功能号, 通常为: 1 - 成功, 0 - 失败</td></tr>
  <tr><td align=right>备注</td><td colspan=2>功能号参见"工具条功能号"章节</td></tr>
</table>
<br>

<div id="TagFuncTableGetHandle"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetHandle</td><td class="funcTD">取得工作表、或Validation、或树列表、或数据源、或内部非模式对话框的句柄</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableGetHandle"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>可以为串:<br>
		<b>Validation</b> - 取得Validation句柄, 用于全局函数动态存取Validation;<br>
		<b>innerDialog</b> - 取得内部非模式对话框的freeform的句柄;<br>
		<b>树列表的别名</b> - 取得某内嵌树列表(Treelist)的句柄;<br>
		<b>工作表的序号(纯数字, 从0开始计数)</b> - 取得某工作表的句柄;<br>
		<b>工作表名</b> - 取得某工作表的句柄;<br>
		<b>数据源名</b> - 如 ds1, 取得该数据源的句柄，通常用于分页显示;<br>
		</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>句柄串</td></tr>
</table>
<br>

<div id="TagFuncTableSetSource (用途1)"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>SetSource (用途1)</td><td class="funcTD">设置中心数据源编目的URL</td><td align="right" style="border-left:0px;"><img src="image/documentg.bmp" title="请参见演示页: 19.中心数据源">&nbsp;&nbsp;<a href="#func_TagFuncTableSetSource (用途1)"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>中心数据源编目的URL(相对或绝对)</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>备注</td><td colspan=2>1.中心数据源的编目URL是一次设置、全局(进程)有效的;<br>
2.建议在第一次打开报表前执行;<br>
3.一旦设置了URL，报表数据源对话框中就不需要用户自己输入URL了：<img src="image/report3.png"><br>
4.建议该URL返回的XML/JSON数据支持<a href="pub04.htm" target=_blank>SoapLike</a>异常包</td></tr>
  <tr class="example"><td align=right>示例</td><td colspan=2>AF.func("setSource", "../center/dscenter.aspx");<br>
AF.func("Build", "reports/myreport1.xml");</td></tr>
</table>
<br>

<div id="TagFuncTableSetSource (用途2)"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>SetSource (用途2)</td><td class="funcTD">设置某临时数据源的URL</td><td align="right" style="border-left:0px;"><img src="image/documentg.bmp" title="请参见临时数据源的所有演示页">&nbsp;&nbsp;<a href="#func_TagFuncTableSetSource (用途2)"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>数据源ID</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>URL(相对或绝对); 对于XML/JSON数据源，也允许是直接的XML大串</td></tr>
  <tr><td align=right>参数3</td><td colspan=2>可选，格式为 Para2=[?],  其含义为:<br>
<b>Para2</b> - 可以为data/URL, 表示声明上面的“参数2”是纯数据串还是一个URL，仅用于TXT格式的数据，因为TXT格式的数据有时候很难自动判断到底是数据还是URL。如果不声明，系统优先判断为URL .<br>
</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>备注</td><td colspan=2>1.必须先打开报表，再执行本函数，否则无效，这一点和中心数据源刚好相反;<br>			
2.建议该URL返回的XML/JSON数据支持<a href="pub04.htm" target=_blank>SoapLike</a>异常包</td></tr>
  <tr class="example"><td align=right>示例</td><td colspan=2>AF.func("Build", "reports/myreport1.xml");<br>
AF.func("setSource", "ds1 \r\n dscenter/serv1.aspx");</td></tr>
</table>
<br>

<div id="TagFuncTableSetSource (用途3)"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>SetSource (用途3)</td><td class="funcTD">强制更改某中心数据源的dataURL</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableSetSource (用途3)"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>数据源ID</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>URL(相对或绝对)、或XML/JSON大串</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
  <tr class="example"><td align=right>示例</td><td colspan=2>AF.func("setSource", "ds1 \r\n dscenter/serv1.aspx");</td></tr>
</table>
<br>

<div id="TagFuncTableGetSource"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetSource</td><td class="funcTD">取得数据源的URL</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableGetSource"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>数据源ID</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>URL串</td></tr>
  <tr><td align=right>备注</td><td colspan=2>
1.如果报表中只有一个数据源，参数(ID)可以忽略;<br>
2.如果该数据源是中心数据源，那么将返回它的dataURL;</td></tr>
  <tr class="example"><td align=right>示例</td><td colspan=2>var url = AF.func("GetSource", "ds1");</td></tr>
</table>
<br>

<div id="TagFuncTableGetSources"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetSources</td><td class="funcTD">取得所有数据源的ID</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableGetSources"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>串，多个ID间以回车分隔. 例如串:<br>
<b>ds1<br>
ds2<br>
ds3</b></td></tr>
</table>
<br>

<div id="TagFuncTableGetSourceInfo"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetSourceInfo</td><td class="funcTD">取得某数据源的某些属性</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableGetSourceInfo"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>数据源ID<br>注: 如果是复合XML数据源的子节点，应该命名为诸如 "ds1\node1" 这样的串(注意：在js中，应该写成"ds1\\node1")</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>属性名，可以是: <br>
<b>CenterID</b> - 中心数据源编目中的ID，仅用于中心数据源; <br>
<b>WSFunction</b> - Web Service的方法(Method)名，仅用于Web Service类型的临时数据源;<br>
<b>FieldID</b> - 取得各数据项(列)的ID，按显示顺序排列、以回车分隔(不包括不显示的列);<br>
<b>FieldText</b> - 取得各数据项(列)的标题文字，按显示顺序排列、以回车分隔(不包括不显示的列);<br>
<b>AllFieldID</b> - 取得全部 (包括不显示的) 数据项(列)的ID，按显示顺序排列、以回车分隔;<br>
<b>AllFieldText</b> - 取得全部 (包括不显示的) 数据项(列)的标题文字，按显示顺序排列、以回车分隔;<br>
<b>Sort</b> - 排序串; <br>
<b>httpMethod</b> - 临时数据源的 Get/Post方法串(数据源向导界面中的下拉内容); <br>
<b>ContentType</b> - 临时数据源的 ContentType 串(数据源向导界面中的同名串); <br>
<b>para</b> - 可变参数名，以回车分隔;<br>
<b>paraText</b> - 可变参数的含义，以回车分隔;<br>
</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>串</td></tr>
</table>
<br>

<div id="TagFuncTableSetSourceInfo"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>SetSourceInfo</td><td class="funcTD">设置某数据源的某些属性</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableSetSourceInfo"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>数据源ID<br>注: 如果是复合XML数据源的子节点，应该命名为诸如 "ds1\node1" 这样的串(注意：在js中，应该写成"ds1\\node1")</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>属性名，可以是: <br>
<b>Sort</b> - 排序串; <br>
<b>httpMethod</b> - 临时数据源的 Get/Post方法串(数据源向导界面中的下拉内容), 可以是串"Get", "Post", "PostAndEncodeURI", "PostAndEncodeURI_WithoutComponent" 四种; <br>
<b>ContentType</b> - 临时数据源的 ContentType 串(数据源向导界面中的同名串); <br>
</td></tr>
  <tr><td align=right>参数3</td><td colspan=2>值<br>
  <tr><td align=right>返回值</td><td colspan=2>无</td></tr>
  <tr><td align=right>备注</td><td colspan=2>修改数据源的其它内容请用 SetDSColInfo, DeleteDSCol, SetDSXML 等函数</td></tr>
  <tr class="example"><td align=right>示例</td><td colspan=2>AF.func("SetSourceInfo", "ds1 \r\n sort \r\n capacity a,freight d");</td></tr>
</table>
<br>

<div id="TagFuncTableSetParas (语法1)"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>SetParas (语法1)</td><td class="funcTD">设置某数据源的参数的值</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableSetParas (语法1)"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>数据源ID</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>参数2、参数3...参数n，根据该数据源具体的定义</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>备注</td><td colspan=2>参数的个数和顺序, 必须和数据源中定义好的一致</td></tr>
  <tr class="example"><td align=right>示例</td><td colspan=2>AF.func("SetParas", "ds1 \r\n" + var1 +"\r\n"+ var2);</td></tr>
</table>
<br>

<div id="TagFuncTableSetParas (语法2)"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>SetParas (语法2)</td><td class="funcTD">设置某数据源的参数的值</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableSetParas (语法2)"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>数据源ID</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>XML/JSON串、或类似"prop1=value1; prop2=value2; ..."的属性串</td></tr>
  <tr><td align=right>参数3</td><td colspan=2>可选，格式为 isClear=[?], 含义为是否先清理以往的参数。如果 isClear=true, 表示清理以前设置的所有参数，isClear=false则表示未设置的参数继续沿用上次的, 默认是 false.</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>备注</td><td colspan=2>参数的个数可以是任意的，允许和数据源定义的参数不一致，这些参数最后都能体现在真实的URL中</td></tr>
  <tr class="example"><td align=right>示例</td><td colspan=2>AF.func("SetParas", "ds1 \r\n year=2012; month=2");<br>
AF.func("SetParas", "ds1 \r\n year=2012 \r\n isClear=true");</td></tr>
</table>
<br>

<div id="TagFuncTableSetParasEx"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>SetParasEx</td><td class="funcTD">强制设定数据源的附加参数</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableSetParasEx"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>参数串，例如"OrgId=2001&Dept=33", 空串表示清除之</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>可选, 格式为 range=[?], 参数含义如下:<br>
<b>range</b> - 作用范围, 分 process 和 instance 二种, process 表示进程有效, 即全局有效; instance 表示控件实例有效, 比如 "AF1" 执行了此函数后就仅对 "AF1" 有效,  "AF2" 或其它页面的控件均无效。默认是 process;
  </td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>备注</td><td colspan=2>1.对报表中的所有数据源均有效, 且不分中心数据源和临时数据源;<br>
2.这些参数将附加在数据源取数URL的后面，也就是说URL将被重新拼装;<br>
3.如果原URL中已经包含同名的参数，将以该函数设置的为准;<br>
4.process 和 instance 二种类型的附加参数, 在内存中分别存放在不同地方, 互不影响; 如果有同名, 那么 instance 的优先级更高<br>
</td></tr>
  <tr class="example"><td align=right>示例</td><td colspan=2>AF.func("SetParasEx", "a=1&b=2 \r\n range=process");<br>
AF.func("SetParasEx", "a=10 \r\n range=instance");<br>
数据源的URL可能为 "http://localhost/test.jsp?myname=john&a=10&b=2"</td></tr></table>
<br>

<div id="TagFuncTableGetParaNames"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetParaNames</td><td class="funcTD">取得某数据源的参数名</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableGetParaNames"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>数据源ID</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>参数名，若有多个参数，则以回车分隔</td></tr>
</table>
<br>

<div id="TagFuncTableSetDSColInfo"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>SetDSColInfo</td><td class="funcTD">设置或添加某临时数据源的某个数据列信息</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableSetDSColInfo"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>数据源ID<br>注: 如果是复合XML数据源的子节点，应该命名为诸如 "ds1\node1" 这样的串(注意：在js中，应该写成"ds1\\node1")</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>列名</td></tr>
  <tr><td align=right>参数3</td><td colspan=2>列标题名</td></tr>
  <tr><td align=right>参数4</td><td colspan=2>数据类型</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
  <tr class="example"><td align=right>示例</td><td colspan=2>AF.func("SetDSColInfo", "ds1 \r\n capacity \r\n 容量 \r\n double");</td></tr>
</table>
<br>

<div id="TagFuncTableDeleteDSCol"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>DeleteDSCol</td><td class="funcTD">删除某临时数据源的某个数据列</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableDeleteDSCol"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>数据源ID<br>注: 如果是复合XML数据源的子节点，应该命名为诸如 "ds1\node1" 这样的串(注意：在js中，应该写成"ds1\\node1")</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>列名</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
</table>
<br>

<div id="TagFuncTableNewDS"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>NewDS</td><td class="funcTD">新建中心数据源</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableNewDS"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>数据源ID</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>中心数据源的ID号</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
</table>
<br>

<div id="TagFuncTableDeleteDS"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>DeleteDS</td><td class="funcTD">删除数据源</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableDeleteDS"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>数据源ID</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>1 - 成功, 0 - 数据源不存在</td></tr>
</table>
<br>

<div id="TagFuncTableSynchCenterDS"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>SynchCenterDS</td><td class="funcTD">强制中心数据源和后端同步，用于清理中心数据源的自定义信息，例如：列是否显示、列显示顺序、排序、超链接等.</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableSynchCenterDS"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
</table>
<br>

<div id="TagFuncTableGetWorkSheetNameOfDs"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetWorkSheetNameOfDs</td><td class="funcTD">取得某数据源能够被用于哪些工作表，用于在数据源对话框中限制了数据源和工作表对应关系的情况</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableGetWorkSheetNameOfDs"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>工作表名, 若有多个工作表则以逗号分隔</td></tr>
</table>
<br>

<div id="TagFuncTableGetDsOfWorkSheet"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetDsOfWorkSheet</td><td class="funcTD">取得工作表能使用哪些数据源，用于在数据源对话框中限制了数据源和工作表对应关系的情况</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableGetDsOfWorkSheet"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>可选，工作表名或工作表顺序号，从0开始计数。如果不指定工作表，则默认为当前工作表</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>数据源的ID, 若有多个数据源则以逗号分隔</td></tr>
</table>
<br>

<div id="TagFuncTableGetColsOfDS"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetColsOfDS</td><td class="funcTD">取得某数据源对应到表格中的各个列, 即取得 =datarow( ) 函数横向填充的各个列的位置</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableGetColsOfDS"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>数据源ID</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>以逗号分隔的各个列的序号 (序号从0开始计数)</td></tr>
</table>
<br>

<div id="TagFuncTableGetDSFillInfo"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetDSFillInfo</td><td class="funcTD">取得某数据源对应到当前工作表中的行、列位置信息, 即取得 =datarow( ) 函数填充的行列信息</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableGetDSFillInfo"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>数据源ID</td></tr>
  <tr><td align=right>备注</td><td colspan=2>对区块填充无效</td></tr>
  <tr><td align=right>返回值</td><td colspan=2><b>情形一.数据源普通填入</b><br>
　　返回串是以回车分隔的如下5部分内容：<br>
　　1.固定的串: "Normal";<br>
　　2.数据源位于当前工作表的行号，从0开始计数，也即=datarow( )公式所在的行号;<br>
　　3.数据源填充的行数;<br>
　　4.数据源横向填充的列号，以逗号分隔;<br>
　　5.数据源横向填充的各个列对应到数据源的列名，以逗号分隔;<br>
返回串例如：<br>
<pre class='cpp'>
Normal
4
3
2,3,4,6
id,company,price,city</pre>
表示行号4(即第五行)处开始，有3行数据填入(包括datarow( )所在行)，从左到右的列号分别是 2、3、4、6，对应到数据源的字段是id,company,price,city<br>
<br>
<b>情形二.填入区是分类汇总表</b><br>
　　与 "情形一" 基本相同，除了第一部分固定串是 "Summary";<br>
<br>
<b>情形三.填入区是交叉表</b><br>
　　返回串是以回车分隔的如下8部分内容：<br>
　　1.固定的串: "Crosstab";<br>
　　2.数据源位于当前工作表的行号，从0开始计数，也即=datarow( )公式所在的行号;<br>
　　3.交叉表数据部分的开始填充的行号;<br>
　　4.交叉表数据部分填充的行数，不包含表头部分;<br>
　　5.交叉表数据区横向填充的列号，以逗号分隔;<br>
　　6.交叉表数据区横向填充的列的内容，以逗号分隔;<br>
　　7.交叉表非数据区横向填充的列号，以逗号分隔;<br>
　　8.交叉表非数据区横向填充的列的内容，以逗号分隔;<br>
返回串例如：<br>
<pre class='cpp'>
Crosstab
2
4
17
3,4,5
2013年前入职员工(原厂职工),2013年后入职员工,合计
1,2
国家,城市</pre>
表示 datarow 位于行号2(即第三行)，而数据部分(不包含动态表头)从行号4开始填入，有17行数据填入(不包含表头)，从左到右的动态列号分别是 3、4、5，以及对应的横向交叉结果
</td></tr>
</table>
<br>

<div id="TagFuncTableGetDSXML"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetDSXML</td><td class="funcTD">取得某数据源的XML描述串</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableGetDSXML"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>数据源ID</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>XML串</td></tr>
</table>
<br>

<div id="TagFuncTableSetDSXML"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>SetDSXML</td><td class="funcTD">根据数据源的XML描述串，动态更改或添加数据源</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableSetDSXML"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>XML描述串，或URL</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>1/0 - 成功/失败</td></tr>
  <tr class="example"><td align=right>示例</td><td colspan=2>//注：请注意 js 的字符串变量的书写语法，换行用 “\”， 字符串中的 “\”必须转义为“\\”(此语法属于 js 范畴，和硕正报表无关)<br>
<pre class='xml'>
var xml="&lt;Data&gt;\<br>
 &lt;ID&gt;ds1&lt;/ID&gt;\<br>
 &lt;Type&gt;0&lt;/Type&gt;\<br>
 &lt;Source&gt;treelistdata/car.xml&lt;/Source&gt;\<br>
 &lt;XML_RecordAble_Nodes&gt;\<br>
  &lt;Node&gt;\<br>
   &lt;name&gt;record&lt;/name&gt;\<br>
  &lt;/Node&gt;\<br>
 &lt;/XML_RecordAble_Nodes&gt;\<br>
 &lt;Columns&gt;\<br>
 &lt;Column&gt;\<br>
   &lt;name&gt;record\\TradeMark&lt;/name&gt;\<br>
   &lt;text&gt;品牌&lt;/text&gt;\<br>
   &lt;type&gt;string&lt;/type&gt;\<br>
   &lt;visible&gt;true&lt;/visible&gt;\<br>
   &lt;sequence&gt;1&lt;/sequence&gt;\<br>
  &lt;/Column&gt;\<br>
  &lt;Column&gt;\<br>
   &lt;name&gt;record\\Category&lt;/name&gt;\<br>
   &lt;text&gt;车型&lt;/text&gt;\<br>
   &lt;type&gt;string&lt;/type&gt;\<br>
   &lt;visible&gt;false&lt;/visible&gt;\<br>
   &lt;sequence&gt;6&lt;/sequence&gt;\<br>
  &lt;/Column&gt;\<br>
  &lt;Column&gt;\<br>
   &lt;name&gt;record\\Model&lt;/name&gt;\<br>
   &lt;text&gt;型号&lt;/text&gt;\<br>
   &lt;type&gt;string&lt;/type&gt;\<br>
   &lt;visible&gt;true&lt;/visible&gt;\<br>
   &lt;sequence&gt;2&lt;/sequence&gt;\<br>
  &lt;/Column&gt;\<br>
 &lt;/Columns&gt;\<br>
&lt;/Data&gt;";<br>
AF.func("SetDSXML", xml);</pre></td></tr>
<tr><td align=right>备注</td><td colspan=2>1.上例中, 如果 ds1 数据源不存在，它会自动添加, 否则则是替换;<br>
2.本函数常用于动态更改数据源的内容，比如动态添加数据列. 由于XML结构比较复杂，建议借助全局函数中的 "DOM_函数" 来处理;<br>
3.本函数只能增加或修改一个数据源, 如果您要动态处理多个数据源, 需要执行本函数多次;<br>
4.XML中, &lt;Type&gt;为数据源类型，0/1/2/4/5/7 分别表示 XML/WebService/HTML Table/JSON/中心数据源/TXT格式数据源;<br>
5.&lt;Source&gt; 就是 dataURL, 假如您肯定要执行 SetSource 的, 那么可以省略不写;<br>
6.&lt;XML_RecordAble_Nodes&gt;\&lt;Node&gt;表示数据在 XML 数据包中的位置, 如果您的 XML 是平面的结果集数据, 其内容可以任意写, 就按例子中的 record 也没关系;<br>
<br>
7.&lt;Columns&gt;\&lt;Column&gt;就是各个列了, 列数允许少于数据包中的列, 列顺序也不需要和数据包中的顺序一致, &lt;name&gt; 是列名，像上例中的 &lt;name&gt;record\\TradeMark&lt;/name&gt;, 如果数据是平面的简单XML结果集, 左侧的"record\\"可以省略;  &lt;sequence&gt;表示 datarow('ds1') 的左右填充顺序; &lt;type&gt;是数据类型, 有 string/decimal/date/datetime/boolean, 默认省略了就当做 string 型;<br>
<br>
8.例子中是动态增加 XML 型临时数据源, 假如您要动态增加中心数据源, 可以这样写:<br>
<pre class='cpp'>AF.func("SetDSXML", "&lt;Data&gt;&lt;ID&gt;ds1&lt;/ID&gt;&lt;Type&gt;5&lt;/Type&gt;&lt;dataID&gt;1001&lt;/dataID&gt;&lt;/Data&gt;");</pre>
不需要写列结构, 因为 ds1 一建立，它会自动向服务器获取 ID 为 1001 的数据源列结构的.<br>
下面是完整的空白报表建立中心数据源、加载数据的示例:<br>
<pre class='cpp'>
function OnReady(id)
{
  //指定中心数据源入口
  AF.func("SetSource", "reportdata/datacenter.xml");
  //动态新建报表
  AF.func("callfunc", "102 \r\n rows=5;cols=10");
  //动态使用 1001 中心数据源
  AF.func("SetDSXML", "&lt;Data&gt;&lt;ID&gt;ds1&lt;/ID&gt;&lt;Type&gt;5&lt;/Type&gt;&lt;dataID&gt;1001&lt;/dataID&gt;&lt;/Data&gt;");
  //动态插入函数、计算
  AF.func("SetCellData", "A2 \r\n=headrow('ds1')");
  AF.func("SetCellData", "A3 \r\n=datarow('ds1')");
  AF.func("calc", "");
}</pre>
</td></tr>
</table>
<br>

<div id="TagFuncTableGetUsedDS"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetUsedDS</td><td class="funcTD">取得工作表的计算公式中使用了哪些数据源</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableGetUsedDS"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>可选，工作表名或工作表顺序号，从0开始计数； -1表示所有工作表；如果不指定工作表，则默认为当前工作表</td></tr>
  <tr><td align=right>参数</td><td colspan=2>可选，指定函数名, 如 datarow、data、...等数据源函数, 表示仅返回在这些函数中使用了的数据源。允许是多个不同的函数, 函数名之间以逗号分隔</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>数据源的ID, 若有多个数据源则以逗号分隔</td></tr>
</table>
<br>

<div id="TagFuncTableParseUsedDS"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>ParseUsedDS</td><td class="funcTD">取得工作表的计算公式中使用了哪些数据源，包括参数</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableParseUsedDS"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>可选，工作表名或工作表顺序号，从0开始计数； -1表示所有工作表；如果不指定工作表，则默认为当前工作表</td></tr>
  <tr><td align=right>参数</td><td colspan=2>可选，指定函数名, 如 datarow、data、...等数据源函数, 表示仅返回在这些函数中使用了的数据源。允许是多个不同的函数, 函数名之间以逗号分隔</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>串，格式规定如下：<br>
1.数据源的ID和参数, 相互之间以Tab(即\t)分隔，参数是原参数，即有可能是带引号的；<br>
2.若有多种不同数据源及参数组合，则相互以回车符(\r\n)分隔;</td></tr>
</table>
<br>

<div id="TagFuncTableGetRows"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetRows</td><td class="funcTD">取得总行数</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableGetRows"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>数字</td></tr>
</table>
<br>

<div id="TagFuncTableGetCols"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetCols</td><td class="funcTD">取得总列数</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableGetCols"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>数字</td></tr>
</table>
<br>

<div id="TagFuncTableInsertRows (语法1)"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=150><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>InsertRows (语法1)</td><td class="funcTD">插入行 (语法1)</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableInsertRows (语法1)"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>插入处行号(从0开始计数，-1表示从末尾添加)，也有“基准行”的意思，新插入行的单元格属性(比如颜色、边界线等等)都是从该行复制过去的</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>可选, 插入行数，默认1</td></tr>
  <tr><td align=right>参数3</td><td colspan=2>可选, true/false(或1/0、yes/no)，分别表示前插/后插，默认前插</td></tr>
  <tr><td align=right>参数4</td><td colspan=2>可选, true/false(或1/0、yes/no)，分别表示复制公式/不复制公式，默认不复制</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>1-成功，空串-失败</td></tr>
  <tr class="example"><td align=right>示例</td><td colspan=2>AF.func("insertRows", "1 \r\n 3 \r\n false");  //表示在第二行位置后插3行
</table>
<br>

<div id="TagFuncTableInsertRows (语法2)"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=150><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>InsertRows (语法2)</td><td class="funcTD">插入行 (语法2)</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableInsertRows (语法2)"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>分号分隔的选项串, 格式为 at=[?]; pos=[?]; count=[?]; isCopyFormula=[?]; 含义和写法如下:<br>
<b>at</b> - 插入处行号(从0开始计数，-1表示从末尾添加)，此行也有“基准行”的意思，新插入行的单元格属性(比如颜色、边界线等等)都是从该行复制过去的;<br>
<b>pos</b> - 可以是 before/after, 分别表示前插/后插, 默认是前插;<br>
<b>count</b> - 插入行数，默认1<br>
<b>isCopyFormula</b> - 是否把基准行的公式复制到新行, true/false, 默认是 false, 即不复制</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>1-成功，空串-失败</td></tr>
  <tr class="example"><td align=right>示例</td><td colspan=2>AF.func("insertRows", "at=1; count=3; pos=after");  //表示在第二行位置后插3行
</table>
<br>

<div id="TagFuncTableInsertCols (语法1)"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=150><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>InsertCols (语法1)</td><td class="funcTD">插入列 (语法1)</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableInsertCols (语法1)"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>插入处列号(从0开始计数，-1表示从末尾添加)，或列名(如A、B、C..)，此列也有“基准列”的意思，新插入列的单元格属性(比如颜色、边界线等等)都是从该列复制过去的</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>可选, 插入列数，默认1</td></tr>
  <tr><td align=right>参数3</td><td colspan=2>可选, true/false(或1/0、yes/no)，分别表示前插/后插，默认前插</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>1-成功，空串-失败</td></tr>
</table>
<br>

<div id="TagFuncTableInsertCols (语法2)"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=150><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>InsertCols (语法2)</td><td class="funcTD">插入列 (语法2)</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableInsertCols (语法2)"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>分号分隔的选项串, 格式为 at=[?]; pos=[?]; count=[?]; 含义和写法如下:<br>
<b>at</b> - 插入处列号(从0开始计数，-1表示从末尾添加)，或列名(如A、B、C..)，此列也有“基准列”的意思，新插入列的单元格属性(比如颜色、边界线等等)都是从该列复制过去的;<br>
<b>pos</b> - 可以是 before/after, 分别表示前插/后插, 默认是前插;<br>
<b>count</b> - 插入列数，默认1</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>1-成功，空串-失败</td></tr>
  <tr class="example"><td align=right>示例</td><td colspan=2>AF.func("insertCols", "at=A; pos=after");  //表示在A列处前后一列
</table>
<br>

<div id="TagFuncTableDeleteRows"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>DeleteRows</td><td class="funcTD">删除行</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableDeleteRows"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>开始删除的行号(从0开始计数)</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>行数，-1表示删除后面所有行</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>1-成功，空串-失败</td></tr>
</table>
<br>

<div id="TagFuncTableDeleteCols"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>DeleteCols</td><td class="funcTD">删除列</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableDeleteCols"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>开始删除的列号(从0开始计数)，或列名(如A、B、C..)</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>列数，-1表示删除后面所有列</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>1-成功，空串-失败</td></tr>
</table>
<br>

<div id="TagFuncTableIsRowHide"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>IsRowHide</td><td class="funcTD">某行是否被隐藏</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableIsRowHide"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>行号(从0开始计数)</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>1/0 - 是/否</td></tr>
</table>
<br>

<div id="TagFuncTableHideRow"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>HideRow</td><td class="funcTD">隐藏行</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableHideRow"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>行号(从0开始计数)</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>可选，数量，默认1</td></tr>
  <tr><td align=right>参数3</td><td colspan=2>可选，true/false - 隐藏/解除隐藏，默认true</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
</table>
<br>

<div id="TagFuncTableIsColHide"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>IsColHide</td><td class="funcTD">某列是否被隐藏</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableIsColHide"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>列号(从0开始计数)，或列名(如 A、K、AC)</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>1/0 - 是/否</td></tr>
</table>
<br>

<div id="TagFuncTableHideCol"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>HideCol</td><td class="funcTD">隐藏列</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableHideCol"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>列号(从0开始计数)，或列名(如 A、K、AC)</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>可选，数量，默认1</td></tr>
  <tr><td align=right>参数3</td><td colspan=2>可选，true/false - 隐藏/解除隐藏，默认true</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
</table>
<br>

<div id="TagFuncTableGetRowOffset"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetRowOffset</td><td class="funcTD">取得某行的偏移量, 偏移量是相对于第一行的顶部，和屏幕无关</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableGetRowOffset"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>行号(从0开始计数)</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>数字，单位：像素数</td></tr>
</table>
<br>

<div id="TagFuncTableGetColOffset"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetColOffset</td><td class="funcTD">取得某列的偏移量, 偏移量是相对于第一列的左侧，和屏幕无关</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableGetColOffset"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>列号(从0开始计数)，或列名(如 A、K、AC)</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>数字，单位：像素数</td></tr>
</table>
<br>

<div id="TagFuncTableGetRowHeight"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetRowHeight</td><td class="funcTD">取得某行高</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableGetRowHeight"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>行号(从0开始计数)</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>数字，单位：像素数</td></tr>
</table>
<br>

<div id="TagFuncTableSetRowHeight"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>SetRowHeight</td><td class="funcTD">设置某行高</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableSetRowHeight"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>行号(从0开始计数)</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>数字，单位：像素数，范围：0-2000</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
</table>
<br>

<div id="TagFuncTableGetColWidth"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetColWidth</td><td class="funcTD">取得某列宽</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableGetColWidth"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>列号(从0开始计数)，或列名(如 A、K、AC)</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>数字，单位：像素数</td></tr>
</table>
<br>

<div id="TagFuncTableSetColWidth"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>SetColWidth</td><td class="funcTD">设置某列宽</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableSetColWidth"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>列号(从0开始计数)，或列名(如 A、K、AC)</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>数字，单位：像素数，范围：0-2000</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
</table>
<br>

<div id="TagFuncTableGetRowProp"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetRowProp</td><td class="funcTD">取某行的其它属性</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableGetRowProp"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>行号(从0开始计数)</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>请参见 SetRowProp 函数</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>取决于参数2, 请参见 SetRowProp 函数</td></tr>
</table>
<br>

<div id="TagFuncTableSetRowProp"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>SetRowProp</td><td class="funcTD">设置某行的某些属性</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableSetRowProp"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>行号(从0开始计数)</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>
<b>ds</b> - 该行是否数据源动态插入的行; <br>
<b>print</b> - 该行是否打印; <br>
<b>pageBreak</b> - 在该行处是否强制分页;<br>
<b>pageNumber</b> - 强制分页的页码;<br>
<b>rulerMask</b> - 该行标尺所显示的文字, 文字中允许含有宏 @row, 表示在显示时会被替换成实际的行号;<br>
</td></tr>
  <tr><td align=right>参数3</td><td colspan=2>对于pageNumber属性，是页码数字；请他: true / false - 是 / 否</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>1/0 - 成功/失败</td></tr>
  <tr><td align=right>备注</td><td colspan=2>1.这些内容将会保存在报表的XML中, 即效果是持久的;<br>
2.不建议强制设置 ds 属性;<br>
3.数据源动态插入的行(行号在左标尺以深蓝色显示)，在模版保存是会自动被删除</td></tr>
</table>
<br>

<div id="TagFuncTableSetColUserProp"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>SetRowUserProp<br>SetColUserProp</td><td class="funcTD">设置某行/某列的某个自定义属性的值</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableSetColUserProp"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>行号 / 列名或列号</td></tr>
  <tr><td align=right>参数</td><td colspan=2>属性名，必须符合变量命名规则</td></tr>
  <tr><td align=right>参数</td><td colspan=2>值串, 如果是空串或忽略本参数，表示删除该自定义属性</td></tr>
  <tr><td align=right>返回值</td><td colspan=2> 1 - 成功;<br> 0 - 失败, 失败原因通常为列不存在、属性名不符合常规的变量命名规则;<br>-1 - 失败, 原因是属性名和系统保留词冲突</td></tr>
  <tr class="example"><td align=right>示例</td><td colspan=2>AF.func("SetColUserProp", "F \r\n MyVar \r\n 1234ABCD");  //设置 F 列自定义属性<br>
AF.func("SetColUserProp", "F \r\n MyVar");  //删除 F 列该属性<br>
AF.func("SetRowUserProp", "3 \r\n MyVar \r\n 3392");  //设置第四行的该属性<br>
  </td></tr>
</table>
<br>

<div id="TagFuncTableGetColUserProp"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetRowUserProp<br>GetColUserProp</td><td class="funcTD">取得某行/某列的某个自定义属性的值</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableGetColUserProp"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>行号 / 列名或列号</td></tr>
  <tr><td align=right>参数</td><td colspan=2>属性名</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>值串, 空串表示该属性不存在</td></tr>
</table>
<br>

<div id="TagFuncTableGetColUserProps"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetRowUserProps<br>GetColUserProps</td><td class="funcTD">取得某行/某列的全部自定义属性名</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableGetColUserProps"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>行号 / 列名或列号</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>以逗号分隔的自定义属性名</td></tr>
</table>
<br>

<div id="TagFuncTableRemoveColUserProps"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>RemoveRowUserProps<br>RemoveColUserProps</td><td class="funcTD">清理某行/某列的全部自定义属性</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableRemoveColUserProps"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>行号 / 列名或列号</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
</table>
<br>

<div id="TagFuncTableSeparateView"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>SeparateView</td><td class="funcTD">设定分屏冻结</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableSeparateView"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>行数</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>列数</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
  <tr class="example"><td align=right>示例</td><td colspan=2>AF.func("SeparateView", "4 \r\n 0"); //前4行上下分屏</td></tr>
</table>
<br>

<div id="TagFuncTableSort"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>Sort</td><td class="funcTD">排序</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableSort"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>格式为: from=[?];to=[?];rows=[?];Exp=[?];MatchCase=[?], 含义和可用值为:<br>
  <b>from</b> - 排序区的开始行, 从0开始计数;<br>
  <b>to</b> -  排序区的终止行, 从0开始计数，也可以不采用本参数而使用 rows 参数;<br>
  <b>rows</b> -  排序区的行数, 也可以不采用本参数而使用 to 参数;<br>
  <b>Exp</b> 或 <b>Express</b> - 表达式，格式为 "列名或列号 a或d 数据类型"，如果不指明数据类型，那么系统将根据实际数据自动判断，多重排序则为逗号分隔，可参考例子;<br>
  <b>MatchCase</b> - 对于字符型的列，大小写是否敏感, true/false 或 case/nocase, 默认是 false;<br>
  </td></tr>
  <tr><td align=right>返回值</td><td colspan=2>1/0 - 成功/失败， 失败的原因通常为：行数少于2行、Exp表达式书写错误</td></tr>
  <tr><td align=right>备注</td><td colspan=2>1.如果同时采用了 to 和 rows 参数，则优先采用 to 参数；<br>
2.如果你希望对数据源填入区进行排序，请使用 SortDS 函数</td></tr>
  <tr class="example"><td align=right>示例</td><td colspan=2>AF.func("Sort", "from=4; rows=10; Exp=D a int"); //按照 D 列数据作排序，数据类型强制认作int<br>
AF.func("Sort", "from=4; rows=10; Exp=D a int,5 d; matchCase=true"); //多重排序，先按照 D 列整型升序、再按照 F 列(F列的列号是5)降序排序，如果F列是字符串型，那么大小写是敏感的</td></tr>
</table>
<br>


<div id="TagFuncTableSortDS"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>SortDS</td><td class="funcTD">对数据源填入区内的数据作排序</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableSortDS"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>数据源的 ID</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>格式为: Exp=[?];MatchCase=[?];isKeepDataRowNumber=[?], 含义和可用值为:<br>
  <b>Exp</b> 或 <b>Express</b> - 表达式，格式为 "字段名 a或d"，多重排序则为逗号分隔，可参考例子;<br>
  <b>MatchCase</b> - 对于字符型的列，大小写是否敏感, true/false 或 case/nocase, 默认是 false;<br>
  <b>isKeepDataRowNumber</b> - datarowNumber( ) 所在列，是否保持从小到大的顺序排列, true/false, 默认是 true;<br>
  </td></tr>
  <tr><td align=right>返回值</td><td colspan=2>1/0 - 成功/失败， 失败的原因通常为：行数少于2行、Exp表达式书写错误</td></tr>
  <tr class="example"><td align=right>示例</td><td colspan=2>AF.func("SortDS", "ds1 \r\n Exp=price"); //按照数据源 price 列对应到表格内的某列数据作排序<br>
AF.func("SortDS", "ds1\inner\table \r\n Exp=price, subDep d"); //多重排序，先按照数据源price列整型升序、再按照SubDep列降序排序</td></tr>
  <tr><td align=right>备注</td><td colspan=2>1.该排序仅仅是对表格内的数据进行排序，不会从后端加载数据的;<br>
2.仅用于简单的数据源填入，不支持区块、分类汇总表、交叉表，如果这些类型的报表都要支持，建议你采用另外的方案：先执行 SetSourceInfo、再执行 Calc
  </td></tr>
</table>
<br>



<div id="TagFuncTableGetCellName"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetCellName</td><td class="funcTD">根据行列号得到单元名</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableGetCellName"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>行号(从0开始计数)</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>列号(从0开始计数)</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>串 - 单元格名，如"D9"、"AA2</td></tr>
  <tr class="example"><td align=right>示例</td><td colspan=2>AF.func("GetCellName", "4 \r\n 0"); 返回 A5</td></tr>
</table>
<br>

<div id="TagFuncTableGetCellRow"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetCellRow</td><td class="funcTD">根据单元名得到行号</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableGetCellRow"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>单元名, 或单元格范围</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>行号, 如果参数是单元格范围, 则返回逗号分隔的行号</td></tr>
  <tr class="example"><td align=right>示例</td><td colspan=2>AF.func("GetCellRow", "A5"); 返回 "4"<br>AF.func("GetCellRow", "A5:D6"); 返回 "4,5"</td></tr>
</table>
<br>

<div id="TagFuncTableGetCellCol"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetCellCol</td><td class="funcTD">根据单元名得到列号</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableGetCellCol"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>单元名, 或单元格范围</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>列号, 如果参数是单元格范围, 则返回逗号分隔的列号</td></tr>
  <tr class="example"><td align=right>示例</td><td colspan=2>AF.func("GetCellCol", "A5"); 返回 "0"<br>AF.func("GetCellRow", "A5:D6"); 返回 "0,3"</td></tr>
</table>
<br>

<div id="TagFuncTableSelectCell(用途1)"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>SelectCell(用途1)</td><td class="funcTD">选取焦点单元、或嵌入对象(如文本框)</td><td align="right" style="border-left:0px;"><img src="image/documentg.bmp" title="请参见演示页: 1.体验硕正报表、48.套打(一)">&nbsp;&nbsp;<a href="#func_TagFuncTableSelectCell(用途1)"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>行号(从0开始计数)</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>列号(从0开始计数)</td></tr>
  <tr><td align=right>参数3</td><td colspan=2>可选, 至行号, -1表示到末行</td></tr>
  <tr><td align=right>参数4</td><td colspan=2>可选, 至列号, -1表示到末列</td></tr>
  <tr><td align=right>参数5</td><td colspan=2>可选, 可以为input, 表示打开输入框，直接进入编辑状态</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>true/false - 成功/失败</td></tr>
  <tr><td align=right>备注</td><td colspan=2>参数也不一定要完全按照上述规定，语法其实是比较灵活的，请参见下面的示例：</td></tr>
  <tr class="example"><td align=right>示例</td><td colspan=2>AF.func("SelectCell", "A5");   //选取A5单元格<br>
AF.func("SelectCell", "A5 \r\n B8");   //选取从A5单元格到B8单元格之间的区域<br>
AF.func("SelectCell", "5 \r\n C");   //C 是列名， 表示第三列<br>
AF.func("SelectCell", "B5 \r\n -1 \r\n -1");   //选取从B5单元格到报表右下角整个区域<br>
AF.func("SelectCell", "Addr \r\n DKP");   //选取从别名为"Addr"的单元格到别名为"DKP"之间的区域<br>
AF.func("SelectCell", "Addr \r\n input");   //选取别名为"Addr"的单元格或文本框，然后直接打开输入</td></tr>
</table>
<br>

<div id="TagFuncTableGetCurrentCell"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetCurrentCell</td><td class="funcTD">取得当前焦点单元格</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableGetCurrentCell"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>可选，顺序号(从0开始计数)，默认是0. 如果当前焦点是一块区域，可以用顺序号参数逐个取得单元格名，循环顺序是逐行逐列</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>串，单元格名,如 "D4"、"E4"; 如果当前选中的是内嵌对象(如文本框)，则返回它的别名</td></tr>
</table>
<br>

<div id="TagFuncTableGetCurrentCells"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetCurrentCells</td><td class="funcTD">取得当前焦点单元格</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableGetCurrentCells"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>串，包含左上、右下的2个单元格名,如 "D4:E5"、"E4:E4", 注："E4:E4"是一个单元格; 如果当前选中的是内嵌对象(如文本框)，则返回以逗号分隔的别名</td></tr>
</table>
<br>

<div id="TagFuncTableEnsureVisible"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>EnsureVisible</td><td class="funcTD">自动滚动到让某单元格可见</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableEnsureVisible"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>行号(从0开始计数)</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>列号(从0开始计数)</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>true/false - 成功/失败</td></tr>
  <tr><td align=right>备注</td><td colspan=2>也可以将行、列参数合并成一个参数：单元名，如B7、K11； 或者是单元格的别名</td></tr>
</table>
<br>

<div id="TagFuncTableGetCellData"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetCellData</td><td class="funcTD">取得某单元的内容，或者计算公式的值</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableGetCellData"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>行号(从0开始计数)</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>列号(从0开始计数)，或列名(如 A、K、AC)</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>串</td></tr>
  <tr><td align=right>备注1</td><td colspan=2>也可以将行、列参数合并成一个参数：单元名，如B7、K11； 或者是单元格的别名、或文本框的别名；也可以在后面跟随宏@sheet(如 B7@sheet2 表示第二个工作表的B7单元格)</td></tr>
  <tr><td align=right>备注2</td><td colspan=2>参数也可以是以冒号(:)分隔的单元格范围，如 A3:D5 , 用于一次性返回多个单元格的内容，返回的内容串中，行之间以回车符(\r\n)分隔、列之间以制表符(\t)分隔</td></tr>
  <tr class="example"><td align=right>示例</td><td colspan=2>var s1 = AF.func("getCellData", "3 \r\n 9");<br>
var s2 = AF.func("getCellData", "B7");<br>
var s3 = AF.func("getCellData", "B7@Sheet2");   //指定取第二个工作表<br>
var s4 = AF.func("getCellData", "MyTh");   //"MyTh"是别名<br>
var s5 = AF.func("getCellData", "D3:F8");   //一次性取多个单元格的内容</td></tr>
</table>
<br>

<div id="TagFuncTableSetCellData"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>SetCellData</td><td class="funcTD">设置某单元的内容、或计算公式(计算公式以等号开头)</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableSetCellData"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>行号(从0开始计数)</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>列号(从0开始计数)，或列名(如 A、K、AC)</td></tr>
  <tr><td align=right>参数3</td><td colspan=2>串</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>备注</td><td colspan=2>1.也可以将行、列参数合并成一个参数：单元名，如B7、K11； 或者是单元格的别名、或文本框的别名；也可以在后面跟随宏@sheet(如 B7@sheet2 表示第二个工作表的B7单元格);<br>
2.也支持同时处理多个单元格，单元格名以逗号(,)分隔、且支持以冒号(:)分隔2个单元格名的矩形区域，请参见下面的示例;<br>
3.<font color=red>严重警告：</font>参数2和参数3之间不得留有多余空格，否则结果将不是你所期望的，例如：<br>
　　AF.func("SetCellData", "C5 \r\n   "+ vCity);　　//执行结果是左侧有多余空格;<br>
4.如果 js 循环执行多遍时发现性能下降(界面很卡)，可以试试 SetRedrawAble 函数;
</td></tr>
  <tr class="example"><td align=right>示例</td><td colspan=2>AF.func("SetCellData", "3 \r\n 9 \r\n年度计划");<br>
AF.func("setCellData", "B7\r\n=B8+B9");  &nbsp;&nbsp; //为B7单元格设置公式<br>
AF.func("setCellData", "B7@Sheet2 \r\n年度计划"); &nbsp;&nbsp;  //指定第二个工作表<br>
AF.func("setCellData", "MyTh  \r\n年度计划"); &nbsp;&nbsp;  //"MyTh"是别名<br>
AF.func("setCellData", "A1,B3:B10, C3:C11, E11, MyTh  \r\n12"); &nbsp;&nbsp; //同时将多个单元格内容全部设置为"12"</td></tr>
</table>
<br>

<div id="TagFuncTableGetCellDataEx"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetCellDataEx</td><td class="funcTD">取得某单元的内容或计算结果(Checkbox优先)</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableGetCellDataEx"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>同 GetCellData</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>串</td></tr>
  <tr><td align=right>备注</td><td colspan=2>和 GetCellData 函数唯一的差别是：如果单元格是CheckBox，那么返回的是 0 或 1，否则和GetCellData一样</td></tr>
</table>
<br>

<div id="TagFuncTableSetCellDataEx"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>SetCellDataEx</td><td class="funcTD">设置某单元内容、或公式(CheckBox优先)</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableSetCellDataEx"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>同 SetCellData</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>备注</td><td colspan=2>和 SetCellData 函数唯一的差别是：如果单元格是CheckBox、并且最后一个参数是 1、0或空串，那么就设置这个CheckBox, 而不修改文字.</td></tr>
</table>
<br>

<div id="TagFuncTableGetCellText"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetCellText</td><td class="funcTD">取得某单元的显示内容</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableGetCellText"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>行号(从0开始计数)</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>列号(从0开始计数)，或列名(如 A、K、AC)</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>串</td></tr>
  <tr><td align=right>备注1</td><td colspan=2>也可以将行、列参数合并成一个参数：单元名，如B7、K11； 或者是单元格的别名、或文本框的别名；也可以在后面跟随宏@sheet(如 B7@sheet2 表示第二个工作表的B7单元格)</td></tr>
  <tr><td align=right>备注2</td><td colspan=2>参数也可以是以冒号(:)分隔的单元格范围，如 A3:D5 , 用于一次性返回多个单元格的内容，返回的内容串中，行之间以回车符(\r\n)分隔、列之间以制表符(\t)分隔</td></tr>
  <tr class="example"><td align=right>示例</td><td colspan=2>var s1 = AF.func("getCellText", "3 \r\n 9");<br>
var s2 = AF.func("getCellText", "B7");<br>
var s3 = AF.func("getCellText", "B7@Sheet2");   //指定取第二个工作表<br>
var s4 = AF.func("getCellText", "MyTh");   //"MyTh"是别名<br>
var s5 = AF.func("getCellText", "A1:A9");   //一次性取多个单元格的内容</td></tr>
</table>
<br>

<div id="TagFuncTableGetCellFormula"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetCellFormula</td><td class="funcTD">取得某单元的计算公式</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableGetCellFormula"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>行号(从0开始计数)</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>列号(从0开始计数)，或列名(如 A、K、AC)</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>串, 空串表示非计算公式</td></tr>
  <tr><td align=right>备注1</td><td colspan=2>也可以将行、列参数合并成一个参数：单元名，如B7、K11； 或者是单元格的别名、或文本框的别名；也可以在后面跟随宏@sheet(如 B7@sheet2 表示第二个工作表的B7单元格)</td></tr>
  <tr><td align=right>备注2</td><td colspan=2>参数也可以是以冒号(:)分隔的单元格范围，如 A3:D5 , 用于一次性返回多个单元格的内容，返回的内容串中，行之间以回车符(\r\n)分隔、列之间以制表符(\t)分隔</td></tr></table>
<br>

<div id="TagFuncTableGetCellProp(用途1)"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetCellProp(用途1)</td><td class="funcTD">取得某单元格的属性(包括自定义属性)</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableGetCellProp(用途1)"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>行号(从0开始计数)</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>列号(从0开始计数)，或列名(如 A、K、AC)</td></tr>
  <tr><td align=right>参数3</td><td colspan=2>属性名，大约有20多种, 也可以是自定义属性，这些属性都是保存在报表的XML中，如:<br>

<Table width="100%" style="border-collapse: collapse; border:1px solid #aaaaaa" >
<tr><td> TextColor - 文字色 </td><td> BgColor - 背景色 </td></tr>
<tr><td> formula - 输入的公式 </td><td> datatype - 数据类型 </td></tr>
<tr><td> decimal - 小数位数 </td><td> isRound - 是否四舍五入 </td></tr>
<tr><td> isThousandSeparat - 千位符 </td><td> isProtected - 保护 </td></tr>
<tr><td> align - 水平对齐 </td><td> vAlign - 垂直对齐 </td></tr>
<tr><td> fontIndex - 字体 </td><td> Alias - 别名 </td></tr>
<tr><td> leftBorder - 左边界线宽 </td>    <td> topBorder - 上边界线宽 </td></tr>
<tr><td> leftBorderColor - 左边界线色 </td><td> topBorderColor - 上边界线色 </td></tr>
<tr><td> leftBorderStyle - 左边界线型 </td><td> topBorderStyle - 上边界线型 </td></tr>
<tr><td> isCheckbox - 是否为复选框 </td><td> isChecked - 复选框是否选上 </td></tr>
<tr><td> checkboxGroup - 单选框的组名 </td><td> HRef - 超链接 </td></tr>
<tr><td> maskId - 显示掩码Id </td><td> Tip - 鼠标划过的提示 </td></tr>
<tr><td> droplistId - 下拉字典Id </td><td> droplistPara - 下拉参数 </td></tr>
<tr><td> Arrow - 左侧标记色 </td><td> indent - 文字左侧缩进量 </td></tr>
<tr><td> crosstabRowDir - 交叉表的行值 </td><td> crosstabColDir - 交叉表的列值 </td></tr>
<tr><td> dispText - 单元格强制显示内容 </td><td> ImageArrange - 以图片显示时的缩放模式 </td></tr>
<tr><td colspan=2> rightButton - 单元格右侧的图标的URL, 当鼠标划过时会显示, 鼠标点击时将触发Clicked事件, 如图:<br><img src='image/report14.png'/> 建议采用相对路径(相对于报表XML), 并采用有透明效果的 ico 或 png格式 </td></tr>
<tr><td colspan=2 bgColor="#EEEEEE"> 如下是上报模式的属性: </td></tr>
<tr><td> Attr - 指标属性 </td><td> taborder - 回车的跳转次序 </td></tr>
<tr><td colspan=2 bgColor="#EEEEEE"> 此外，如果是含有内嵌表格的报表(上报模式)，还可以获得如下属性: </td></tr>
<tr><td> EmbedTableId - 内嵌表格的id </td><td> EmbedTableColName - 所处的列的列名 </td></tr>
<tr><td> EmbedTableColDataType - 列的数据类型 </td><td> EmbedTableHideColInfo - 各个隐藏列的数据，格式是 "列名=值;列名=值"</td></tr>
<tr><td> EmbedTableColEditAble - 列是否可编辑 </td><td> EmbedTableColUpdateAble - 列是否上报 </td></tr>
</table>
</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>内容串(透明的背景色用“T”表示)</td></tr>
  <tr><td align=right>备注1</td><td colspan=2>也可以将行、列参数合并成一个参数：单元名，如B7、K11； 或者是单元格的别名、或文本框的别名；也可以在后面跟随宏@sheet(如 B7@sheet2 表示第二个工作表的B7单元格)</td></tr>
  <tr><td align=right>备注2</td><td colspan=2>参数也可以是以冒号(:)分隔的单元格范围，如 A3:D5 , 用于一次性返回多个单元格的内容，返回的内容串中，行之间以回车符(\r\n)分隔、列之间以制表符(\t)分隔</td></tr>
</table>
<br>

<div id="TagFuncTableSetCellProp(用途1)"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>SetCellProp(用途1)</td><td class="funcTD">设置某单元格的属性(包括自定义属性)</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableSetCellProp(用途1)"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>行号(从0开始计数)</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>列号(从0开始计数)，或列名(如 A、K、AC)</td></tr>
  <tr><td align=right>参数3</td><td colspan=2>属性名, 和GetCellProp( )同</td></tr>
  <tr><td align=right>参数4</td><td colspan=2>值串<br>
注1: 透明的背景色请用“T”表示;<br>
注2: 对于自定义属性，空串表示删除该属性.
</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>备注</td><td colspan="2">1.也可以将行、列参数合并成一个参数：单元名，如B7、K11； 或者是单元格的别名、或文本框的别名；也可以在后面跟随宏@sheet(如 B7@sheet2 表示第二个工作表的B7单元格);<br>
2.也支持同时处理多个单元格，单元格名以逗号(,)分隔、且支持以冒号(:)分隔2个单元格名的矩形区域，请参见下面的示例;<br>
3.也支持同时处理多个属性，相互之间以分号(;)分隔，格式类似 "prop1=value1; prop2=value2" 这样的，请参见下面的示例<br>
4.如果 js 循环执行多遍时发现性能下降(界面很卡)，可以试试 SetRedrawAble 函数;</td></tr>
  <tr class="example"><td align=right>示例</td><td colspan=2>AF.func("SetCellProp", "C6 \r\n BgColor  \r\n T");<br>
AF.func("SetCellProp", "C6 \r\n TextColor  \r\n Red");<br>
AF.func("SetCellProp", "C6 \r\n CustormerID \r\n 33801");  //自定义属性<br>
AF.func("SetCellProp", "C6,D7,A3:A10,MyTh \r\n TextColor  \r\n Red");  //同时设置多个单元格，注："MyTh"是某个单元格的别名<br>
AF.func("SetCellProp", "C6 \r\n TextColor=Red; CustomerId=33801");  //同时设置多种属性<br>
AF.func("SetCellProp", "C6,D7,A3:A10,MyTh \r\n TextColor=Red; CustomerId=33801");  //同时设置多个单元格、多种属性</td></tr>
</table>
<br>

<div id="TagFuncTableGetCellUserProps"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetCellUserProps</td><td class="funcTD">取得某单元格的全部自定义属性名</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableGetCellUserProps"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>行号(从0开始计数)</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>列号(从0开始计数)，或列名(如 A、K、AC)</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>以回车分隔的自定义属性名</td></tr>
  <tr><td align=right>备注</td><td colspan=2>1.也可以将行、列参数合并成一个参数：单元名，如B7、K11； 或者是单元格的别名、或文本框的别名；也可以在后面跟随宏@sheet(如 B7@sheet2 表示第二个工作表的B7单元格);<br>
2.要取得具体属性的值，请用 GetCellProp 函数.
</td></tr>
</table>
<br>

<div id="TagFuncTableGetCellFont"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetCellFont</td><td class="funcTD">取得单元格的字体信息</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableGetCellFont"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>行号(从0开始计数)</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>列号(从0开始计数)，或列名(如 A、K、AC)</td></tr>
  <tr><td align=right>参数3</td><td colspan=2>属性名, 可以为: FontName(或 Name、FaceName)、Height(或size，但含义不一样)、Bold三种</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>按参数返回内容，参数和返回值对应如下:<br>
<b>FontName</b>(或 Name、FaceName) - 返回字体名，例如"Arial" 、 "微软雅黑"; <br>
<b>Height (或size)</b> - 返回字体大小, height表示返回logfont的lfHeight， 可能为负数; size表示返回转换后的大小，肯定是正数 <br>
<b>Bold</b> - 字体是否加粗, 返回1或0</td></tr>
  <tr><td align=right>备注1</td><td colspan=2>1.也可以将行、列参数合并成一个参数：单元名，如B7、K11； 或者是单元格的别名、或文本框的别名；也可以在后面跟随宏@sheet(如 B7@sheet2 表示第二个工作表的B7单元格);<br>
2.该功能是存取单元格字体的快捷功能，以1.0.90.0版前的版本中，通常需要执行GetCellProp、GetFont多条js才能实现;<br>
3.也适用于有别名的文本框对象</td></tr>
  <tr><td align=right>备注2</td><td colspan=2>参数1和参数2也可以合并成以冒号(:)分隔的单元格范围，如 A3:D5 , 用于一次性返回多个单元格的内容，返回的内容串中，行之间以回车符(\r\n)分隔、列之间以制表符(\t)分隔</td></tr>
  <tr class="example"><td align=right>示例</td><td colspan=2>var h = AF.func("getCellFont", "C6 \r\n size");<br>
var h = AF.func("getCellFont", "D3:E6 \r\n size");</td></tr>
  </table>
<br>

<div id="TagFuncTableSetCellFont"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>SetCellFont</td><td class="funcTD">设置单元格的字体信息</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableSetCellFont"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>行号(从0开始计数)</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>列号(从0开始计数)，或列名(如 A、K、AC)</td></tr>
  <tr><td align=right>参数3</td><td colspan=2>属性名, 可以为: FontName(或 Name、FaceName)、Height(或size)、Bold三种</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>1/0 - 成功/失败</td></tr>
  <tr><td align=right>备注</td><td colspan=2>1.请参见上面的 GetCellFont 函数, 但参数 Height/Size 是无差别的，系统能自动判断高度是正数还是负数;<br>
2.该功能是存取单元格字体的快捷功能，以1.0.90.0版前的版本中，通常需要执行SetCellProp、SetFont多条js才能实现;<br>
3.也适用于有别名的文本框对象;<br>
4.如果 js 循环执行多遍时发现性能下降(界面很卡)，可以试试 SetRedrawAble 函数;</td></tr>
  <tr class="example"><td align=right>示例</td><td colspan=2>AF.func("setCellFont", "C6 \r\n size \r\n 26");</td></tr>
</table>
<br>

<div id="TagFuncTableFindCell"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>FindCell</td><td class="funcTD">根据表达式查找单元格</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableFindCell"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>为标准的表达式串，表达式中可以包含如下变量:<br>
<b>data</b> - 表示输入的内容或计算结果<br>
<b>text</b> - 单元格上实际显示的文字<br>
<b>formula</b> - 输入的公式<br>
<b>alias</b> - 别名<br>
<b>isProtected</b> - 是否保护<br>
<b>textColor</b> - 文字颜色<br>
<b>backColor</b> 或 <b>bgColor</b> - 背景色, 'T'表示无背景色(即透明)<br>
<b>droplistId</b> - 下拉输入的字典Id<br>
<b>droplistName</b> - 下拉输入的字典名<br>
<b>其它变量名</b> - 表示自定义属性.</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>以逗号分隔的单元名，如"D3"、"K2,K4"</td></tr>
  <tr class="example"><td align=right>示例</td><td colspan=2>AF.func("FindCell", "left(formula,1)='='");  //取得所有输入了公式的单元格<br>
AF.func("FindCell", "left(alias, 3)='mpc'));  //取得别名以“mpc”开头的单元格<br>
AF.func("FindCell", "isProtected=1 && price=33");  //自定义属性"price"为33、同时被设置了保护的单元格<br>
AF.func("FindCell", "textColor='#ff0000' || bgColor=='T'");  //注：颜色常量, 必须按照例子中的写法，如'#FF0000'、'T'(表示透明背景)，不得使用 red、blue这些<br>
AF.func("FindCell", "droplistName='省份'");  //用到'省份'字典的单元格<br>
</td></tr>
</table>
<br>

<div id="TagFuncTableCloneArea"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>CloneArea</td><td class="funcTD">克隆某个区域到一个新的区域</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableCloneArea"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>左上单元格行号(从0开始计数)</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>左上单元格列号(从0开始计数)，或列名(如 A、K、AC)</td></tr>
  <tr><td align=right>参数3</td><td colspan=2>右下单元格行号(从0开始计数)</td></tr>
  <tr><td align=right>参数4</td><td colspan=2>右下列号(从0开始计数)，或列名(如 A、K、AC)</td></tr>
  <tr><td align=right>参数5</td><td colspan=2>格式为 : row=[?];col=[?],  row、col至少要定义一个，含义为:<br>
row - 克隆到从该行开始的新区域，如果行不够，则自动向下扩展;<br>
col - 克隆到从该列开始的新区域，如果列不够，则自动向右扩展;<br>
</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>新区域的左上角、右下角单元格名，以冒号(:)分隔。如果是空串，则表示失败，失败原因通常是参数有错误、区域有交集</td></tr>
  <tr><td align=right>备注</td><td colspan=2>1.也可以将行、列参数合并成一个参数：单元名，如B7、K11； 或者是单元格的别名;<br>
2.新、原区域不得有交集;
</td></tr>
  <tr class="example"><td align=right>示例</td><td colspan=2>如下函数是同一个意思：<br>AF.func("CloneArea", "C6:F7 \r\n row=30");<br>AF.func("CloneArea", "C6 \r\n F7 \r\n row=30");<br>AF.func("CloneArea", "5 \r\n 2 \r\n 6 \r\n 5 \r\n row=30");</td></tr>
</table>
<br>

<div id="TagFuncTableGetCellStatus"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetCellStatus</td><td class="funcTD">取得某单元格的状态</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableGetCellStatus"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>行号(从0开始计数)</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>列号(从0开始计数)，或列名(如 A、K、AC)</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>A - 普通单元格; <br> H - 被合并; <br> M - 被合并，但位于合并区的左上角，是有效的主单元格; <br> 空串 - 该单元格不存在</td></tr>
  <tr><td align=right>备注</td><td colspan=2>也可以将行、列参数合并成一个参数：单元名，如B7、K11； 或者是单元格的别名；也可以在后面跟随宏@sheet(如 B7@sheet2 表示第二个工作表的B7单元格)</td></tr>
</table>
<br>

<div id="TagFuncTableGetMainCell"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetMainCell</td><td class="funcTD">取得某单元格所在的合并区域中的主单元格(即左上角单元格)</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableGetMainCell"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>行号(从0开始计数)</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>列号(从0开始计数)，或列名(如 A、K、AC)</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>单元格名。如果本单元格没有被合并，则返回本单元格名</td></tr>
  <tr><td align=right>备注</td><td colspan=2>也可以将行、列参数合并成一个参数：单元名，如B7、K11； 或者是单元格的别名；也可以在后面跟随宏@sheet(如 B7@sheet2 表示第二个工作表的B7单元格)</td></tr>
</table>
<br>

<div id="TagFuncTableGetMergedCells"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetMergedCells</td><td class="funcTD">取得某单元格所在的合并区域</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableGetMergedCells"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>行号(从0开始计数)</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>列号(从0开始计数)，或列名(如 A、K、AC)</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>以“:”分隔的左上角和右下角的单元名。如果本单元格没有被合并，则返回本单元格名</td></tr>
  <tr><td align=right>备注</td><td colspan=2>也可以将行、列参数合并成一个参数：单元名，如B7、K11； 或者是单元格的别名；也可以在后面跟随宏@sheet(如 B7@sheet2 表示第二个工作表的B7单元格)</td></tr>
</table>
<br>

<div id="TagFuncTableMerge"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>Merge</td><td class="funcTD">合并单元格</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableMerge"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>左上单元格行号(从0开始计数)</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>左上单元格列号(从0开始计数)，或列名(如 A、K、AC)</td></tr>
  <tr><td align=right>参数3</td><td colspan=2>右下单元格行号(从0开始计数)</td></tr>
  <tr><td align=right>参数4</td><td colspan=2>右下列号(从0开始计数)，或列名(如 A、K、AC)</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>备注</td><td colspan=2>也可以将行、列参数合并成一个参数：单元名，如B7、K11； 或者是单元格的别名；也可以在后面跟随宏@sheet(如 B7@sheet2 表示第二个工作表的B7单元格)</td></tr>
  <tr class="example"><td align=right>示例</td><td colspan=2>如下函数是同一个意思：<br>AF.func("Merge", "C6:F7");<br>AF.func("Merge", "C6 \r\n F7");<br>AF.func("Merge", "5 \r\n 2 \r\n 6 \r\n 5");</td></tr>
</table>
<br>

<div id="TagFuncTableDeMerge(用法1)"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>DeMerge(用法1)</td><td class="funcTD">解除指定区域的合并</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableDeMerge(用法1)"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>左上单元格行号(从0开始计数)</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>左上单元格列号(从0开始计数)，或列名(如 A、K、AC)</td></tr>
  <tr><td align=right>参数3</td><td colspan=2>右下单元格行号(从0开始计数)</td></tr>
  <tr><td align=right>参数4</td><td colspan=2>右下列号(从0开始计数)，或列名(如 A、K、AC)</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>备注</td><td colspan=2>也可以将行、列参数合并成一个参数：单元名，如B7、K11； 或者是单元格的别名；也可以在后面跟随宏@sheet(如 B7@sheet2 表示第二个工作表的B7单元格)</td></tr>
  <tr class="example"><td align=right>示例</td><td colspan=2>如下函数是同一个意思：<br>AF.func("deMerge", "C6:F7");<br>AF.func("deMerge", "C6 \r\n F7");<br>AF.func("deMerge", "5 \r\n 2 \r\n 6 \r\n 5");</td></tr>
</table>
<br>

<div id="TagFuncTableDeMerge(用法2)"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>DeMerge(用法2)</td><td class="funcTD">解除某个单元格所在区域的合并</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableDeMerge(用法2)"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>单元格行号(从0开始计数)</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>单元格列号(从0开始计数)，或列名(如 A、K、AC)</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>备注</td><td colspan=2>也可以将行、列参数合并成一个参数：单元名，如B7、K11； 或者是单元格的别名; 也可以在后面跟随宏@sheet(如 B7@sheet2 表示第二个工作表的B7单元格)</td></tr>
  <tr class="example"><td align=right>示例</td><td colspan=2>AF.func("deMerge", "C6");</td></tr>
</table>
<br>

<div id="TagFuncTableMergeSame(用途1)"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>MergeSame(用途1)</td><td class="funcTD">合并某行给定范围内相同内容的单元格</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableMergeSame(用途1)"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>格式为：row=[?];col1=[?];col2=[?];isIgnoreNull=[?]，含义为：<br>
<b>row</b>  - 某行的行号<br>
<b>col1</b>  - 开始列号或类似A,B,C的列名，默认是0<br>
<b>col2</b>  - 结束列号或类似A,B,C的列名，默认是次末列<br>
<b>isIgnoreNull</b>  - 内容为空是否就不合并了，true/false，默认是true<br>
<b>isDemergeFirst</b>  - 合并前是否先解除覆盖了该范围的以前的合并，true/false，默认是true<br>
<b>isKeepMergeAsPossible</b>  - 如果新的合并区横贯了以前的合并区，是否把以前的合并区拆分为二段，true/false，默认是false, 只有在isDemergeFirst=false时才能生效<br>
</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
</table>
<br>

<div id="TagFuncTableMergeSame(用途2)"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>MergeSame(用途2)</td><td class="funcTD">合并某列给定范围内相同内容的单元格</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableMergeSame(用途2)"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>格式为：col=[?];row1=[?];row2=[?];isIgnoreNull=[?];isDemergeFirst=[?]，含义为：<br>
<b>col</b>  - 列号或类似A,B,C的列名<br>
<b>row1</b>  - 开始行的行号，默认是0; 也可以是串“ds”, 表示仅合并数据源的填入行<br>
<b>row2</b>  - 结束行的行号，默认是次末行; 也可以是串“ds”, 表示仅合并数据源的填入行<br>
<b>isIgnoreNull</b>  - 内容为空是否就不合并了，true/false，默认是true<br>
<b>isDemergeFirst</b>  - 合并前是否先解除覆盖了该范围的以前的合并，true/false，默认是true<br>
<b>isKeepMergeAsPossible</b>  - 如果新的合并区横贯了以前的合并区，是否把以前的合并区拆分为二段，true/false，默认是false, 只有在isDemergeFirst=false时才能生效<br>
</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
</table>
<br>

<div id="TagFuncTableMergeSame(用途3)"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>MergeSame(用途3)</td><td class="funcTD">多个列按大类、小类方式, 跨行合并相同内容的单元格</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableMergeSame(用途3)"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>格式为：col=[?];row1=[?];row2=[?];isIgnoreNull=[?];isDemergeFirst=[?]，含义为：<br>
<b>col</b>  - 多个列的列号或类似A,B,C的列名, 相互以逗号分隔<br>
<b>row1</b>  - 开始行的行号，默认是0; 也可以是串“ds”, 表示仅合并数据源的填入行<br>
<b>row2</b>  - 结束行的行号，默认是次末行; 也可以是串“ds”, 表示仅合并数据源的填入行<br>
<b>isIgnoreNull</b>  - 内容为空是否就不合并了，true/false，默认是true<br>
<b>isDemergeFirst</b>  - 合并前是否先解除覆盖了该范围的以前的合并，true/false，默认是true<br>
<b>isKeepMergeAsPossible</b>  - 如果新的合并区横贯了以前的合并区，是否把以前的合并区拆分为二段，true/false，默认是false, 只有在isDemergeFirst=false时才能生效<br>
</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
  <tr class="example"><td align=right>示例</td><td colspan=2>AF.func("MergeSame", "col = A,C,D; row1=ds; row2=ds");</td></tr>
</table>
<br>

<div id="TagFuncTableSplitCol"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>SplitCol</td><td class="funcTD">将某列分拆成多列，并自动合并同类项，分拆、合并的算法和树列表的 VColSep 算法完全一致</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableSplitCol"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>格式为：col=[?];row1=[?];row2=[?];VColSep=[?]，含义为：<br>
<b>col</b>  - 列号或类似A,B,C的列名<br>
<b>row1</b>  - 开始行的行号，默认是0<br>
<b>row2</b>  - 结束行的行号，默认是次末行<br>
<b>VColSep</b>  - 分隔符，含义和树列表的 VColSep 一致 <br>
</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
</table>
<br>

<div id="TagFuncTableGetValidCells"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetValidCells</td><td class="funcTD">取得某个区域内有效的单元格, 所谓“有效”是指不包括被合并的单元格</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableGetValidCells"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>左上单元格行号(从0开始计数)</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>左上单元格列号(从0开始计数)，或列名(如 A、K、AC)</td></tr>
  <tr><td align=right>参数3</td><td colspan=2>右下单元格行号(从0开始计数)</td></tr>
  <tr><td align=right>参数4</td><td colspan=2>右下列号(从0开始计数)，或列名(如 A、K、AC)</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>以逗号分隔的单元格名</td></tr>
  <tr><td align=right>备注</td><td colspan=2>也可以将行、列参数合并成一个参数：单元名，如B7、K11； 或者是单元格的别名；</td></tr>
  <tr class="example"><td align=right>示例</td><td colspan=2>如下函数是同一个意思：<br>var s = AF.func("GetValidCells", "C6:F7");<br>var s = AF.func("GetValidCells", "C6 \r\n F7");<br>var s = AF.func("GetValidCells", "5 \r\n 2 \r\n 6 \r\n 5");</td></tr>
</table>
<br>

<div id="TagFuncTableGetGraphics"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetGraphics</td><td class="funcTD">取得所有内嵌对象的别名</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableGetGraphics"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>可选，类型筛选，可以是如下类型的组合(逗号分隔)：Chart、Line、TextBox、Picture、Treelist, 分别表示统计图、线条、文本框、图片、树列表</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>别名串，多个别名之间以逗号分隔</td></tr>
</table>
<br>

<div id="TagFuncTableGetCellProp(用途2)"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetCellProp(用途2)</td><td class="funcTD">取得某内嵌对象的属性</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableGetCellProp(用途2)"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>内嵌对象的别名</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>属性名，不同的内嵌对象类型是有差别的，请参考XML文件，内嵌对象的属性有:<br>
<b>公共属性</b>：<br>
　type - 内嵌对象类型，返回值为Chart、Line、Textbox、Picture;<br>
　isPrint - 打印　　　　　　　isProtected - 保护　　　　　rect - 矩形区的坐标<br>
　isLocked - 锁定行列位置　　　unDragAbleAtRuntime - 运行时不可拖拽<br>
<b>文本框的属性</b>：<br>
　text - 文字或计算结果　　　　formula - 计算公式　　　　 fontIndex - 字体索引 <br>
　bgColor - 背景色　　　　　　textColor - 文字色　　　　　align/valign - 文字对齐 <br>
　dataType - 数据类型　　　　 isRound - 四舍五入　　　　　decimal - 小数位数 <br>
　isThousandSeparat - 千位符　maskid - 显示掩码　　　　　rect - 矩形坐标<br>
　charSpace - 字间距　　　　　lineDistance - 行间距　　　 isUnderLine - 边框仅画底边<br>
　borderThick - 边框粗　　　　borderColor - 边框色　　　　borderStyle - 边框风格<br>
　RoundX/RoundY - 圆角直径　　isNoZoom - 尺寸和打印比例无关<br>
　ImageArrange - 以图片显示时的缩放模式<br>
　rightButton - 文本框右侧的图标的URL, 当鼠标划过时会显示, 鼠标点击时将触发Clicked事件<br>
<b>图片的属性</b>：<br>
　isTransparent - 是否透明　　　blobid/picture - 图片　　　rect - 矩形坐标<br>
　borderThick - 边框粗　　　　 borderColor - 边框色　　　　borderStyle - 边框风格<br>
　RoundX/RoundY - 圆角直径 　　align/valign - 图片对齐　　isNoZoom - 尺寸和打印比例无关<br>
<b>统计图的属性</b>:<br>
　ChartType、items、textContent...等近20项，请参考统计图组件的<a href="chart.htm?62#Tag801" target=_blank>创建参数<a/>.<br>
<b>自定义属性</b>:<br>
　不在上述范围内的属性就都算是自定义属性.<br>
		</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>内容串</td></tr>
  <tr><td align=right>备注</td><td colspan=2>上述矩形坐标 rect 的格式为逗号分隔的4个值: x1,y1,x2,y2</td></tr>
</table>
<br>

<div id="TagFuncTableSetCellProp(用途2)"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>SetCellProp(用途2)</td><td class="funcTD">设置某内嵌对象的属性</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableSetCellProp(用途2)"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>内嵌对象的别名,  如果所有对象一次性全部设置, 则可以用星号(*)表示</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>属性名, 同上面的GetCellProp( )函数的属性</td></tr>
  <tr><td align=right>参数3</td><td colspan=2>值串</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>备注</td><td colspan=2>除了第一个参数必须为别名，其它方面请参见单元格的同名函数 <a href="#TagFuncTableSetCellProp(用途1)">SetCellProp(用途1)</a> 示例</td></tr>
</table>
<br>

<div id="TagFuncTableDeleteGraphics"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>DeleteGraphics</td><td class="funcTD">删除某些内嵌对象</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableDeleteGraphics"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>别名，如果要同时删除多个，请用逗号分隔</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>备注</td><td colspan=2>动态插入新的内嵌对象请用CallFunc函数</td></tr>
</table>
<br>

<div id="TagFuncTableChart_Refresh"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>Chart_Refresh</td><td class="funcTD">刷新统计图显示</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableChart_Refresh"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>别名，如果要同时刷新多个，请用逗号分隔； 空串或星号(*)表示刷新所有统计图</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
</table>
<br>

<div id="TagFuncTableGetWorksheets"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetWorksheets</td><td class="funcTD">取得工作表的个数</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableGetWorksheets"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>数字</td></tr>
</table>
<br>

<div id="TagFuncTableGetCurrentWorksheet"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetCurrentWorksheet</td><td class="funcTD">取得当前工作表序号</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableGetCurrentWorksheet"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>序号(从0开始计数)</td></tr>
</table>
<br>

<div id="TagFuncTableSetCurrentWorksheet"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>SetCurrentWorksheet</td><td class="funcTD">切换当前工作表</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableSetCurrentWorksheet"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>序号(从0开始计数)，或工作表名称</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>1/0 - 成功/失败</td></tr>
</table>
<br>

<div id="TagFuncTableGetWorksheetName"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetWorksheetName</td><td class="funcTD">取得工作表的名称</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableGetWorksheetName"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>序号(从0开始计数)</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>字符串</td></tr>
</table>
<br>

<div id="TagFuncTableSetWorksheetName"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>SetWorksheetName</td><td class="funcTD">修改工作表的名称</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableSetWorksheetName"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>序号(从0开始计数)，或工作表名称</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>新的名称</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>1/0 - 成功/失败</td></tr>
</table>
<br>

<div id="TagFuncTableDeleteWorksheet"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>DeleteWorksheet</td><td class="funcTD">删除工作表</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableDeleteWorksheet"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>序号(从0开始计数)，或工作表名称</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>1/0 - 成功/失败</td></tr>
</table>
<br>

<div id="TagFuncTableAppendWorksheet"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>AppendWorksheet</td><td class="funcTD">添加工作表：从外部报表导入</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableAppendWorksheet"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>报表的URL (也支持是 Excel 文件)、或者是报表的XML大串</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>可选，格式为 isOpenDialog=[?];isWithDS=[?];sheetNum=[?];sheetName=[?];isWithFormula=[?], 其含义如下：<br>
<b>isWithDS</b> - 是否连数据源一起导入, 默认是 true;<br>
<b>isOpenDialog</b> - 如果外部报表有多个工作表，是否打开对话框选择, 默认是 false;<br>
<b>sheetNum</b> - 逗号分隔的工作表序号, 例如 "0,3,5" 表示导入顺序号为0、3、4的工作表;<br>
<b>sheetName</b> - 逗号分隔的工作表名, 例如 "利润表, 资产负债表";<br>
<b>isWithFormula</b> - 是否导入计算公式, 仅用于导入 xlsx 或 xls 时, 默认是true;<br>
备注：sheetNum 和 sheetName 只能选其一, 不能同时生效; 如果不指定 sheetNum 和 sheetName, 也不打开对话框, 那么将导入全部工作表.
</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>1/0 - 成功/失败</td></tr>
  <tr class="example"><td align=right>示例</td><td colspan=2>AF.func("appendWorksheet", "../model1.xml \r\n isOpenDialog=true");<br>
AF.func("appendWorksheet", "../model1.xlsx \r\n sheetname=工作簿3, 工作簿22; isWithFormula=false");</td></tr>
</table>
<br>

<div id="TagFuncTableAddWorksheet"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>AddWorksheet</td><td class="funcTD">添加工作表：新建空的工作表</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableAddWorksheet"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>格式为：name=[?]; rows=[?];cols=[?]; rowheight=[?]; colwidth=[?], 含义如下：<br>
name - 工作表名;<br>
rows/cols - 总行数/列数，默认是100/20;<br>
rowheight/colwidth - 行高/列宽, 默认是24/140<br>
</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>1/0 - 成功/失败</td></tr>
  <tr class="example"><td align=right>示例</td><td colspan=2>AF.func("addWorksheet", "name=薪资;rows=5;cols=10");</td></tr>
</table>
<br>

<div id="TagFuncTableExchangeWorkSheet"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>ExchangeWorkSheet</td><td class="funcTD">工作表交换位置</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableExchangeWorkSheet"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>工作表1的序号(从0开始计数)，或工作表名称</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>工作表2的序号(从0开始计数)，或工作表名称， 如果为 -1, 表示将工作表1移到最末尾</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>1/0 - 成功/失败</td></tr>
  <tr class="example"><td align=right>示例</td><td colspan=2>AF.func("ExchangeWorksheet", "1 \r\n 3");</td></tr>
</table>
<br>

<div id="TagFuncTableGetWorksheetNameOfDS"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetWorksheetNameOfDS</td><td class="funcTD">取得某数据源指定用于某些工作表的名称</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableGetWorksheetNameOfDS"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>数据源ID</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>逗号分隔的工作表名</td></tr>
  <tr><td align=right>备注</td><td colspan=2>指定数据源用于某些工作表的功能，在数据源首个对话框中</td></tr>
</table>
<br>


<div id="TagFuncTableHideWorksheet"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>HideWorkSheet</td><td class="funcTD">工作表解除隐藏(即恢复显示)</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableHideWorksheet"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>可选, 无参数表示隐藏当前工作表, 如果有参数, 那么格式为 sheetName=[?];sheetNum=[?], 含义如下:<br>
<b>sheetName</b> - 工作表名, 如果要一次性隐藏多个工作表, 工作表名之间以逗号分隔<br>
<b>sheetNum</b> - 工作表序号(从0开始计数), 如果要一次性隐藏多个工作表, 序号之间以逗号分隔<br>
</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>1/0 - 成功失败</td></tr>
  <tr><td align=right>备注</td><td colspan=2>1.隐藏标记是保存在报表的XML中的;<br>2.参数 sheetName 和 sheetNum 只能二选一</td></tr>
  <tr class="example"><td align=right>示例</td><td colspan=2>AF.func("HideWorkSheet", "0,3");</td></tr>  
</table>
<br>

<div id="TagFuncTableUnhideWorksheet"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>UnhideWorkSheet</td><td class="funcTD">工作表解除隐藏(即恢复显示)</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableUnhideWorksheet"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>工作表名, 如果要一次性恢复多个工作表, 请以逗号分隔各个工作表名; 空串表示恢复全部工作表</td></tr>
  <tr><td align=right>参数</td><td colspan=2>可选, 格式为 locate = [?], 含义如下:<br>
<b>locate</b> - 恢复后将当前工作表切换到哪里, 可以是如下几种, 默认是 current:<br>
　　　　<b>current</b> - 保持不变;<br>
　　　　<b>first</b> - 切换到第一个被恢复的工作表;<br>
　　　　<b>工作表名</b> - 切换到某个表名的工作表;<br>
</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>1/0 - 成功失败</td></tr>
  <tr class="example"><td align=right>示例</td><td colspan=2>AF.func("UnhideWorkSheet", "\r\n locate=first");</td></tr>  
</table>
<br>


<div id="TagFuncTableGetHideWorksheet"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetHideWorkSheet</td><td class="funcTD">取得所有隐藏的工作表的表名</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableGetHideWorksheet"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>返回值</td><td colspan=2>逗号分隔的隐藏工作表的表名</td></tr>
  <tr><td align=right>备注</td><td colspan=2>隐藏标记是保存在报表的XML中的</td></tr>
</table>
<br>

<div id="TagFuncTableSetProp(用途1)"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>SetProp(用途1)</td><td class="funcTD">设置工作表的某些属性</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableSetProp(用途1)"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>格式为 "item1=value1;item2=value2;..." 的属性串，属性含义及可用值如下：<br>
注：“<img src='image/doc1.ico'>”图标表示该属性能随报表保存(即报表XML中有该属性), “<img src='image/doc2.ico'>”则为临时属性，和XML无关.<br><br>
<img src='image/doc1.ico'> <b>isRefOriPrecision</b> - true/false, 单元格之间的引用计算是否以原始精度为准;<br>
<img src='image/doc1.ico'> <b>isShowZero</b> - true/false, 计算结果为零时，是否显示0.00; <br>
<img src='image/doc1.ico'> <b>isUsingEditMask</b> - true/false, 是否启用单元格的数据类型校验; <br>
<img src='image/doc1.ico'> <b>isForGraphicObjectsOnly</b> - true/false, 是否以画文本框、线条等为主，不需要表格线; <br>
<img src='image/doc1.ico'> <b>isRowHeightAutoExtendAble</b> - true/false, 是否允许自动调整行高; <br>
<img src='image/doc1.ico'> <b>isRowHeightAutoExtendAfterRefreshed</b> - true/false, 从数据源加载数据后，是否立即自动调整行高; <br>
<img src='image/doc1.ico'> <b>LineDistance</b> - 像素数, 行距; <br>
<img src='image/doc1.ico'> <b>AutoBreakLine</b> - 0至3的数字, 文字超宽处理，0:自动换行、缩小字体，换行优先; 1:不处理; 2: 自动缩小字体、换行，缩小字体优先; 3: 自动换行，但不缩小字体;<br>
<img src='image/doc1.ico'> <b>Ellipsis</b> - 0:不显示省略号；1:显示省略号; <br>
<img src='image/doc1.ico'> <b>BackColor</b> - 背景色; <br>
<img src='image/doc1.ico'> <b>BackPicture 或 BackImage</b> - 背景图, 为一 URL， 空串表示清除背景图; <br>
<img src='image/doc1.ico'> <b>isTile</b> - true/false, 背景图的布局，分别表示铺满/单幅; <br>
<img src='image/doc1.ico'> <b>alpha</b> - 0到255的数字, 背景图的透明度，数字越小则越淡; <br>
<img src='image/doc1.ico'> <b>rotate</b> - 0到正负360的数字, 背景图的顺时针旋转角度，负数表示逆时针; <br>
<img src='image/doc1.ico'> <b>SectionDefine</b> - 串, 数据源数据按主键分拆的规则，请参见报表 xml 文件中的; &lt;Properties&gt;\&lt;Other&gt;中的同名属性 ; <br>
<br>
　　此外，也可以通过本函数更改某些独立于当前工作表(即对所有工作表都生效)的属性：<br>
<img src='image/doc2.ico'> <b>WorkMode</b> - 工作方式，请参见插件创建参数中的同名属性;<br>
<img src='image/doc2.ico'> <b>Ruler</b> - 显示或隐藏标尺，值为Horz/Vert，分别表示水平/垂直标尺，也可以是空串，或逗号分隔的组合;<br>
<img src='image/doc2.ico'> <b>LeftRulerWidthPercent</b> - 左标尺的宽度比例，0至500之间的数字, 含义是百分比;<br>
<img src='image/doc2.ico'> <b>toolbarVisible</b> - 显示/隐藏工具条，值为true/false;<br>
<img src='image/doc2.ico'> <b>PagesTabPercent</b> - 底部滑动条的左侧Tab区长度占总宽度的百分比，0到100, 含义是百分比;<br>
<img src='image/doc2.ico'> <b>PreviewWindow</b> - 打印预览窗口的位置 (含义请详见"1.创建实例");<br>
<img src='image/doc2.ico'> <b>PreviewButton</b> - 打印预览窗口中的4个按钮(含义请详见"1.创建实例");<br>
<img src='image/doc2.ico'> <b>PreviewButtonEnable</b> - 打印预览窗口中的4个按钮的状态(含义请详见"1.创建实例");<br>
<img src='image/doc1.ico'> <b>isAutoCalculateWhenOpen</b> - 报表打开时是否立即自动计算，值为true/false;<br>
<img src='image/doc1.ico'> <b>isSaveCalculateResult</b> - 报表保存时，是否连同数据源填入的数据一起保存，值为true/false;<br>
<img src='image/doc2.ico'> <b>isSheetDragAble</b> - true/false, 底部的工作表页签是否允许被鼠标拖拽交换位置;<br>
<img src='image/doc2.ico'> <b>UserDefinePropUIStyle</b> - 单元格的自定义属性, 在工具箱中的展现方式，0-不展现; 1-仅展现; 2-允许被修改;<br>
　　上述有些属性是“创建参数”.
		</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
</table>
<br>

<div id="TagFuncTableGetProp(用途1)"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetProp(用途1)</td><td class="funcTD">取得工作表的某些属性</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableGetProp(用途1)"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>属性名，参见函数SetProp( ). <br>
此外，参数 <b>Crosstab</b> 表示取得交叉表的XML串.
</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>属性的值</td></tr>
</table>
<br>

<div id="TagFuncTableGetProp(用途2)"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetProp(用途2)</td><td class="funcTD">取得工作表的交叉表、分类汇总配置XML</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableGetProp(用途2)"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>固定的串，为 crosstab 或 summary,  分别表示交叉表、分类汇总表</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>XML串</td></tr>
  <tr><td align=right>备注</td><td colspan=2>XML串较复杂，需要您对报表的XML文件中的 Crosstabs、Summaries 节点进行分析</td></tr>
</table>
<br>

<div id="TagFuncTableSetProp(用途2)"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>SetProp(用途2)</td><td class="funcTD">设置工作表的交叉表、分类汇总配置XML</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableSetProp(用途2)"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>固定的串，为 crosstab 或 summary,  分别表示交叉表、分类汇总表</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>XML串</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>备注</td><td colspan=2>XML串较复杂，需要您对报表的XML文件中的 Crosstabs、Summaries 节点进行分析</td></tr>
</table>
<br>

<div id="TagFuncTableGetMemo"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetMemo</td><td class="funcTD">取得某自由存储区的存储串</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableGetMemo"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>工作表顺序号(从0开始计数)，如果为空串，则表示是和工作表无关的的独立存储区</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>存储区的ID，为任意串，但不得含逗号</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>串</td></tr>
  <tr><td align=right>备注</td><td colspan=2>自由存储区的内容是保存在报表的XML中的</td></tr>
</table>
<br>

<div id="TagFuncTableSetMemo"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>SetMemo</td><td class="funcTD">设置某自由存储区的存储串</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableSetMemo"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>工作表顺序号(从0开始计数)，如果为空串，则表示是和工作表无关的的独立存储区</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>存储区的ID，为任意串，但不得含逗号</td></tr>
  <tr><td align=right>参数3</td><td colspan=2>要储存的任意串，空串表示删除该存储区</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>备注</td><td colspan=2>1.自由存储区的内容是保存在报表的XML中的;<br>2.书写 js 时请注意: <font color=red>不要在参数2和参数3之间留有多余空格</font>，否则空格也会保存到XML中去的</td></tr>
</table>
<br>

<div id="TagFuncTableGetMemos"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetMemos</td><td class="funcTD">取得自由存储区的所有ID</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableGetMemos"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>工作表顺序号(从0开始计数)，如果为空串，则表示是和工作表无关的的独立存储区</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>逗号分隔的存储区ID号</td></tr>
  <tr><td align=right>备注</td><td colspan=2>自由存储区的内容是保存在报表的XML中的</td></tr>
</table>
<br>



<div id="TagFuncTablePrint"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>Print</td><td class="funcTD">打印</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTablePrint"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>可选，格式为 isOpenSysDialog=[?]; WorkSheet=[?], 其含义和用法如下:<br>
<b>isOpenSysDialog</b> - true/false - 是否弹出操作系统的打印对话框, 默认是true。如果报表绑定了打印机(即打印配置对话框中的 “认定使用这台打印机” 选项被勾上), 本参数无效, 即不会弹出操作系统对话框的;<br>
<b>WorkSheet</b> - 工作表， 可以是如下几种:<br>
　　　　<b>OpenDialog</b> - 弹出对话框选择打印(如果多个工作表);<br>
　　　　<b>All</b> - 打印全部工作表(在报表“属性”中设为默认打印的所有工作表);<br>
　　　　<b>Current</b> - 打印当前工作表;<br>
　　　　<b>以逗号分隔的工作表名或工作表顺序号</b> - 打印指定的工作表;<br>
　　关于 WorkSheet 的默认值，如果是 Firefox 浏览器，默认值是 "All"; 否则普通报表是 "OpenDialog"、设成无缝打印的报表是"All"：
</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>1/0 - 成功/失败</td></tr>
  <tr><td align=right>备注</td><td colspan=2>
1.如果当前是在批打印中 (即在 BeginBatchPrint( ) 的循环中)， 上述参数无效;<br>
2.如果当前是在函数 OpenPrintDialog 触发的事件中, 上述参数无效;<br>
3.Firefox 浏览器的 WorkSheet 不能是 OpenDialog, 否则会因为对话框阻塞主线程而卡死，但 Firefox 对 isOpenSysDoalog 的操作系统对话框并无影响;<br>
</td></tr>
  <tr class="example"><td align=right>示例</td><td colspan=2>AF.func("Print", "isOpenSysDialog=false; WorkSheet=all");<br>
AF.func("Print", "WorkSheet=汇总表, 资金表");<br></td></tr>
</table>
<br>

<div id="TagFuncTableBeginBatchPrint"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>BeginBatchPrint</td><td class="funcTD">开始批打印</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableBeginBatchPrint"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>可选，格式为 StartPageNum=[?]; isMultiPrintTask=[?]; isShareBlankPart=[?]; isPreview=[?]; isOpenSysDialog=[?], 其含义如下:<br>
<b>StartPageNum</b> 或 <b>StartPageNumber</b>- 批中起始页码(任务中的总页码)， 默认是1;<br>
<b>isShareBlankPart</b> - 如果是名片式打印(即每张纸能均分成多块的打印)，是否共享前一张纸的空白部分，以节省打印纸，默认是false;<br>
<b>isPreview</b> - 是否用于预览，默认是false。如果 isPreview=false, 则还可以有如下2个选项;<br>
　　<b>isMultiPrintTask</b> - 是否按奇偶页拆分成2个打印任务打印，  默认是false;<br>
　　<b>isOpenSysDialog</b> - 打印前是否弹出操作系统的打印对话框, 默认是true;<br>
</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>备注</td><td colspan=2>1.批打印常用于<b>同一个模板、多批数据</b>的集中打印;<br>
2.在批中也允许多个模板的打印(通过 Build 切换模板)，但请尽量使用相同的打印配置参数，否则有可能会导致失败;<br>
3.从调用该函数开始，后面调用Print( )函数打印的都归并在单个任务中，直至调用EndBatchPrint( )才将这个任务送往打印机，所以打印速度较快;<br>
4.如果分奇偶页打印，打印任务自动分拆成2个：奇页任务和偶页任务，调用EndBatchPrint( )后，将先打印奇页，软件会弹出对话框“正在打印奇数页，按'是'将开始打印偶数页...”，待用户换好纸张即打印偶页;<br>
5.如果您希望在报表中能打印出在批中的页码，请在报表的表达式中使用 pageBatch( )计算函数;</td></tr>
  <tr class="example"><td align=right>示例</td><td colspan=2>AF.func("Build", "reports/aax.xml");   //打开模板<br>
AF.func("BeginBatchPrint", "isShareBlankPart=true");  //开始批打印<br>
for( ... )  {  //通常是循环<br>
　AF.func("SetSource", "ds1 \r\n abc.aspx?mon=" + mon);  //设置查询取数条件<br>
　AF.func("Calc", "");    //填充数据<br>
　AF.func("Print", "");  //在批中，该函数并没有实际的打印动作，并且也不需要参数，但该步骤必不可少<br>
}<br>
AF.func("EndBatchPrint", "");   //终止批打印：把打印任务送往打印机，此时才真正打印</td></tr>
</table>
<br>

<div id="TagFuncTableEndBatchPrint"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>EndBatchPrint</td><td class="funcTD">结束批打印，将打印任务发送给打印机</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableEndBatchPrint"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
</table>
<br>

<div id="TagFuncTableGetProp(用途3)"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetProp(用途3)</td><td class="funcTD">取得工作表的打印配置属性</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableGetProp(用途3)"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>固定的串，为 Print 或 Printer</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>XML串</td></tr>
  <tr><td align=right>备注</td><td colspan=2>1.打印属性比较复杂，需要您对报表的XML文件中的 PrintPage 节点进行分析;<br>
2.返回的XML串内容不多，因为默认的设置就不出现在XML中了;<br>
3.PaperNumber是打印纸号，请参考本文档“附录4.打印纸对照表”</td></tr>
</table>
<br>

<div id="TagFuncTableSetProp(用途3)"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>SetProp(用途3)</td><td class="funcTD">设置工作表的打印配置属性</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableSetProp(用途3)"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>固定的串，为 Print 或 Printer</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>XML串</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>备注</td><td colspan=2>更改打印参数，需要借助全局函数中的DOM函数集</td></tr>
  <tr class="example"><td align=right>示例</td><td colspan=2>//如下例子是把打印纸的左边界修改为10毫米：<br>
var xml=AF.func("GetProp", "Print");<br>
var hDOM = AF.func("dom_new", xml);  //创建DOM对象<br>
var hMargin = AF.func("dom_find", hDOM + "\r\n margin");   //查找节点<br>
AF.func("dom_SetProp", hMargin + "\r\n  left  \r\n  10");   //设置<br>
xml = AF.func("dom_export", hDOM);  //输出xml<br>
AF.func("SetProp", "Print \r\n" + xml);  //完成<br>
AF.func("dom_delete", hDOM);  //销毁对象</td></tr>
</table>
<br>

<div id="TagFuncTableGetPrintProp"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetPrintProp</td><td class="funcTD">取得工作表的某些常用的打印配置属性</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableGetPrintProp"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>属性名, 可用的属性及返回值列举如下:<br>
  <b>Printer</b> - 打印机名;<br>
  <b>PaperNumber</b> - 打印纸号, 纸号请参考本文档“附录4.打印纸对照表”;<br>
  <b>Oriantation</b> - 纸的方向, 返回值 Portrait/Landscape 分别表示垂直/横向走纸;<br>
  <b>Scale</b> - 打印的缩放比例, 10到400之间的纯数字;<br>
  <b>AutoScale</b> - 自动缩放, 空串(或false)/NoEnlarge/AutoFit 分别表示不自动缩放/自动缩小但不放大/自动缩放使打印纸满幅显示;<br>
  <b>Copies</b> - 打印份数, 大于0的纯数字;<br>
  <b>Margin</b> - 纸的边距, 逗号分隔的左上右下, 单位为毫米;<br>
  <b>Duplex</b> - 支持双面打印的打印机, 双面打印模式, 空串(或false)/Simplex/Vertical/Horizontal 分别表示 仍然以单面打印/简单的双面打印/用于垂直翻页的双面打印/用于横向翻页的双面打印;<br>
  <b>isPrintBothSide</b> - 打印奇偶页时是否交换左右边距, true/false;<br>
  <b>PrintColor</b> - 彩色打印方式, Device/BW 分别表示采用打印设备所具备的色彩能力打印/强制黑白打印;<br>
  </td></tr>
  <tr><td align=right>返回值</td><td colspan=2>属性的值</td></tr>
  <tr><td align=right>备注</td><td colspan=2>本函数是出于使用方便的目的，列举了最常用的属性项，其它属性还是要通过 GetProp(用途3) 去获取的</td></tr>
</table>
<br>

<div id="TagFuncTableSetPrintProp"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>SetPrintProp</td><td class="funcTD">设置工作表的某些常用的打印配置属性</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableSetPrintProp"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>分号分隔的名-值对, 可用属性名请看前面的 GetPrintProp 函数。 例如: <br>Printer=HP JetColor; paperNumber=9; Oriantation=landscape</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>备注</td><td colspan=2>本函数是出于使用方便的目的，列举了最常用的属性项，其它属性还是要通过 SetProp(用途3) 去更改的</td></tr>
</table>
<br>

<div id="TagFuncTableGetPrintPages"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetPrintPages</td><td class="funcTD">取得打印的总页数</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableGetPrintPages"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>数字</td></tr>
  <tr><td align=right>备注</td><td colspan=2>预估当前工作表如果需要打印，需要多少页纸</td></tr>
</table>
<br>

<div id="TagFuncTableSetPrintPage"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>SetPrintPage</td><td class="funcTD">指定下次打印时，具体打印哪些页</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableSetPrintPage"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>逗号分隔的页号, 页号从1开始计数，也可以以减号(-)分隔起止页</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>备注</td><td colspan=2>该设置是一次性的，打印完就会自动清除</td></tr>
  <tr class="example"><td align=right>示例</td><td colspan=2>AF.func("SetPrintPage", "5,9,24-26");</td></tr>
</table>
<br>

<div id="TagFuncTableSetItemLibraryURL"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>SetItemLibraryURL</td><td class="funcTD">设定指标库的URL，用于上报模式的设计时(运行时通常不需要执行)</td><td align="right" style="border-left:0px;"><img src="image/documentg.bmp" title="请参见演示页: 52.指标库">&nbsp;&nbsp;<a href="#func_TagFuncTableSetItemLibraryURL"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>URL, 或XML串，其格式请参见Report文档</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
</table>
<br>

<div id="TagFuncTableSetItemAttr"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>SetItemAttr</td><td class="funcTD">动态修改指标的属性的值</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableSetItemAttr"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>诸如 "attr1=value1; attr2=value2; attr3=value3"这样的名-值对.</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>可选，别名(即指标名)，表示范围仅限于该类指标; 如果为空，表示对所有单元格、凡是含这些属性的值统一设置.</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>被修改的单元格个数</td></tr>
</table>
<br>

<div id="TagFuncTableGetUploadXML"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetUploadXML</td><td class="funcTD">用于报表的汇总上报模式(WorkMode=UploadRuntime)，取得当前填入内容的XML串</td><td align="right" style="border-left:0px;"><img src="image/documentg.bmp" title="请参见演示页: 51.填写与申报阶段">&nbsp;&nbsp;<a href="#func_TagFuncTableGetUploadXML"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>可选，格式为 isCurrent=[?];isIncludeCellName=[?];isIncludeDispText=[?];includeAlias=[?];excludeAlias=[?], 含义如下:<br>
<b>isCurrent</b> - 当报表有多个TabOrder方案时，是否仅上报当前方案, 默认true<br>
<b>isIncludeCellName</b> - 生成的数据中是否包含单元格名, 默认true<br>
<b>isIncludeDispText</b> - 生成的数据中是否包含 DispText 属性内容, 默认true (属性 "DispText" 请参见 GetCellProp 函数);<br>
<b>isIncludeHRef</b> - 生成的数据中是否包含单元格的 HRef 属性内容, 即超链接内容, 默认true;<br>
<b>isIncludeCheckboxText</b> - 单元格如果是 Checkbox,是否连同右侧的文字也一起提交, 如果一起提交，那么该指标的内容将以  "|" 分隔 checkbox 的值和右侧的文字，例如 "1|男"，左边肯定是 0 或 1。本选项默认false;<br>
<b>includeAlias</b> - 仅上报某些别名(即指标),多个别名之间以逗号分隔, 也允许到星号(*)通配符;<br>
<b>excludeAlias</b> - 排除上报某些别名(即指标),多个别名之间以逗号分隔, 也允许到星号(*)通配符;<br>
<b>isChangedOnly</b> - 仅上报被改动过的单元格的内容, 确切地说, 是指上次调用 ResetChanged 函数到现在, 期间有改动的单元格;<br>
</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>XML串, 如果返回 "0"，表示报表中的内嵌Treelist对象未通过验证</td></tr>
  <tr><td align=right>备注</td><td colspan=2>1.仅用于创建参数为WorkMode=UploadRuntime时;<br>
2.参数 includeAlias 和 excludeAlias 不能同时使用</td></tr>
  <tr class="example"><td align=right>示例</td><td colspan=2>AF.func("getUploadXML", "includeAlias=MPS1, MPS2, KKS*, KKD*; isIncludeCellName=false");</td></tr>
</table>
<br>

<div id="TagFuncTableSetUploadXML"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>SetUploadXML</td><td class="funcTD">加载已上报的数据，用于报表的显示</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableSetUploadXML"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>URL, 或XML串，其格式须和GetUploadXML( )返回的XML一致 (但不需要 Cell="?" 内容)</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>可选，格式为 autoCalc=asynch/synch/none, 表示执行完加载后立即自动执行一遍计算，asynch表示异步计算; synch是同步计算; none表示不需要计算， 默认是asynch</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
  <tr class="example"><td align=right>示例</td><td colspan=2>AF.func("setUploadXML", "../getxml.do?id=332 \r\n autoCalc=none");</td></tr>
</table>
<br>

<div id="TagFuncTableGetUploadIndex"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetUploadIndex</td><td class="funcTD">取得当前采用了多个TabOrder方案中的哪一个，用于上报运行时</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableGetUploadIndex"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>顺序号，从0开始计数</td></tr>
</table>
<br>

<div id="TagFuncTableSetUploadIndex"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>SetUploadIndex</td><td class="funcTD">指定采用多个TabOrder方案中的某一个，用于上报运行时</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableSetUploadIndex"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>顺序号，从0开始计数</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
</table>
<br>

<div id="TagFuncTableGetUploadNames"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetUploadNames</td><td class="funcTD">取得所有TabOrder方案的名称</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableGetUploadNames"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>以回车分隔的串。如果只有单个方案，返回串有可能是空串</td></tr>
</table>
<br>

<div id="TagFuncTableGetUploadCells"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetUploadCells</td><td class="funcTD">取得有TabOrder的单元名</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableGetUploadCells"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>可选，方案的顺序号, 空串或-1表示当前方案，默认是空串</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>以逗号分隔的单元名(如果有文本框，则为文本框的别名)串</td></tr>
</table>
<br>

<div id="TagFuncTableSelectCell(用途2)"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>SelectCell(用途2)</td><td class="funcTD">用于上报运行时，直接打开第一个可输入的单元格的输入框</td><td align="right" style="border-left:0px;"><img src="image/documentg.bmp" title="请参见演示页: 51.填写与申报阶段">&nbsp;&nbsp;<a href="#func_TagFuncTableSelectCell(用途2)"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
</table>
<br>

<div id="TagFuncTableRebuildTabOrder"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>RebuildTabOrder</td><td class="funcTD">重新整理、刷新所有 Taborder</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableRebuildTabOrder"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>备注</td><td colspan=2>通常用于个别单元格的 TabOrder 被外部函数更改过以后</td></tr>
</table>
<br>

<div id="TagFuncTableResetChanged"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>ResetChanged</td><td class="funcTD">合并修改内容，为以后调用 GetChangedCells( ) 作准备.</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableResetChanged"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>可选，格式为 range=[?], 其含义为: <br>
<b>range</b> - 工作表范围，值可以为：<br>
　　full - 表示全部工作表，默认;<br>
　　current - 仅当前工作表；<br>
</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
</table>
<br>

<div id="TagFuncTableGetChangedCells"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetChangedCells</td><td class="funcTD">取得所有被修改过的单元格.</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableGetChangedCells"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>以逗号分隔的单元名</td></tr>
  <tr><td align=right>备注</td><td colspan=2>必须在之前执行过 ResetChanged( ) 函数才能生效.</td></tr>
</table>
<br>

<div id="TagFuncTableCollectXML"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>CollectXML</td><td class="funcTD">获取某些单元格的公式、内容</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableCollectXML"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>需要获取的单元格的条件，条件为范围、背景色或别名，格式为 Range=[?];BackColor=[?];alias=[?], 解释如下：<br>
<b>Range</b> - 单元格范围, 比如 "A1:D4", 默认是整个工作表;<br>
<b>BackColor</b> - 背景色, 比如 "#00ff00", 如果不指定，表示不作为条件;<br>
<b>alias</b> - 别名, 允许包含星号(*), 其含义是通配符.<br>
注: BackColor 和 alias 是 “或” 的关系; 而 Range 和它们是 “与” 的关系.</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>XML串</td></tr>
  <tr class="example"><td align=right>示例</td><td colspan=2>//取得所有单元格中, 红色背景色的单元格数据<br>
AF.func("CollectXML", "BackColor=red");<br>
<br>
//取得 D3:Z111 范围内, 红色背景色的单元格数据<br>
AF.func("CollectXML", "Range=D3:Z111; BackColor=red");<br>
<br>
//取得 D3:Z111 范围内，所有单元格的数据<br>
AF.func("CollectXML", "Range=D3:Z111");<br>
</td></tr>
</table>
<br>

<div id="TagFuncTableGetChangedXML"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetChangedXML</td><td class="funcTD">取得数据源填充区内容的XML串</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableGetChangedXML"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>可选, 可以有如下的选项，相互以分号分隔：<br>
<b>ds</b> - 数据源ID, 表示取得该数据源的 "=datarow( )" 函数所在单元格的数据源填充区内容;<br>
<b>cell</b> - 单元格的别名，表示该单元格肯定包含 "=datarow( )" 的函数，并取得数据源填充区内容;<br>
　　备注：<b>ds</b> 和 <b>cell</b> 不能同时使用，否则优先采用 <b>ds</b>.<br>
<b>DateFormat</b> - 日期的格式，默认是'%Y.%m.%d'，可参见<a href="pub02.htm#TagFuncTablenow" target=_blank>公共内容中now( )函数</a>的参数;<br>
<b>DateTimeFormat</b> - 日期时间的格式，默认是'%Y.%m.%d %H:%M:%S'，可参见<a href="pub02.htm#TagFuncTablenow" target=_blank>公共内容中now( )函数;</a>的参数<br>
<b>includeCol / excludeCol</b> - 仅包含某些列/不包含某些列，二者可选其一，表示列的<b>范围</b>. 列名之间以逗号分隔。默认是空串，表示提交所有列;<br>
　　备注：这个“列名”是指数据源中的列名.<br>
<b>自定义属性</b> - 任意属性串，将附加到XML根节点处<br>
</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>XML大串 - 成功;<br>空串 - 未发现数据源;<br></td></tr>
  <tr><td align=right>备注</td><td colspan=2>
1.通常需要在 <b>WorkMode=InputDSRunTime</b> 工作模式下使用，如果不在这个模式下，结果有可能会不正确;<br>
2.在 InputDSRunTime 工作模式下，只要指定 ds 参数就行, 不建议使用 Cell 参数; 如果报表只有一个 "=datarow( )" 函数， ds参数都可以省略;<br>
3.在其它工作模式下, 取数范围是以含 "=datarow( )" 函数单元格作为左上角的数据源填充区;<br>
</td></tr>
  <tr class="example"><td align=right>示例</td><td colspan=2>//取得当前工作表中唯一的数据源填充区内容<br>
AF.func("GetChangedXML", "");<br>
//取得当前工作表中 'ds1' 数据源填充区内容<br>
AF.func("GetChangedXML", "ds=ds1");<br>
//同上，但XML串含附加信息<br>
AF.func("GetChangedXML", "ds=ds1; org=1001;Uid=330102");</td></tr>
</table>
<br>

<div id="TagFuncTableSwkrntpomzqa"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>Swkrntpomzqa</td><td class="funcTD">限制某些交互功能 (也可写作 SetLimit )</td><td align="right" style="border-left:0px;"><img src="image/documentg.bmp" title="请参见演示页: 6.自动计算">&nbsp;&nbsp;<a href="#func_TagFuncTableSwkrntpomzqa"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>可包含如下、以逗号分隔的串:<br>　1 －公式修改权<br>　2 －非公式的修改权 <br>　3 －内容复制权 <br>
　4 －格式修改权(如行高列宽、字体、对齐、隐藏等)，也可分拆成: <br>
　　　4a － 行高列宽调整权<br>
　　　4b － 行列隐藏权<br>
　　　4c － 行列取消隐藏权<br>
　　　4d － 除行高列宽、行列隐藏、取消隐藏外的其它格式调整权<br>
　8 －行列增删权, 也可拆分成：<br>
　　　256 －行增删权<br>
　　　512 －列增删权<br>
　16－被保护的单元的内容修改权<br>　32－平衡校验修改权<br>
　64－数据源修改权，也可拆分成：<br>
　　　64a －新建数据源权<br>
　　　64d －删除数据源权<br>
　　　64m －修改数据源权<br>
　128－工作表的增删权<br></td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>备注</td><td colspan=2>1.在上报模式的运行时(workMode=UploadRunTime)，不完全遵照这个限制;<br>
2.权限仅限制交互操作，不限制API调用;<br>
3.权限是不写入报表 XML 中的，不会随报表保存;</td></tr>
  <tr class="example"><td align=right>示例</td><td colspan=2>AF.func("Swkrntpomzqa", "1, 2");  //所有单元格内容不得修改<br>
AF.func("Swkrntpomzqa", "1, 16, 512");  //公式不得修改、被保护的单元格不得修改、列不得增删</td></tr>
</table>
<br>

<div id="TagFuncTableaddEditAbleOnly"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>addEditAbleOnly</td><td class="funcTD">添加可编辑的单元格范围，除了这些单元格，其它单元格都不得修改</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableaddEditAbleOnly"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>可包含如下格式的串: level=[?]; [cell=?]; [cellArea=?]; [fixedCell=?]; [fixedCellArea=?]; [alias=?]; [aliasArea=?]; [bgColor=?]; [droplist]; [checkbox], 含义即语法如下:  <br>
　level － top/normal, "top" 表示独立增加权限，且级别最高，不受其它权限函数影响, 默认是normal;<br>
　cell － 单元格名(有多个则以逗号分隔)，如"A5, B4, D4";<br>
　fixedCell － 同上，但位置是固定的，不受行列增删影响;<br>
　cellArea － 以":"分隔的2个单元格名，表示左上角到右下角的矩形区域，如“B2:D5”;<br>
　fixedCellArea － 同上，但位置是固定的，不受行列增删影响;<br>
　alias － 别名(有多个则以逗号分隔)，可以含 * 的通配符;<br>
　aliasArea － 以":"分隔的2个别名，表示左上角到右下角的矩形区域，如“Tag12:Tag33”;<br>
　bgColor － 某种背景色的单元格(多个背景色之间以逗号分隔), 如“red, blud, #334400”，T 表示无背景色(透明);<br>
　droplist － 凡是下拉的单元格;<br>
　checkbox － 凡是Checkbox的单元格;<br>
　arrow － 左侧标记色，多个颜色之间以逗号分隔;<br>
</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>备注</td><td colspan=2>当 level = normal 时: <br>
　　1.独立于 Swkrntpomzqa( )，但和 Swkrntpomzqa( ) 同时生效，语义上有冲突时Swkrntpomzqa( )优先;<br>
　　2.和 AddUnEditAbleOnly( )函数是互斥的，即调用AddUnEditAbleOnly( )函数后以前的设置将失效.<br>
　　3.只能执行一遍， 如果再次执行，以前的 level=normal 的设置将失效.<br>
当 level = top 时: <br>
　　1.等级高于 Swkrntpomzqa( )；<br>
　　2.允许执行多遍，设置的权限都将被保持，和其它  AddEditAbleOnly( ) / AddUnEditAbleOnly( )函数不互斥，等级仍然保持最高.<br>
</td></tr>
  <tr class="example"><td align=right>示例</td><td colspan=2>AF.func("addEditAbleOnly", "cellArea=B3:B5, D3:D5; alias=KK*");  //仅如下范围的单元格可以编辑: B3:B5之间的单元格、 D3:D5之间的单元格、或别名以"KK"开头的单元格<br>
AF.func("addEditAbleOnly", "droplist; checkbox; bgColor=black");  //除了下拉的、Checkbox的、或黑色背景的单元格可编辑，其它单元格都不可编辑</td></tr>
</table>
<br>

<div id="TagFuncTableaddUnEditAbleOnly"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>addUnEditAbleOnly</td><td class="funcTD">添加不可编辑的单元格范围，除了这些单元格不可修改，其它单元格都是可以修改的</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableaddUnEditAbleOnly"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>同AddEditAbleOnly函数</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>备注</td><td colspan=2>同AddEditAbleOnly函数</td></tr>
</table>
<br>

<div id="TagFuncTableGetCellEditAble"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetCellEditAble</td><td class="funcTD">判断某单元是否有编辑权限</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableGetCellEditAble"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>行号(从0开始计数)</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>列号(从0开始计数)，或列名(如 A、K、AC)</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>1/0 - 有/无</td></tr>
  <tr><td align=right>备注</td><td colspan=2>也可以将行、列参数合并成一个参数：单元名，如B7、K11； 或者是单元格的别名、或文本框的别名；也可以在后面跟随宏@sheet(如 B7@sheet2 表示第二个工作表的B7单元格)</td></tr>
  <tr class="example"><td align=right>示例</td><td colspan=2>var isAble = AF.func("getCellEditAble", "3 \r\n 9");<br>
var isAble = AF.func("getCellEditAble", "B7");<br>
var isAble = AF.func("getCellEditAble", "MyTh");   //"MyTh"是别名</td></tr>
</table>
<br>

<div id="TagFuncTableAddUserFunctions"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>AddUserFunctions</td><td class="funcTD">添加自定义函数的声明</td><td align="right" style="border-left:0px;"><img src="image/documentg.bmp" title="请参见演示页: 10.自定义函数">&nbsp;&nbsp;<a href="#func_TagFuncTableAddUserFunctions"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>XML文档，或XML大串。参数为空表示清除所有自定义函数</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
</table>
<br>

<div id="TagFuncTableRemoveUserFunctions"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>RemoveUserFunctions</td><td class="funcTD">清除自定义函数</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableRemoveUserFunctions"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>1/0 - 已清除/未发现自定义函数</td></tr>
</table>
<br>

<div id="TagFuncTableSetBatchFunctionURL"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>SetBatchFunctionURL</td><td class="funcTD">指定批处理自定义函数的URL地址</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableSetBatchFunctionURL"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>URL，绝对或相对</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>可选，格式例如： "Functions=500;TimeOut=999", 其中 Functions 表示每一批中最多函数个数，默认100， TimeOut 表示 http 请求响应的超时，单位是秒</td></tr>
  <tr><td align=right>参数3</td><td colspan=2>可选，附加参数，为任意格式的字符串，最终该串将附在发送的XML串中，供后端程序使用</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>备注1</td><td colspan=2>参数为空表示清除该地址</td></tr>
  <tr><td align=right>备注2</td><td colspan=2>关于选项 Functions, 表示每批最多函数数量的限制，但它不代表每一批都能达到这个数量，实际上每一批的函数数量是和包含自定义函数的单元格总数有关, 假如您一共有　100　个单元格, 单元格公式都是这种：<br>
　　　　=myfunc1( ) + myfunc2( ) + myfunc3( )<br>
　　报表控件内部的计算逻辑处理程序，将会把函数分成 3 批提交、每批中含有 100 个函数, 哪怕你将 Functions 设成 100000, 每批中也只能含 100 个函数.
  </td></tr>
  <tr class="example"><td align=right>示例</td><td colspan=2>AF.func("SetBatchFunctionURL", "inne/procf.aspx \r\n functions=50;timeout=9999 \r\n user=normal");</td></tr>
</table>
<br>

<div id="TagFuncTableSetAutoCalc"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>SetAutoCalc</td><td class="funcTD">在键盘输入过程中、复制粘帖过程中，通常能触发自动计算，但如果报表太大（即单元格太多）、某些函数运行速度太慢的话，自动计算会影响性能，影响到操作的流畅程度，为此可以按条件设定，是否自动关闭这个自动计算功能。</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableSetAutoCalc"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>格式为 maxCells=[?];UserFunction=[?];RefOtherReport=[?]，均为可选，含义如下:<br>
<b>maxCells</b> - 单元格数量阀值，一旦单元格总数超过这个数目，就不触发自动计算, 0 相当于彻底关闭自动计算. 系统内部初始数值是10000(1万);<br>
<b>UserFunction</b> - 自定义函数是否允许被触发， 0/1 (或true/false). 系统内部初始值是true;<br>
<b>RefOtherReport</b> - 引用其它工作表的函数(ref)是否允许被触发0/1 (或true/false). 系统内部初始值是true</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>备注</td><td colspan=2>1.自动计算选项是一个全局开关，对整个进程都生效的;<br>2.本函数仅影响键盘动作导致的自动计算，对显式调用计算函数、对工具栏的计算按钮等并无影响</td></tr>
  <tr class="example"><td align=right>示例</td><td colspan=2>AF.func("SetAutoCalc", "userfunction=false");  //表示仅关闭自定义函数的自动计算</td></tr>
</table>
<br>

<div id="TagFuncTableGetAutoCalc"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetAutoCalc</td><td class="funcTD">取得自动计算选项，请参见 SetAutoCalc 函数</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableGetAutoCalc"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>可以为:<br><b>maxCells</b> - 自动计算的单元格数量阀值, 返回值是数量<br>
  <b>UserFunction</b> - 自定义函数是否允许被触发, 返回值是 1 或 0, 1表示允许<br>
  <b>RefOtherReport</b> - 引用其它工作表的函数(ref)是否允许被触发, 返回值是 1 或 0, 1表示允许</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>和参数有关.<br>如果参数为空，则返回值可能是诸如 "maxCells=1000;UserFunction=1;RefOtherReport=0" 这样的串</td></tr>
  <tr class="example"><td align=right>示例</td><td colspan=2>var cells = AF.func("GetAutoCalc", "maxCells");</td></tr>
</table>
<br>

<div id="TagFuncTableGetLastCalcError"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetLastCalcError</td><td class="funcTD">取得上次计算错误信息 (即计算信息框中的提示内容)、或未通过数据验证的Validation的ID号</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableGetLastCalcError"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>Validation - 表示取上次未通过数据验证的Validation的ID，多个ID之间以逗号分隔；<br>其它串 - 上次普通的错误提示</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>串</td></tr>
</table>
<br>

<div id="TagFuncTableSetHoldDSData"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>SetHoldDSData</td><td class="funcTD">在计算后, 设置数据源是否仍然保持数据</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableSetHoldDSData"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>true/false</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>备注</td><td colspan=2>1.在默认情况下，在每次完成计算后，数据源是不再保持自身数据的，以释放内存; <br>
2.如果你希望在 js 中直接读取数据源中的数据，则应该将其设为 true，请参见下例;<br>
3.如果你不执行AF.func("SetHoldDSData", "true")， 你会发现 AF.func("data", "ds1 \r\n 1 \r\n 1") 依然能取得数据，事实上它是再次访问后端数据源的，效率较低;<br>
4.如果报表的公式中包含了 search( ) 函数，那么在计算过程中系统将会自动执行本函数；</td></tr>
  <tr class="example"><td align=right>示例</td><td colspan=2>AF.func("Build", "../report/report33.xml");<br>
AF.func("SetHoldDSData", "true");<br>
AF.func("Calc", "");<br>
//如下 "data" 函数能直读数据源中的数据，请参见全局函数中的 “<a href="globalfunction.htm#g6" target=_blank>5.对表达式和计算函数的封装</a>”<br>
var s = AF.func("data", "ds1 \r\n 1 \r\n 1");</td></tr>
</table>
<br>

<div id="TagFuncTableGetHoldDSData"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetHoldDSData</td><td class="funcTD">在计算后, 数据源是否仍然保持数据</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableGetHoldDSData"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>1 / 0 - 是/否</td></tr>
</table>
<br>

<div id="TagFuncTableChart_DeleteAllSeries"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>Chart_DeleteAllSeries</td><td class="funcTD">清除所有系列</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableChart_DeleteAllSeries"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>统计图别名</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
</table>
<br>

<div id="TagFuncTableChart_GetSeriesCount"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>Chart_GetSeriesCount</td><td class="funcTD">取得系列数</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableChart_GetSeriesCount"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>统计图别名</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>数字</td></tr>
</table>
<br>

<div id="TagFuncTableChart_GetSeriesName"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>Chart_GetSeriesName</td><td class="funcTD">取得某系列的名称</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableChart_GetSeriesName"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>统计图别名</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>顺序号，从0开始计数</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>串，空串表示已经到达末尾</td></tr>
</table>
<br>

<div id="TagFuncTableChart_SetSeriesName"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>Chart_SetSeriesName</td><td class="funcTD">系列的增删改操作</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableChart_SetSeriesName"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>统计图别名</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>顺序号，从0开始计数</td></tr>
  <tr><td align=right>参数3</td><td colspan=2>系列名. 空串表示删除这个系列；如果不存在则添加；如果已经存在则修改系列名</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
</table>
<br>

<div id="TagFuncTableChart_GetItemNames"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>Chart_GetItemNames</td><td class="funcTD">取得所有数据项的名称</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableChart_GetItemNames"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>统计图别名</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>以逗号分隔的数据项名</td></tr>
</table>
<br>

<div id="TagFuncTableChart_GetItemName"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>Chart_GetItemName</td><td class="funcTD">取得某数据项的名称</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableChart_GetItemName"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>统计图别名</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>顺序号，从0开始计数</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>数据项名</td></tr>
</table>
<br>

<div id="TagFuncTableChart_SetItemNames"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>Chart_SetItemNames</td><td class="funcTD">设置全部数据项的名称</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableChart_SetItemNames"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>统计图别名</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>以逗号分隔的数据项名</td></tr>
  <tr><td align=right>参数3</td><td colspan=2>可选，true/false - 重构统计图/不重构，默认是true</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
</table>
<br>

<div id="TagFuncTableChart_SetItemName"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>Chart_SetItemName</td><td class="funcTD">设置某个数据项的名称</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableChart_SetItemName"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>统计图别名</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>顺序号，从0开始计数</td></tr>
  <tr><td align=right>参数3</td><td colspan=2>数据项名</td></tr>
  <tr><td align=right>参数4</td><td colspan=2>可选，true/false - 重构统计图/不重构，默认是true</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
</table>
<br>

<div id="TagFuncTableChart_GetValues"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>Chart_GetValues</td><td class="funcTD">取得某系列的全部数值</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableChart_GetValues"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>统计图别名</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>系列名，或系列的顺序号. 如果只有一个系列，那么可以是空串或任意串</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>以逗号分隔的值</td></tr>
</table>
<br>

<div id="TagFuncTableChart_GetValue"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>Chart_GetValue</td><td class="funcTD">取得某系列的某个数值</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableChart_GetValue"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>统计图别名</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>系列名，或系列的顺序号. 如果只有一个系列，那么可以是空串或任意串</td></tr>
  <tr><td align=right>参数3</td><td colspan=2>数据项的顺序号，或数据项名</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>值</td></tr>
</table>
<br>

<div id="TagFuncTableChart_SetValues"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>Chart_SetValues</td><td class="funcTD">设置某系列的全部数值</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableChart_SetValues"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>统计图别名</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>系列名，或系列的顺序号. 如果只有一个系列，那么可以是空串或任意串</td></tr>
  <tr><td align=right>参数3</td><td colspan=2>以逗号分隔的值, 值可以是数值、单元名、别名</td></tr>
  <tr><td align=right>参数4</td><td colspan=2>可选，true/false - 重构统计图/不重构，默认是true</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
</table>
<br>

<div id="TagFuncTableChart_SetValue"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>Chart_SetValue</td><td class="funcTD">设置某系列的某个数值</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableChart_SetValue"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>统计图别名</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>系列名，或系列的顺序号. 如果只有一个系列，那么可以是空串或任意串</td></tr>
  <tr><td align=right>参数3</td><td colspan=2>数据项的顺序号，或数据项名</td></tr>
  <tr><td align=right>参数4</td><td colspan=2>值, 值可以是数值、单元名、别名</td></tr>
  <tr><td align=right>参数5</td><td colspan=2>可选，true/false - 重构统计图/不重构, 默认是true</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
</table>
<br>

<div id="TagFuncTableDroplists_Get"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>Droplists_Get</td><td class="funcTD">取得所有下拉字典</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableDroplists_Get"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>name 或 id, 表示返回字典名 或 字典的id号</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>以逗号分隔的串</td></tr>
</table>
<br>

<div id="TagFuncTableDroplists_GetHandle"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>Droplists_GetHandle</td><td class="funcTD">取得某个下拉字典的句柄</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableDroplists_GetHandle"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>字典名 或 字典的id号</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>句柄串，空串表示该字典不存在</td></tr>
  <tr><td align=right>备注</td><td colspan=2>取得看句柄后，可以使用全局函数中的 “下拉List管理函数” 访问字典数据</td></tr>
</table>
<br>

<div id="TagFuncTableDroplists_FindCells"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>Droplists_FindCells</td><td class="funcTD">取得当前工作表中使用了某个下拉字典的所有单元格</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableDroplists_FindCells"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>字典名 或 字典的id号</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>以逗号分隔的单元格名</td></tr>
</table>
<br>

<div id="TagFuncTableDroplists_Delete"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>Droplists_Delete</td><td class="funcTD">删除某个下拉字典</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableDroplists_Delete"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>字典名 或 字典的id号</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>可选，true-绝对删除, false - 如果有单元格使用了该字典就不删除, 默认是true</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>1/0 - 成功/失败</td></tr>
</table>
<br>

<div id="TagFuncTableDroplists_Add"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>Droplists_Add</td><td class="funcTD">动态添加下拉字典</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableDroplists_Add"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>语法串</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>新增字典的id号, 0表示失败，失败原因可能为name重复</td></tr>
  <tr class="example"><td align=right>示例</td><td colspan=2>
AF.func("Droplists_Add", "name=kk1;dataURL=../getDict.aspx");<br>
AF.func("Droplists_Add", "name=kk2;dataURL=&lt;items&gt;&lt;item key=1&gt;男&lt;/item&gt;&lt;item key=2&gt;女&lt;/item&gt;&lt;/items&gt;");<br>
AF.func("Droplists_Add", "name=kk3;treelistURL=customer.xml; DataCol=id; DisplayCol=name");</td></tr>
</table>
<br>

<div id="TagFuncTableMasks_Get"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>Masks_Get</td><td class="funcTD">取得所有显示掩码的id</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableMasks_Get"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>掩码的id，相互以逗号分隔</td></tr>
</table>
<br>

<div id="TagFuncTableMask_Get"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>Mask_Get</td><td class="funcTD">取得某个显示掩码的表达式</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableMask_Get"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>ID号</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>表达式</td></tr>
</table>
<br>

<div id="TagFuncTableMask_Delete"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>Mask_Delete</td><td class="funcTD">删除某个显示掩码</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableMask_Delete"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>ID号</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>1/0 - 成功/失败</td></tr>
</table>
<br>

<div id="TagFuncTableMask_Add"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>Mask_Add</td><td class="funcTD">添加一个显示掩码</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableMask_Add"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>数据类型，可以是 string, int, double, date, datetime</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>表达式</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>ID号</td></tr>
  <tr><td align=right>备注</td><td colspan=2>如果该掩码表达式已经存在，则返回原ID号</td></tr>
  <tr class="example"><td align=right>示例</td><td colspan=2>var id = AF.func("Mask_Add", "string \r\n =formatNum(data, '￥#,##0.00')");<br>
var id = AF.func("Mask_Add", "string \r\n =picture()");   //添加图片显示掩码<br>
var id = AF.func("Mask_Add", "string \r\n =barcode(33,0,0,0)");   //添加二维码显示掩码</td></tr>
</table>
<br>

<div id="TagFuncTableMask_FindCells"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>Mask_FindCells</td><td class="funcTD">取得当前工作表中使用了某个显示掩码的单元格</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableMask_FindCells"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>ID号</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>以逗号分隔的单元格名、或文本框的别名</td></tr>
</table>
<br>

<div id="TagFuncTableSetToolbarItemImage"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>SetToolbarItemImage</td><td class="funcTD">动态更改工具条中某按钮的图标</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableSetToolbarItemImage"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>功能号</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>图标文件的URL，如果是相对路径，则相对于当前页面</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>1 / 0 - 成功 / 失败</td></tr>
</table>
<br>

<div id="TagFuncTableSetToolbarItemTip"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>SetToolbarItemTip</td><td class="funcTD">动态更改工具条中某按钮的Tip (鼠标滑过时的文字)</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableSetToolbarItemTip"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>功能号</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>文字串</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>1 / 0 - 成功 / 失败</td></tr>
</table>
<br>

<div id="TagFuncTableGetToolbarItemStatus"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetToolbarItemStatus</td><td class="funcTD">取得工具条中某按钮/菜单项的状态</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableGetToolbarItemStatus"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>功能号 (如果是自定义项，必须大于等于3000)</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>可用状态，为 Enable、Visible、Check</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>1 / 0</td></tr>
  <tr><td align=right>备注</td><td colspan=2>1.enable决定按钮或菜单是否灰色显示(disable);<br>
2.visible决定是否让该按钮/菜单项出现;<br>
3.check比较特殊，如果是按钮，必须是style="checkBox"类型的，决定按钮的凹陷状态；如果是菜单，则会在菜单左侧打一个勾</td></tr>
</table>
<br>

<div id="TagFuncTableSetToolbarItemStatus"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>SetToolbarItemStatus</td><td class="funcTD">动态更改工具条中某按钮/菜单项的状态</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableSetToolbarItemStatus"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>功能号 (如果是自定义项，必须大于等于3000)</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>可用状态，为 Enable、Visible、Check</td></tr>
  <tr><td align=right>参数3</td><td colspan=2>true / false</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>1 / 0 - 成功 / 失败</td></tr>
  <tr><td align=right>备注</td><td colspan=2>1.enable决定按钮或菜单是否灰色显示(disable);<br>
2.很多按钮是和报表内部动作关联的, 比如功能号为 104 的按钮(保存), 其状态始终会自动变化, 你要改变它的状态，也只能是暂时的;<br>
3.visible决定是否让该按钮/菜单项出现;<br>
4.check比较特殊，如果是按钮，必须是style="checkBox"类型的，决定按钮的凹陷状态；如果是菜单，则会在菜单左侧打一个勾</td></tr>
</table>
<br>

<div id="TagFuncTableAddMenu"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>AddMenu</td><td class="funcTD">增加自定义的弹出菜单项</td><td align="right" style="border-left:0px;"><img src="image/documentg.bmp" title="参见演示页: 9.自定义右键菜单">&nbsp;&nbsp;<a href="#func_TagFuncTableAddMenu"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>串、XML串，或URL，内容的格式规范请参考“7.自定义菜单”</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>可选，格式为LocateAt=[top/bottom], 表示自定义菜单在弹出时位于顶部还是底部，默认是bottom</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>备注</td><td colspan=2>只能在OnEvent(id, "MenuBeforePopup", ...)事件中执行。</td></tr>
</table>
<br>

<div id="TagFuncTableAddHotKey"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>AddHotKey</td><td class="funcTD">增设快捷键。快捷键将触发HotKey事件</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableAddHotKey"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>第一个快捷键，可以是F1至F12、字母、数字、或键的AscII码，也可再加Ctrl、Shift、Alt的组合，以'+'分隔.</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>可选，第二个快捷键，以此类推.</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>备注</td><td colspan=2>1.并不是所有键都能用作快捷的，受制于浏览器，您需要逐个测试;<br>2.快捷键将触发 HotKey 事件</td></tr>
  <tr class="example"><td align=right>示例</td><td colspan=2>AF.func("AddHotKey", "F12 \r\n Ctrl+F4 \r\n Ctrl+Shift+S \r\n Alt+5 \r\n Ctrl+32");<br>
分别表示了5个快捷键：F12、Ctrl+F4、Ctrl+Shift+S、Alt+5、Ctrl+空格(空格的AscII码是32)</td></tr>
</table>
<br>


<div id="TagFuncTableEnableUndo"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>EnableUndo</td><td class="funcTD">启用或禁用Undo，允许人为关闭或开启 Undo 功能</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableEnableUndo"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>true/false - 启用/禁用</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
</table>
<br>
<div id="TagFuncTableIsUndoEnabled"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>IsUndoEnabled</td><td class="funcTD">Undo功能是否启用中</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableIsUndoEnabled"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>1 / 0 - 启用/禁用</td></tr>
</table>
<br>
<div id="TagFuncTableEnableRedo"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>EnableRedo</td><td class="funcTD">启用或禁用Redo，允许人为关闭或开启 Redo 功能</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableEnableRedo"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>true/false - 启用/禁用</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
</table>
<br>
<div id="TagFuncTableIsRedoEnabled"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>IsRedoEnabled</td><td class="funcTD">Redo功能是否启用中</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableIsRedoEnabled"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>1 / 0 - 启用/禁用</td></tr>
</table>
<br>

<div id="TagFuncTableUndo"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>Undo</td><td class="funcTD">执行一步 Undo 操作</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableUndo"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>1 / 0 - 成功/失败, 失败的原因通常是 Undo 池已空</td></tr>
</table>
<br>

<div id="TagFuncTableRedo"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>Redo</td><td class="funcTD">执行一步 Redo 操作</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableRedo"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>1 / 0 - 成功/失败, 失败的原因通常是 Undo 池已空</td></tr>
</table>
<br>

<div id="TagFuncTableSaveUndo"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>SaveUndo</td><td class="funcTD">将当前状态保存入 Undo 池</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableSaveUndo"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
</table>
<br>
<div id="TagFuncTableResetUndo"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>ResetUndo</td><td class="funcTD">清空 Undo 缓存池</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableResetUndo"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
</table>
<br>

<div id="TagFuncTableUndoAble"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>UndoAble</td><td class="funcTD">根据 Undo 缓存池, 判断是否可执行 Undo 操作</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableUndoAble"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>1 / 0 - 是/否</td></tr>
</table>
<br>
<div id="TagFuncTableRedoAble"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>RedoAble</td><td class="funcTD">根据 Undo 缓存池, 判断是否可执行 Redo 操作</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableRedoAble"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>1 / 0 - 是/否</td></tr>
</table>
<br>

<div id="TagFuncTableGetRedrawAble"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetRedrawAble</td><td class="funcTD">是否能够重画</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableGetRedrawAble"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>1 / 0 - 能 / 不能</td></tr>
</table>
<br>

<div id="TagFuncTableSetRedrawAble"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>SetRedrawAble</td><td class="funcTD">设置让报表能够重画或不能重画。为了提高性能，在需要连续对报表作改动性操作(比如改数据、改属性)前关闭重画，操作完成后再开启重画.</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableSetRedrawAble"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>true/false - 能 / 不能</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
  <tr class="example"><td align=right>示例</td><td colspan=2>
 <pre class='cpp'>
//关闭屏幕重画 	
AF.func("SetRedrawAble", "false");
 //较大的循环, 需要执行很多遍 SetCellData、SetCellProp 之类的函数
 for(i=0; i&lt;ncount; i++) {
  ...
  AF.func("SetCellData", cellname + " \r\n 4");
 }
//恢复屏幕重画
AF.func("SetRedrawAble", "true");</pre>
</td></tr>
</table>
<br>

<div id="TagFuncTableFlashCell"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>FlashCell</td><td class="funcTD">开启或关闭单元格闪烁</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableFlashCell"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>行号(从0开始计数)</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>列号(从0开始计数)，或列名(如 A、K、AC)</td></tr>
  <tr><td align=right>参数3</td><td colspan=2>闪烁次数, 0表示无限</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>备注1</td><td colspan=2>也可以将行、列参数合并成一个参数：单元名，如B7、K11； 或者是单元格的别名、或文本框的别名</td></tr>
  <tr><td align=right>备注2</td><td colspan=2>无参数表示关闭闪烁, 包括复制后屏幕焦点处的闪烁</td></tr>
  <tr class="example"><td align=right>示例</td><td colspan=2>AF.func("FlashCell", "");  //关闭闪烁<br>
AF.func("FlashCell", "C6 \r\n 4");  //C6单元格闪烁4次<br>
AF.func("FlashCell", "C6:D9");  //不停歇地闪烁<br>
AF.func("FlashCell", "5 \r\n 2 \r\n 5 \r\n 8");  //同上</td></tr>
</table>
<br>


<div id="TagFuncTableCloseEdit"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>CloseEdit</td><td class="funcTD">强制关闭输入框</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableCloseEdit"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>true/false - 把输入框中的内容更新到单元格/废弃输入框的内容, 默认是 true</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>备注</td><td colspan=2>通常是焦点离开输入框，输入框自动就会关闭的，但有的场合下不一定能自动关闭</td></tr>  
</table>
<br>

<div id="TagFuncTableGetFont"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetFont</td><td class="funcTD">取得字体信息</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableGetFont"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>字体的索引号</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>该字体的XML串，如果字体不存在，则为空串</td></tr>
  <tr><td align=right>备注</td><td colspan=2>1.返回的XML串中, weight表示字体的粗细, 700是粗体, 400是常规;<br>
2.有另外的快捷函数取单元格的字体： GetCellFont</td></tr>
  <tr class="example"><td align=right>示例</td><td colspan=2>//假设您想知道A1单元格的字体，须先获得该单元格的字体索引号<br>
var FontIndex = AF.func("GetCellProp", "A1 \r\n fontIndex");<br>
//调用本函数<br>
var xml = AF.func("GetFont", FontIndex);<br>
//它返回的是诸如  "&lt;Font faceName='宋体' charSet='134' height='-19' weight='700'/&gt;" 这样的XML串<br>
<br>
//假如你希望得到的是 JSON 串，那就请进一步调用全局函数 toJson:<br>
var json = AF.func("toJson", xml + "\r\n recordSet");<br>
//它返回的是诸如  "{'faceName':'宋体', 'charSet':'134', 'height':'-19', 'weight':'700'}" 这样的串</td></tr>
</table>
<br>

<div id="TagFuncTableAddFont"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>AddFont</td><td class="funcTD">添加字体</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableAddFont"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>字体的XML串或Json串</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>字体的索引号</td></tr>
  <tr><td align=right>备注</td><td colspan=2>1.如果字体已经存在，则返回已经存在的索引号;<br>
2.有另外的快捷函数设置单元格的字体： SetCellFont</td></tr>
  <tr class="example"><td align=right>示例</td><td colspan=2>var FontIndex = AF.func("AddFont", "{'faceName':'宋体', 'charSet':'134', 'height':'-19', 'weight':'700'}");<br>
AF.func("SetCellProp", "A1 \r\n FontIndex \r\n" + FontIndex);</td></tr>
</table>
<br>

<div id="TagFuncTableDisplayAsPrintSetup"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>DisplayAsPrintSetup</td><td class="funcTD">将报表切换成仅显示打印配置对话框样式</td><td align="right" style="border-left:0px;"><img src="image/documentg.bmp" title="请参见演示页: 56.集中配置打印">&nbsp;&nbsp;<a href="#func_TagFuncTableDisplayAsPrintSetup"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>选项串，格式为 isNeedTitle=[?]; ok.Visible=[?]; ok.Text=[?]; cancel.Visible=[?]; cancel.Text=[?], 含义如下:<br>
<b>isNeedTitle</b> - 是否显示上方标题条, 默认是 true;<br>
<b>ok.Visible</b> - true/false, 是否显示“保存”按钮, 默认是 true;<br>
<b>ok.Text</b> - “保存”按钮上的文字;<br>
<b>cancel.Visible</b> - true/false, 是否显示“取消”按钮, 默认是 true;<br>
<b>cancel.Text</b> - “取消”按钮上的文字;<br>
</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>备注</td><td colspan=2>1.如果无参数，表示报表切换成原样(显示报表);<br>
2.整个显示区显示报表打印对话框(非模式);<br>
3.界面上默认有2个按钮：保存、取消;<br>
4.点击“取消”，随即退出该模式，还原成普通报表显示模式;<br>
5.点击“保存”，将立即把对话框配置内容更新到报表中，并触发PrintSetupBeforeUpdate、PrintSetupUpdate事件，不会退出对话框;<br>
6.如果执行 Build 函数打开新的报表，对话框内容也将自动刷新</td></tr>
</table>
<br>

<div id="TagFuncTableDisplayAsChart"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>DisplayAsChart</td><td class="funcTD">将报表切换成仅显示统计图</td><td align="right" style="border-left:0px;"><img src="image/documentg.bmp" title="请参见演示页: 41.统计图ImageFlow">&nbsp;&nbsp;<a href="#func_TagFuncTableDisplayAsChart"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>统计图的别名，如果有多个别名，以逗号分隔；也可以是带星号(*)的通配符, 表示符合条件的别名; 也可以是空串，表示所有统计图(没有别名的统计图将被临时分配一个别名).</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>freeform的URL或XML大串，该freeform必须包含一个ImageFlow对象</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>备注</td><td colspan=2>1.如果无参数，表示报表切换成原样(显示报表);<br>
2.报表包括工具条在内的整个区域全部切换成显示统计图;<br>
3.点击统计图的某个数据项区域，将会触发同样的report的统计图事件;<br>
4.alias别名和所处的工作表(WorkSheet)无关;<br>
5.freeform即“自由表头”，请参考相关资料;<br></td></tr>
</table>
<br>

<div id="TagFuncTableGetCurrentChart"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetCurrentChart</td><td class="funcTD">取得当前统计图(以显示统计图时)</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableGetCurrentChart"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>当前统计图别名。 如果报表中含有多工作表，则是类似 "mychart@sheet1"、"chart2@sheet2" 这种格式</td></tr>
  <tr><td align=right>备注</td><td colspan=2>仅用于在调用了DisplayAsChart函数后、以统计图显示时</td></tr>
</table>
<br>

<div id="TagFuncTableGetActiveWindow"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetActiveWindow</td><td class="funcTD">取得当前主区域的窗口句柄</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableGetActiveWindow"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>句柄串.</td></tr>
  <tr><td align=right>备注</td><td colspan=2>不太常用，常用于和第三方软件底层交互</td></tr>
</table>
<br>

<div id="TagFuncTableSetExportFilename"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>SetExportFilename</td><td class="funcTD">指定转换输出的文件名，通常用于 ExportDialog 事件</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableSetExportFilename"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>文件名，可以是带路径的全文件名，也可以不带路径</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>格式为 isOpenFileDialog=[?], 值可以是true/false, 表示是否打开后面的文件选择对话框，默认是True</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>无</td></tr>
  <tr><td align=right>备注</td><td colspan=2>如果 isOpenFileDialog=false、且文件名不带路径，那么文件将被生成到 "我的文档" 目录下</td></tr>
  <tr class="example"><td align=right>示例</td><td colspan=2>function OnEvent(id, Event, p1, p2, p3, p4)<br>
{<br>
　　if(Event == "ExportDialog" && p1 == "xlsx") {<br>
　　　　AF.func("SetExportFilename", "MyDoc.xlsx \r\n isOpenFileDialog=0");<br>
　　}<br>
}</td></tr>
</table>
<br>

<div id="TagFuncTableSetNavigator"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>SetNavigator</td><td class="funcTD">设置超链接的重定位，常用于服务器专版</td><td align="right" style="border-left:0px;"><img src="image/documentg.bmp" title="请参见移动应用的演示页: 4.体验四">&nbsp;&nbsp;<a href="#func_TagFuncTableSetNavigator"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>带 "@para" 宏的URL，超链接触发后，该宏将被替换成真实参数，并将页面转向该URL</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>无</td></tr>
</table>
<br>

<br><br><br>
<script type='text/javascript' src='nstd.js'></script>
</body></html>