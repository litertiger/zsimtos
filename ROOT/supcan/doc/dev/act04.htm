<HTML>
<head><title>4.原理</title>
<meta http-equiv="content-type" content="text/html; charset=gb2312">
<link rel="stylesheet" href="temp1.css" type="text/css">
</head>
<body bgcolor=#ffffff vlink=#0000ff>
<br>
<p class='sz1'>4.原理</p><hr color=#2266ee size=1>
　　硕正套件是浏览器的插件或加载项，以&lt;Object ...&gt;形式展现于页面，而&lt;Object ...&gt;的书写格式在IE下和FireFox下是有差别的.<br>
　　对于 IE 浏览器，下载的是 supcan2.cab 加载项(即ActiveX)，其CLSID为：<br>
　　　　<b><font face=verdana>619F1AC0-2644-40D3-9EB1-22F81C5FE097</font></b><br>
　　对于64位 IE 浏览器，下载的是 supcan2.x64.cab 加载项(即ActiveX)，其CLSID为：<br>
　　　　<b><font face=verdana>11249C26-4BCD-4A74-B4D9-068936D77EFE</font></b><br>
　　对于 Firefox、Chrome 浏览器，将会自动分别下载 supcan.xpi、supcan.crx插件，该插件的type为：<br>
　　　　<b><font face=verdana>application/supcan-plugin</font></b><br>

<br>
　　当浏览器发现页面&lt;Object ...&gt;中的这个 type 或 CLSID 尚未安装过，它将自动从服务器下载 xpi、crx 或 cab 文件，并自动安装之。<br>
　　supcan 的 xpi、crx 插件或 cab 加载项的文件尺寸很小，大约 100 多k。 硕正套件真正的主角：一系列的功能组件并不在这个文件中，而是在几个独立的 Bin 压缩包中，这些组件是由该插件/加载项负责进行再一次的下载、安装的。<br>
　　插件/加载项只是实现以下几个简单的功能：<br>
　　　　1.下载、更新功能组件;<br>
　　　　2.充当功能组件的容器;<br>
　　　　3.与页面交互;<br>
　　也就是说，该插件/加载项相当于是页面和功能组件之间的接口或桥梁，它将组件功能暴露给页面、供页面 JavaScript 操控。其原理图如下:<br>
<center><img src="image/act.jpg"></center>
<br>
　　一个页面内可能有多个插件/加载项实例，每个插件/加载项实例中有一个功能组件的实例，页面、插件/加载项与功能组件的关系又可以以下图示例：<br>
<center><img src="image/plcomp.jpg"></center>
　　今后 supcan.xpi、supcan.crx、supcan2.cab 这些加载项将尽可能不升级，而一系列功能组件却可以在用户没有感觉的情况下升级，甚至是较频繁地升级，这就是采用这种设计框架的原因。<br>

<br><br><br>
<script type='text/javascript' src='nstd.js'></script>
</body></html>