<HTML>
<head>
<meta http-equiv="content-type" content="text/html; charset=gb2312">
<link rel="stylesheet" href="temp1.css" type="text/css">
</head>
<body bgcolor=#ffffff vlink=#0000ff>
<br>
<p class='sz1'>10.函数</p><hr color=#2266ee size=1>
　　Supcan Treelist的函数是通过插件/加载项的 func(string funcname, string paras) 函数间接调用的，Supcan Treelist组件的可用funcname及用途说明如下表。<br>
　　很多函数需要行、列参数，行、列参数的书写规则为：
<ul style="margin-left: 40px">
<li>行号从 0 开始计数；</li>
<li>列名应当采用 XML 描述文件中指定的列名；</li>
<li>列名也可以用 #1、#2... 顺序表示, 这样性能最好，但需要考虑列被拖拽交换次序的因素；</li>
<li>如果不是考虑大量密集调用的性能因素，强烈建议不要采用#1、#2这种写法.</li>
</ul>
<table width="94%" border="1" align="center">
<tr><th>分类</th><th>函数名</th><th>用途</th></tr>
<tr><td rowspan=3>初始函数</td><td><a href="#TagFuncTableBuild"><div id="func_TagFuncTableBuild"/>Build</a></td><td>创建Treelist</td></tr>
<tr><td><a href="#TagFuncTableLoad"><div id="func_TagFuncTableLoad"/>Load</a></td><td>加载数据</td></tr>
<tr><td><a href="#TagFuncTableRefresh"><div id="func_TagFuncTableRefresh"/>Refresh</a></td><td>刷新数据</td></tr>
<tr><td rowspan=21>基本函数</td><td><a href="#TagFuncTableGetRows"><div id="func_TagFuncTableGetRows"/>GetRows</a></td><td>取得行数</td></tr>
<tr><td><a href="#TagFuncTableGetCols"><div id="func_TagFuncTableGetCols"/>GetCols</a></td><td>取得列数</td></tr>
<tr><td><a href="#TagFuncTableSetProp(用途1)"><div id="func_TagFuncTableSetProp(用途1)"/>SetProp(用途1)</a></td><td>动态更改 Properties 属性</td></tr>
<tr><td><a href="#TagFuncTableGetProp(用途1)"><div id="func_TagFuncTableGetProp(用途1)"/>GetProp(用途1)</a></td><td>取得 Properties 属性内容</td></tr>
<tr><td><a href="#TagFuncTableSetProp(用途2)"><div id="func_TagFuncTableSetProp(用途2)"/>SetProp(用途2)</a></td><td>设置打印配置属性</td></tr>
<tr><td><a href="#TagFuncTableGetProp(用途2)"><div id="func_TagFuncTableGetProp(用途2)"/>GetProp(用途2)</a></td><td>取得打印配置属性</td></tr>
<tr><td><a href="#TagFuncTableGetUserProps"><div id="func_TagFuncTableGetUserProps"/>GetUserProps</a></td><td>取得 Properties 中的全部自定义属性名</td></tr>
<tr><td><a href="#TagFuncTableSetColProp"><div id="func_TagFuncTableSetColProp"/>SetColProp</a></td><td>动态更改列属性</td></tr>
<tr><td><a href="#TagFuncTableGetColProp"><div id="func_TagFuncTableGetColProp"/>GetColProp</a></td><td>取得列的属性内容</td></tr>
<tr><td><a href="#TagFuncTableGetColUserProps"><div id="func_TagFuncTableGetColUserProps"/>GetColUserProps</a></td><td>取得某列的全部自定义属性名</td></tr>
<tr><td><a href="#TagFuncTableSetGroupProp"><div id="func_TagFuncTableSetGroupProp"/>SetGroupProp</a></td><td>动态更改分组(Group)属性</td></tr>
<tr><td><a href="#TagFuncTableGetGroupProp"><div id="func_TagFuncTableGetGroupProp"/>GetGroupProp</a></td><td>取得分组(Group)的属性内容</td></tr>
<tr><td><a href="#TagFuncTableGetDroplistProp"><div id="func_TagFuncTableGetDroplistProp"/>GetDroplistProp</a></td><td>取得某下拉树列表的属性</td></tr>
<tr><td><a href="#TagFuncTableSetDroplistProp"><div id="func_TagFuncTableSetDroplistProp"/>SetDroplistProp</a></td><td>更改下拉内容属性</td></tr>
<tr><td><a href="#TagFuncTableAddDroplist"><div id="func_TagFuncTableAddDroplist"/>AddDroplist</a></td><td>增加下拉字典资源</td></tr>
<tr><td><a href="#TagFuncTableGetAsTree"><div id="func_TagFuncTableGetAsTree"/>GetAsTree</a></td><td>取得当前是否以树展现</td></tr>
<tr><td><a href="#TagFuncTableSetAsTree"><div id="func_TagFuncTableSetAsTree"/>SetAsTree</a></td><td>切换到以树或列表展现</td></tr>
<tr><td><a href="#TagFuncTableGetHandle"><div id="func_TagFuncTableGetHandle"/>GetHandle</a></td><td>取得Treelist或下拉的句柄</td></tr>
<tr><td><a href="#TagFuncTableOpenFreeformBar"><div id="func_TagFuncTableOpenFreeformBar"/>OpenFreeformBar</a></td><td>打开freeform工具条</td></tr>
<tr><td><a href="#TagFuncTableCloseFreeformBar"><div id="func_TagFuncTableCloseFreeformBar"/>CloseFreeformBar</a></td><td>关闭freeform工具条</td></tr>
<tr><td><a href="#TagFuncTableOpenEditFreeformDialog"><div id="func_TagFuncTableOpenEditFreeformDialog"/>OpenEditFreeformDialog</a></td><td>打开用于输入的freeform对话框</td></tr>
<tr><td rowspan=14>单元格数据</td><td><a href="#TagFuncTableGetCellData"><div id="func_TagFuncTableGetCellData"/>GetCellData</a></td><td>取得某单元格的数据</td></tr>
<tr><td><a href="#TagFuncTableSetCellData"><div id="func_TagFuncTableSetCellData"/>SetCellData</a></td><td>设置某单元格的数据</td></tr>
<tr><td><a href="#TagFuncTableGetCellText"><div id="func_TagFuncTableGetCellText"/>GetCellText</a></td><td>取得某单元格的显示内容</td></tr>
<tr><td><a href="#TagFuncTableSetCellText"><div id="func_TagFuncTableSetCellText"/>SetCellText</a></td><td>设置某单元格的显示内容</td></tr>
<tr><td><a href="#TagFuncTableSetCellDataText"><div id="func_TagFuncTableSetCellDataText"/>SetCellDataText</a></td><td>同时设定某单元格的 key-value对</td></tr>
<tr><td><a href="#TagFuncTableGetDropCellData"><div id="func_TagFuncTableGetDropCellData"/>GetDropCellData</a></td><td>取得某单元格对应到下拉树列表选中行中某列的数据</td></tr>
<tr><td><a href="#TagFuncTableSetRowCellData"><div id="func_TagFuncTableSetRowCellData"/>SetRowCellData</a></td><td>设置整行的单元格数据</td></tr>
<tr><td><a href="#TagFuncTableSetColCellData"><div id="func_TagFuncTableSetColCellData"/>SetColCellData</a></td><td>设置整列的单元格数据</td></tr>
<tr><td><a href="#TagFuncTableGetRadioCol"><div id="func_TagFuncTableGetRadioCol"/>GetRadioCol</a></td><td>取得某行某个GroupID的单选框(RadioButton)的选中列</td></tr>
<tr><td><a href="#TagFuncTableGetDroplistIndex"><div id="func_TagFuncTableGetDroplistIndex"/>GetDroplistIndex</a></td><td>取得某下拉List的当前选中行顺序号</td></tr>
<tr><td><a href="#TagFuncTableSetDroplistIndex"><div id="func_TagFuncTableSetDroplistIndex"/>SetDroplistIndex</a></td><td>选中下拉List中的某行</td></tr>
<tr><td><a href="#TagFuncTableGetEditText"><div id="func_TagFuncTableGetEditText"/>GetEditText</a></td><td>取得当前输入框中的文字</td></tr>
<tr><td><a href="#TagFuncTableSetEditText"><div id="func_TagFuncTableSetEditText"/>SetEditText</a></td><td>设置当前输入框中的文字</td></tr>
<tr><td><a href="#TagFuncTableGetAutoId"><div id="func_TagFuncTableGetAutoId"/>GetAutoId</a></td><td>取得某字段唯一的值</td></tr>
<tr><td rowspan=21>单元格属性</td><td><a href="#TagFuncTableGetCellEditAble"><div id="func_TagFuncTableGetCellEditAble"/>GetCellEditAble</a></td><td>取得某单元EditAble</td></tr>
<tr><td><a href="#TagFuncTableSetCellEditAble"><div id="func_TagFuncTableSetCellEditAble"/>SetCellEditAble</a></td><td>单独设置某单元格EditAble</td></tr>
<tr><td><a href="#TagFuncTableGetCellBackColor"><div id="func_TagFuncTableGetCellBackColor"/>GetCellBackColor</a></td><td>取得某单元的背景色</td></tr>
<tr><td><a href="#TagFuncTableSetCellBackColor"><div id="func_TagFuncTableSetCellBackColor"/>SetCellBackColor</a></td><td>单独指定某单元的背景色</td></tr>
<tr><td><a href="#TagFuncTableGetCellTextColor"><div id="func_TagFuncTableGetCellTextColor"/>GetCellTextColor</a></td><td>取得某单元的文字色</td></tr>
<tr><td><a href="#TagFuncTableSetCellTextColor"><div id="func_TagFuncTableSetCellTextColor"/>SetCellTextColor</a></td><td>单独指定某单元的文字色</td></tr>
<tr><td><a href="#TagFuncTableGetCellAlign"><div id="func_TagFuncTableGetCellAlign"/>GetCellAlign</a></td><td>取得某单元的文字水平对齐</td></tr>
<tr><td><a href="#TagFuncTableSetCellAlign"><div id="func_TagFuncTableSetCellAlign"/>SetCellAlign</a></td><td>单独指定某单元的文字水平对齐</td></tr>
<tr><td><a href="#TagFuncTableGetCellVAlign"><div id="func_TagFuncTableGetCellVAlign"/>GetCellVAlign</a></td><td>取得某单元的文字垂直对齐</td></tr>
<tr><td><a href="#TagFuncTableSetCellVAlign"><div id="func_TagFuncTableSetCellVAlign"/>SetCellVAlign</a></td><td>单独指定某单元的文字垂直对齐</td></tr>
<tr><td><a href="#TagFuncTableGetCellFontIndex"><div id="func_TagFuncTableGetCellFontIndex"/>GetCellFontIndex</a></td><td>取得某单元的字体序号</td></tr>
<tr><td><a href="#TagFuncTableSetCellFontIndex"><div id="func_TagFuncTableSetCellFontIndex"/>SetCellFontIndex</a></td><td>单独指定某单元的字体序号</td></tr>
<tr><td><a href="#TagFuncTableGetCellHyperLink"><div id="func_TagFuncTableGetCellHyperLink"/>GetCellHyperLink</a></td><td>取得某单元是否超链接</td></tr>
<tr><td><a href="#TagFuncTableSetCellHyperLink"><div id="func_TagFuncTableSetCellHyperLink"/>SetCellHyperLink</a></td><td>单独指定某单元是否为超链接</td></tr>
<tr><td><a href="#TagFuncTableGetCellTip"><div id="func_TagFuncTableGetCellTip"/>GetCellTip</a></td><td>取得某单元的Tip</td></tr>
<tr><td><a href="#TagFuncTableSetCellTip"><div id="func_TagFuncTableSetCellTip"/>SetCellTip</a></td><td>单独指定某单元的Tip</td></tr>
<tr><td><a href="#TagFuncTableGetCellLeftImage<br>GetCellRightImage"><div id="func_TagFuncTableGetCellLeftImage<br>GetCellRightImage"/>GetCellLeftImage<br>GetCellRightImage</a></td><td>取得某单元的左侧/右侧小图标</td></tr>
<tr><td><a href="#TagFuncTableSetCellLeftImage<br>SetCellRightImage"><div id="func_TagFuncTableSetCellLeftImage<br>SetCellRightImage"/>SetCellLeftImage<br>SetCellRightImage</a></td><td>单独指定某单元的左侧/右侧小图标</td></tr>
<tr><td><a href="#TagFuncTableSetCellProp"><div id="func_TagFuncTableSetCellProp"/>SetCellProp</a></td><td>设置某单元格的自定义属性</td></tr>
<tr><td><a href="#TagFuncTableGetCellProp"><div id="func_TagFuncTableGetCellProp"/>GetCellProp</a></td><td>取得某单元格的自定义属性的值</td></tr>
<tr><td><a href="#TagFuncTableGetCellProps"><div id="func_TagFuncTableGetCellProps"/>GetCellProps</a></td><td>取得某单元格的所有自定义属性</td></tr>
<tr><td rowspan=9>单元格合并</td><td><a href="#TagFuncTableMergeSame(用途1)"><div id="func_TagFuncTableMergeSame(用途1)"/>MergeSame(用途1)</a></td><td>合并某行给定范围内相同内容的单元格</td></tr>
<tr><td><a href="#TagFuncTableMergeSame(用途2)"><div id="func_TagFuncTableMergeSame(用途2)"/>MergeSame(用途2)</a></td><td>合并某列给定范围内相同内容的单元格</td></tr>
<tr><td><a href="#TagFuncTableMergeSame(用途3)"><div id="func_TagFuncTableMergeSame(用途3)"/>MergeSame(用途3)</a></td><td>多个列按大类、小类方式, 跨行合并相同内容的单元格</td></tr>
<tr><td><a href="#TagFuncTableMerge"><div id="func_TagFuncTableMerge"/>Merge</a></td><td>合并指定范围内的单元格</td></tr>
<tr><td><a href="#TagFuncTableDeMerge"><div id="func_TagFuncTableDeMerge"/>DeMerge</a></td><td>解除单元格的合并</td></tr>
<tr><td><a href="#TagFuncTableGetCellStatus"><div id="func_TagFuncTableGetCellStatus"/>GetCellStatus</a></td><td>取得某单元格的状态</td></tr>
<tr><td><a href="#TagFuncTableGetMainCell"><div id="func_TagFuncTableGetMainCell"/>GetMainCell</a></td><td>取得某单元格所在的合并区域中的主单元格(即左上角单元格)</td></tr>
<tr><td><a href="#TagFuncTableGetMergedCells"><div id="func_TagFuncTableGetMergedCells"/>GetMergedCells</a></td><td>取得覆盖了某个单元格的合并范围</td></tr>
<tr><td><a href="#TagFuncTableCopyCellDataByMerge"><div id="func_TagFuncTableCopyCellDataByMerge"/>CopyCellDataByMerge</a></td><td>将主单元格的数据复制给被合并的各个单元格</td></tr>
<tr><td rowspan=17>树相关</td><td><a href="#TagFuncTableIsTreeNodeRow"><div id="func_TagFuncTableIsTreeNodeRow"/>IsTreeNodeRow</a></td><td>是否树节点行</td></tr>
<tr><td><a href="#TagFuncTableGetTreeLevel(用途一)"><div id="func_TagFuncTableGetTreeLevel(用途一)"/>GetTreeLevel(用途一)</a></td><td>取得某行在树中的层次级别，从0开始计数</td></tr>
<tr><td><a href="#TagFuncTableGetParentRow"><div id="func_TagFuncTableGetParentRow"/>GetParentRow</a></td><td>取得某行的父节点所在行</td></tr>
<tr><td><a href="#TagFuncTableGetChildRow"><div id="func_TagFuncTableGetChildRow"/>GetChildRow</a></td><td>取得某行的第一个儿子</td></tr>
<tr><td><a href="#TagFuncTableGetChildRows"><div id="func_TagFuncTableGetChildRows"/>GetChildRows</a></td><td>取得某行的所有儿子</td></tr>
<tr><td><a href="#TagFuncTableGetNextSibling"><div id="func_TagFuncTableGetNextSibling"/>GetNextSibling</a></td><td>取得某行的下一个/前一个同级(即同辈、兄弟)的行</td></tr>
<tr><td><a href="#TagFuncTableSetTreeImage"><div id="func_TagFuncTableSetTreeImage"/>SetTreeImage</a></td><td>更改树的图标</td></tr>
<tr><td><a href="#TagFuncTableGetTreeImage"><div id="func_TagFuncTableGetTreeImage"/>GetTreeImage</a></td><td>取得树的图标的URL</td></tr>
<tr><td><a href="#TagFuncTableExpand(用法1)"><div id="func_TagFuncTableExpand(用法1)"/>Expand(用法1)</a></td><td>展开树节点</td></tr>
<tr><td><a href="#TagFuncTableExpand(用法2)"><div id="func_TagFuncTableExpand(用法2)"/>Expand(用法2)</a></td><td>展开树的前 n 层节点</td></tr>
<tr><td><a href="#TagFuncTableCollapse"><div id="func_TagFuncTableCollapse"/>Collapse</a></td><td>收拢树节点</td></tr>
<tr><td><a href="#TagFuncTableIsExpand"><div id="func_TagFuncTableIsExpand"/>IsExpand</a></td><td>树节点是否已展开</td></tr>
<tr><td><a href="#TagFuncTableDeleteChild"><div id="func_TagFuncTableDeleteChild"/>DeleteChild</a></td><td>删除所有子孙</td></tr>
<tr><td><a href="#TagFuncTableIsLazyloadRow"><div id="func_TagFuncTableIsLazyloadRow"/>IsLazyloadRow</a></td><td>某行是否Lazyload行</td></tr>
<tr><td><a href="#TagFuncTableRebuildTreeCombine"><div id="func_TagFuncTableRebuildTreeCombine"/>RebuildTreeCombine</a></td><td>重新整理 TreeCombine 的父节点的 Checkbox</td></tr>
<tr><td><a href="#TagFuncTableRebuildPid"><div id="func_TagFuncTableRebuildPid"/>RebuildPid</a></td><td>重新整理 treeformat=byPid 的单列多层树的树杈树叶</td></tr>
<tr><td><a href="#TagFuncTableClearLazyload"><div id="func_TagFuncTableClearLazyload"/>ClearLazyload</a></td><td>强制设定某Lazyload行没有子孙</td></tr>
<tr><td rowspan=11>当前行 /<br> 当前单元格</td><td><a href="#TagFuncTableGetCurrentRow (方式一)"><div id="func_TagFuncTableGetCurrentRow (方式一)"/>GetCurrentRow (方式一)</a></td><td>取得当前选中的行</td></tr>
<tr><td><a href="#TagFuncTableGetCurrentRow (方式二)"><div id="func_TagFuncTableGetCurrentRow (方式二)"/>GetCurrentRow (方式二)</a></td><td>取得当前选中的行</td></tr>
<tr><td><a href="#TagFuncTableGetCurrentRows"><div id="func_TagFuncTableGetCurrentRows"/>GetCurrentRows</a></td><td>取得当前选中行的数量</td></tr>
<tr><td><a href="#TagFuncTableIsRowSelected"><div id="func_TagFuncTableIsRowSelected"/>IsRowSelected</a></td><td>某行是否被选中</td></tr>
<tr><td><a href="#TagFuncTableGetCurrentCell"><div id="func_TagFuncTableGetCurrentCell"/>GetCurrentCell</a></td><td>取得当前选中的单元格</td></tr>
<tr><td><a href="#TagFuncTableSelectRow"><div id="func_TagFuncTableSelectRow"/>SelectRow</a></td><td>选定当前行</td></tr>
<tr><td><a href="#TagFuncTableSelectCell"><div id="func_TagFuncTableSelectCell"/>SelectCell</a></td><td>将焦点切换到某单元格</td></tr>
<tr><td><a href="#TagFuncTableCloseDropdown"><div id="func_TagFuncTableCloseDropdown"/>CloseDropdown</a></td><td>收起当前正处于下拉状态的树列表</td></tr>
<tr><td><a href="#TagFuncTableCloseEdit"><div id="func_TagFuncTableCloseEdit"/>CloseEdit</a></td><td>结束当前单元格的输入状态</td></tr>
<tr><td><a href="#TagFuncTableLockCurrent"><div id="func_TagFuncTableLockCurrent"/>LockCurrent</a></td><td>锁定当前行，使之无法被切换</td></tr>
<tr><td><a href="#TagFuncTableUnlockCurrent"><div id="func_TagFuncTableUnlockCurrent"/>UnlockCurrent</a></td><td>解除锁定当前行</td></tr>
<tr><td rowspan=11>行列增删</td><td><a href="#TagFuncTableInsertRows(语法一)"><div id="func_TagFuncTableInsertRows(语法一)"/>InsertRows (语法一)</a></td><td>插入行</td></tr>
<tr><td><a href="#TagFuncTableInsertRows(语法二)"><div id="func_TagFuncTableInsertRows(语法二)"/>InsertRows (语法二)</a></td><td>插入行</td></tr>
<tr><td><a href="#TagFuncTableInsertCol"><div id="func_TagFuncTableInsertCol"/>InsertCol</a></td><td>插入列</td></tr>
<tr><td><a href="#TagFuncTableDeleteRows (方式一)"><div id="func_TagFuncTableDeleteRows (方式一)"/>DeleteRows (方式一)</a></td><td>删除行</td></tr>
<tr><td><a href="#TagFuncTableDeleteRows (方式二)"><div id="func_TagFuncTableDeleteRows (方式二)"/>DeleteRows (方式二)</a></td><td>删除行</td></tr>
<tr><td><a href="#TagFuncTableDeleteCurrentRow"><div id="func_TagFuncTableDeleteCurrentRow"/>DeleteCurrentRow</a></td><td>删除当前行</td></tr>
<tr><td><a href="#TagFuncTableCopyCurrentRow"><div id="func_TagFuncTableCopyCurrentRow"/>CopyCurrentRow</a></td><td>复制当前行</td></tr>
<tr><td><a href="#TagFuncTablePasteCurrentRow"><div id="func_TagFuncTablePasteCurrentRow"/>PasteCurrentRow</a></td><td>粘帖到当前行</td></tr>
<tr><td><a href="#TagFuncTablePasteNewRow"><div id="func_TagFuncTablePasteNewRow"/>PasteNewRow</a></td><td>粘帖到新增行</td></tr>
<tr><td><a href="#TagFuncTableMoveCol"><div id="func_TagFuncTableMoveCol"/>MoveCol</a></td><td>移动某列的位置</td></tr>
<tr><td><a href="#TagFuncTableMoveRow"><div id="func_TagFuncTableMoveRow"/>MoveRow</a></td><td>移动某行的位置</td></tr>
<tr><td rowspan=28>行列属性</td><td><a href="#TagFuncTableGetNextValidRow"><div id="func_TagFuncTableGetNextValidRow"/>GetNextValidRow</a></td><td>遍历行</td></tr>
<tr><td><a href="#TagFuncTableGetNextValidCol"><div id="func_TagFuncTableGetNextValidCol"/>GetNextValidCol</a></td><td>遍历列</td></tr>
<tr><td><a href="#TagFuncTableGetNextVisibleCol"><div id="func_TagFuncTableGetNextVisibleCol"/>GetNextVisibleCol</a></td><td>遍历可视列</td></tr>
<tr><td><a href="#TagFuncTableIsTotalRow"><div id="func_TagFuncTableIsTotalRow"/>IsTotalRow</a></td><td>是否合计行</td></tr>
<tr><td><a href="#TagFuncTableIsSubTotalRow"><div id="func_TagFuncTableIsSubTotalRow"/>IsSubTotalRow</a></td><td>是否小计行</td></tr>
<tr><td><a href="#TagFuncTableGetTreeLevel(用途二)"><div id="func_TagFuncTableGetTreeLevel(用途二)"/>GetTreeLevel(用途二)</a></td><td>取得某小计行的分类层次级别，从1开始计数</td></tr>
<tr><td><a href="#TagFuncTableGetRowKey"><div id="func_TagFuncTableGetRowKey"/>GetRowKey</a></td><td>取得某行的Key(即键值)</td></tr>
<tr><td><a href="#TagFuncTableGetRowEditAble"><div id="func_TagFuncTableGetRowEditAble"/>GetRowEditAble</a></td><td>某行是否能修改</td></tr>
<tr><td><a href="#TagFuncTableGetColEditAble"><div id="func_TagFuncTableGetColEditAble"/>GetColEditAble</a></td><td>某列是否能修改</td></tr>
<tr><td><a href="#TagFuncTableSetRowEditAble"><div id="func_TagFuncTableSetRowEditAble"/>SetRowEditAble</a></td><td>置某行能否修改</td></tr>
<tr><td><a href="#TagFuncTableSetColEditAble"><div id="func_TagFuncTableSetColEditAble"/>SetColEditAble</a></td><td>置某列能否修改</td></tr>
<tr><td><a href="#TagFuncTableGetColName"><div id="func_TagFuncTableGetColName"/>GetColName</a></td><td>取得列名</td></tr>
<tr><td><a href="#TagFuncTableGetColTitle"><div id="func_TagFuncTableGetColTitle"/>GetColTitle</a></td><td>取得列标题</td></tr>
<tr><td><a href="#TagFuncTableSetRowDeleteAble"><div id="func_TagFuncTableSetRowDeleteAble"/>SetRowDeleteAble</a></td><td>单独指定某行是否允许被删除(仅限于右键菜单)</td></tr>
<tr><td><a href="#TagFuncTableGetRowDeleteAble"><div id="func_TagFuncTableGetRowDeleteAble"/>GetRowDeleteAble</a></td><td>取得某行是否允许删除</td></tr>
<tr><td><a href="#TagFuncTableGetRowBackColor"><div id="func_TagFuncTableGetRowBackColor"/>GetRowBackColor</a></td><td>取得某行被单独指定的背景色</td></tr>
<tr><td><a href="#TagFuncTableSetRowBackColor"><div id="func_TagFuncTableSetRowBackColor"/>SetRowBackColor</a></td><td>单独指定某行的背景色</td></tr>
<tr><td><a href="#TagFuncTableGetRowTextColor"><div id="func_TagFuncTableGetRowTextColor"/>GetRowTextColor</a></td><td>取得某行被单独指定的文字色</td></tr>
<tr><td><a href="#TagFuncTableSetRowTextColor"><div id="func_TagFuncTableSetRowTextColor"/>SetRowTextColor</a></td><td>单独指定某行的文字色</td></tr>
<tr><td><a href="#TagFuncTableGetRowEnable"><div id="func_TagFuncTableGetRowEnable"/>GetRowEnable</a></td><td>某行是否Enable</td></tr>
<tr><td><a href="#TagFuncTableSetRowEnable"><div id="func_TagFuncTableSetRowEnable"/>SetRowEnable</a></td><td>置某行为Enable或disable</td></tr>
<tr><td><a href="#TagFuncTableIsRowHide"><div id="func_TagFuncTableIsRowHide"/>IsRowHide</a></td><td>某行是否隐藏</td></tr>
<tr><td><a href="#TagFuncTableHideRow"><div id="func_TagFuncTableHideRow"/>HideRow</a></td><td>隐藏某行</td></tr>
<tr><td><a href="#TagFuncTableIsColHide"><div id="func_TagFuncTableIsColHide"/>IsColHide</a></td><td>某列是否隐藏</td></tr>
<tr><td><a href="#TagFuncTableHideCol"><div id="func_TagFuncTableHideCol"/>HideCol</a></td><td>隐藏某列</td></tr>
<tr><td><a href="#TagFuncTableGetColCheckState"><div id="func_TagFuncTableGetColCheckState"/>GetColCheckState</a></td><td>取得isCheckboxOnly列标题处的CheckBox的状态</td></tr>
<tr><td><a href="#TagFuncTableSetColCheckState"><div id="func_TagFuncTableSetColCheckState"/>SetColCheckState</a></td><td>设置isCheckboxOnly列标题处的CheckBox的状态</td></tr>
<tr><td><a href="#TagFuncTableGetColGroup"><div id="func_TagFuncTableGetColGroup"/>GetColGroup</a></td><td>取得某列所属的分组(Group)</td></tr>
<tr><td rowspan=12>行列操作</td><td><a href="#TagFuncTableEnsureVisible"><div id="func_TagFuncTableEnsureVisible"/>EnsureVisible</a></td><td>保证让某个单元格或某行在屏幕中可见</td></tr>
<tr><td><a href="#TagFuncTableFind"><div id="func_TagFuncTableFind"/>Find</a></td><td>条件搜索</td></tr>
<tr><td><a href="#TagFuncTableFindAll"><div id="func_TagFuncTableFindAll"/>FindAll</a></td><td>条件搜索</td></tr>
<tr><td><a href="#TagFuncTableFindByKey"><div id="func_TagFuncTableFindByKey"/>FindByKey</a></td><td>按键值搜索</td></tr>
<tr><td><a href="#TagFuncTableGetUnique"><div id="func_TagFuncTableGetUnique"/>GetUnique</a></td><td>取得某列(或多列)的唯一的值的数组</td></tr>
<tr><td><a href="#TagFuncTableFilter"><div id="func_TagFuncTableFilter"/>Filter</a></td><td>过滤</td></tr>
<tr><td><a href="#TagFuncTableApplyFilter"><div id="func_TagFuncTableApplyFilter"/>ApplyFilter</a></td><td>对某个下拉执行过滤</td></tr>
<tr><td><a href="#TagFuncTableEnableDrag"><div id="func_TagFuncTableEnableDrag"/>EnableDrag</a></td><td>使2个Treelist之间能够拖拉行</td></tr>
<tr><td><a href="#TagFuncTableDisableDrag"><div id="func_TagFuncTableDisableDrag"/>DisableDrag</a></td><td>终止2个Treelist之间的行拖拉</td></tr>
<tr><td><a href="#TagFuncTableCopy"><div id="func_TagFuncTableCopy"/>Copy</a></td><td>将某单元格/某行/某区块内容复制进内存剪切板</td></tr>
<tr><td><a href="#TagFuncTableScrollToRow"><div id="func_TagFuncTableScrollToRow"/>ScrollToRow</a></td><td>窗口滚动到某行</td></tr>
<tr><td><a href="#TagFuncTableGetScrollRow"><div id="func_TagFuncTableGetScrollRow"/>GetScrollRow</a></td><td>取得窗口首个可见行</td></tr>
<tr><td rowspan=11>提交</td><td><a href="#TagFuncTableValidate"><div id="func_TagFuncTableValidate"/>Validate</a></td><td>验证</td></tr>
<tr><td><a href="#TagFuncTableGetChangedXML"><div id="func_TagFuncTableGetChangedXML"/>GetChangedXML</a></td><td>取得修改过的内容, 包括增、删、改</td></tr>
<tr><td><a href="#TagFuncTableGetRowChanged"><div id="func_TagFuncTableGetRowChanged"/>GetRowChanged</a></td><td>取得某行或整表的修改状态</td></tr>
<tr><td><a href="#TagFuncTableSetAsNewRow"><div id="func_TagFuncTableSetAsNewRow"/>SetAsNewRow</a></td><td>修改某行的“新增行”状态(和GetRowChanged的 "N" 相关)</td></tr>
<tr><td><a href="#TagFuncTableGetCellChanged"><div id="func_TagFuncTableGetCellChanged"/>GetCellChanged</a></td><td>取得某单元格是否被修改过</td></tr>
<tr><td><a href="#TagFuncTableSetCellChanged"><div id="func_TagFuncTableSetCellChanged"/>SetCellChanged</a></td><td>强制更改某单元格的修改状态</td></tr>
<tr><td><a href="#TagFuncTableSetColCellChanged"><div id="func_TagFuncTableSetColCellChanged"/>SetColCellChanged</a></td><td>强制更改某列所有单元格的修改状态</td></tr>
<tr><td><a href="#TagFuncTableResetChanged"><div id="func_TagFuncTableResetChanged"/>ResetChanged</a></td><td>合并修改内容，清除行和单元格的修改标记，以避免重复提交.</td></tr>
<tr><td><a href="#TagFuncTableGetDeleteRows"><div id="func_TagFuncTableGetDeleteRows"/>GetDeleteRows</a></td><td>取得被删除的总行数</td></tr>
<tr><td><a href="#TagFuncTableGetDeleteKey"><div id="func_TagFuncTableGetDeleteKey"/>GetDeleteKey</a></td><td>取得被删除的行中某行的Key</td></tr>
<tr><td><a href="#TagFuncTableUnDelete"><div id="func_TagFuncTableUnDelete"/>UnDelete</a></td><td>恢复被删除的行</td></tr>


<tr><td rowspan=8>Undo/Redo</td><td><a href="#TagFuncTableEnableUndo"><div id="func_TagFuncTableEnableUndo"/>EnableUndo</a></td><td>开启Undo功能</td></tr>
<tr><td><a href="#TagFuncTableIsUndoEnabled"><div id="func_TagFuncTableIsUndoEnabled"/>IsUndoEnabled</a></td><td>Undo功能是否已开启</td></tr>
<tr><td><a href="#TagFuncTableUndo"><div id="func_TagFuncTableUndo"/>Undo</a></td><td>执行Undo</td></tr>
<tr><td><a href="#TagFuncTableRedo"><div id="func_TagFuncTableRedo"/>Redo</a></td><td>执行Redo</td></tr>
<tr><td><a href="#TagFuncTableSaveUndo"><div id="func_TagFuncTableSaveUndo"/>SaveUndo</a></td><td>将当前状态保存到 Undo 缓存</td></tr>
<tr><td><a href="#TagFuncTableUndoAble"><div id="func_TagFuncTableUndoAble"/>UndoAble</a></td><td>当前是否有Undo可操作</td></tr>
<tr><td><a href="#TagFuncTableRedoAble"><div id="func_TagFuncTableRedoAble"/>RedoAble</a></td><td>当前是否有Redo可操作</td></tr>
<tr><td><a href="#TagFuncTableResetUndo"><div id="func_TagFuncTableResetUndo"/>ResetUndo</a></td><td>清空Undo缓存以重置Undo</td></tr>


<tr><td rowspan=19>其它</td><td><a href="#TagFuncTableGetCustom"><div id="func_TagFuncTableGetCustom"/>GetCustom</a></td><td>取得当前Treelist的定制信息</td></tr>
<tr><td><a href="#TagFuncTableSetCustom"><div id="func_TagFuncTableSetCustom"/>SetCustom</a></td><td>设置Treelist定制信息</td></tr>
<tr><td><a href="#TagFuncTableAddMenu"><div id="func_TagFuncTableAddMenu"/>AddMenu</a></td><td>增加自定义的弹出菜单项</td></tr>
<tr><td><a href="#TagFuncTableEnableMenu"><div id="func_TagFuncTableEnableMenu"/>EnableMenu</a></td><td>配置内置的右键菜单项，使之能显示</td></tr>
<tr><td><a href="#TagFuncTableDisableMenu"><div id="func_TagFuncTableDisableMenu"/>DisableMenu</a></td><td>配置内置的右键菜单项，使之不显示</td></tr>
<tr><td><a href="#TagFuncTableGetExpress"><div id="func_TagFuncTableGetExpress"/>GetExpress</a></td><td>取得表达式(Expresses)</td></tr>
<tr><td><a href="#TagFuncTableSetExpress"><div id="func_TagFuncTableSetExpress"/>SetExpress</a></td><td>设置表达式(Expresses)</td></tr>
<tr><td><a href="#TagFuncTableReCalc"><div id="func_TagFuncTableReCalc"/>ReCalc</a></td><td>重新新建表达式、合计小计</td></tr>
<tr><td><a href="#TagFuncTableGetRedrawAble"><div id="func_TagFuncTableGetRedrawAble"/>GetRedrawAble</a></td><td>是否能够重画</td></tr>
<tr><td><a href="#TagFuncTableSetRedrawAble"><div id="func_TagFuncTableSetRedrawAble"/>SetRedrawAble</a></td><td>设置让Treelist能够重画或不能重画</td></tr>
<tr><td><a href="#TagFuncTablePrintPreview"><div id="func_TagFuncTablePrintPreview"/>PrintPreview</a></td><td>打印预览</td></tr>
<tr><td><a href="#TagFuncTablePrint"><div id="func_TagFuncTablePrint"/>Print</a></td><td>直接打印</td></tr>
<tr><td><a href="#TagFuncTableImport"><div id="func_TagFuncTableImport"/>Import</a></td><td>从 Excel 文件导入数据</td></tr>
<tr><td><a href="#TagFuncTableExport"><div id="func_TagFuncTableExport"/>Export</a></td><td>取得XML格式的全部数据</td></tr>
<tr><td><a href="#TagFuncTableOpenImportDialog"><div id="func_TagFuncTableOpenImportDialog"/>OpenImportDialog</a></td><td>打开从 Excel 导入数据的对话框</td></tr>
<tr><td><a href="#TagFuncTableOpenExportDialog"><div id="func_TagFuncTableOpenExportDialog"/>OpenExportDialog</a></td><td>打开转换输出对话框、或直接转换输出</td></tr>
<tr><td><a href="#TagFuncTableSetExportFilename"><div id="func_TagFuncTableSetExportFilename"/>SetExportFilename</a></td><td>指定转换输出的文件名</td></tr>
<tr><td><a href="#TagFuncTableOpenDeleteRowsDialog"><div id="func_TagFuncTableOpenDeleteRowsDialog"/>OpenDeleteRowsDialog</a></td><td>打开删除行对话框</td></tr>
<tr><td><a href="#TagFuncTableAddHotKey"><div id="func_TagFuncTableAddHotKey"/>AddHotKey</a></td><td>增设快捷键</td></tr>
</table>



<br>
 函数详解:
<div id="TagFuncTableBuild"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>Build</td><td class="funcTD">根据XML描述文件创建Treelist</td><td align="right" style="border-left:0px;"><img src="image/documentg.bmp" title="提示: 几乎每个演示页都使用了这个函数">&nbsp;&nbsp;<a href="#func_TagFuncTableBuild"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>XML所在的URL(相对或绝对)，或者直接就是XML大串</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>可选, 允许是XML中<Properties>下的任何属性，表示将强制采用本属性, 多个属性间以分号(；)分隔，例如 isTree=false;editable=true<br>可见参数2能方便地使单个XML应用于多种场景， 当然也可以调用SetProp( )、SetColProp( )、SetDroplistProp( )动态更改属性</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>1 - 成功; 空串 - 失败(将自动弹出失败页面)</td></tr>
  <tr class="example"><td align=right>示例</td><td colspan=2>AF.func("build", "../tr3.xml \r\n isTree=true;editable=true");<br>
AF.func("build", '&lt;?xml version="1.0"?&gt;&lt;TreeList&gt; ...(略) &lt;/TreeList&gt;');</td></tr>
</table>
<br>

<div id="TagFuncTableLoad"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>Load</td><td class="funcTD">加载数据，数据格式可以为XML、JSON、TXT(TSV)、TSV-Ex</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableLoad"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>数据所在的URL(相对或绝对), 或直接的XML/JSON/TSV/TSV-Ex数据大串;</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>可选, 格式为 Mode=[?];FillMode=[?];insertAt=[?];asNewRow=[?];Node=[?];GroupSep=[?];FadeInStep=[?];LoadUserProp=[?];Para1=[?];method=[?], 其含义分别为:<br>
		<b>mode</b> - 同步/异步模式，如果等于"asynch", 表示异步(多线程)加载，异步加载能改善服务器端响应时间过久而导致的界面滞涩.<br>
		<b>FillMode</b> - 数据填充方式, 默认为空(表示先彻底清除原有数据)，也可以为如下之一：<br>
　　replaceByOrder - 不增删行，仅逐行替换数据;<br>
　　replaceByKey - 不增删行，仅按相同Key的行替换数据;<br>
　　insert - 不清理原有的数据，新数据添加到表中;<br>
　　insertNewKey 或 insertNewRow - 不替换，仅插入新的 key 的行(即 key 在树列表中不存在的行);<br>
　　注：replaceByOrder 或 replaceByKey 时，数据的列可以少于树列表的列，未包含在数据中的列不会被替换.<br>
		<b>insertAt</b> - 当fillmode = insert 或 insertNewKey 时，用来指定插入位置(行号, 前插), -1表示从末尾添加：<br>
		<b>asNewRow</b> - 可以为true/false, 默认false，用于标记加载的行的"N"(新增行标记)，用于提交：<br>
		<b>Node</b> - 指定XML数据内所在节点名.<br>
		<b>GroupSep</b> - 用于当XML/JSON数据中的节点名采用分组表头Group的id时，下属各列的数据分隔符，默认是斜杠("/");<br>
		<b>FadeInStep</b> - 屏幕展现时的淡入淡出效果，0至255，数字越小效果越明显，0表示关闭此效果，默认采用＜Properties＞中的同名属性.<br>
		<b>LoadUserProp</b> - true/false, 是否把XML中的附加属性作为单元格的自定义属性一起加载，以便让GetCellProp( )函数能存取。考虑到对性能的影响，默认是false的. XML自定义附加属性例如下图的 jtc2="2331":<br>
		<center><img src="image/treelist14.png"></center><br>
		<b>method</b> - http的发送方法，为Get / PostEncodeURI / Post，默认是Get.  如果为PostEncodeURI，则自动将URL中问号(?)后面的部分移到http body中，并对文字作EncodeURI转码处理； 如果是Post，则不作转码处理.<br>
		<b>Para1</b> - 可以为data/URL, 表示声明上面的“参数1”是纯数据串还是一个URL，一般用于TSV格式的数据，因为TSV格式的数据有时候很难自动判断到底是数据还是URL。如果不声明，系统优先判断为URL .<br>
<br>
备注1：如果是异步加载，那么在本Load( )函数后面不应该再执行针对本Treelist的其它函数，应该在“Load”事件中作后续处理，否则异步将失去意义(<font color=red>非常重要</font>);<br>
备注2：replaceByOrder 和 replaceByKey 不是很常用，加载的数据的列是原Treelist列的子集，用于增量刷新部分列;<br>
备注3：TSV格式数据不支持Node、FillMode、insertAt选项;<br></td></tr>
  <tr><td align=right>返回值</td><td colspan=2>1 - 成功; 空串 - 失败(将自动弹出失败页面)</td></tr>
  <tr><td align=right>备注</td><td colspan=2>建议该URL能返回 <a href="pub04.htm" target=_blank>SoapLike</a> 格式的异常包</td></tr>
  <tr class="example"><td align=right>示例</td><td colspan=2>AF.func("load", "../datacenter/dataprov.aspx?id=11800102");<br>
AF.func("load", "../datacenter/dataprov.aspx?id=11800102 \r\n fillmode=replaceByOrder");<br>
AF.func("load", '{"Record": [{"Country":"Austria","OrderID":"10258","CustomerID":"ERNSH"}, {"Country":"Austria","OrderID":"10233","CustomerID":"GROSH"}]}');</td></tr>
</table>
<br>

<div id="TagFuncTableRefresh"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>Refresh</td><td class="funcTD">刷新数据</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableRefresh"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>可选, true/false(默认)，true表示如果数据有改动，能弹出对话框询问用户是否刷新.</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
</table>
<br>

<div id="TagFuncTableGetRows"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetRows</td><td class="funcTD">取得行数</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableGetRows"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>数值</td></tr>
  <tr class="example"><td align=right>示例</td><td colspan=2>var rows = AF.func("getRows", "");</td></tr>
</table>
<br>

<div id="TagFuncTableGetCols"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetCols</td><td class="funcTD">取得列数</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableGetCols"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>数值</td></tr>
</table>
<br>

<div id="TagFuncTableSetProp(用途1)"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>SetProp(用途1)</td><td class="funcTD">动态更改XML文档中 Properties 定义的属性、以及自定义属性</td><td align="right" style="border-left:0px;"><img src="image/documentg.bmp" title="参见演示页: 7.计算列合计行、19.分页方案(二)、21.提交修改内容、25.动态更改属性">&nbsp;&nbsp;<a href="#func_TagFuncTableSetProp(用途1)"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>属性名, 包括Properties中的自定义属性</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>内容串.  如果是自定义属性，空串表示删除该自定义属性</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>备注</td><td colspan=2>1.更改dataURL属性相当于是调用Load( )函数，其内容可以是绝对或相对URL(相对于XML描述文件)，也可以是XML/JSON大串;<br>2.更改sort属性相当于执行了排序操作</td></tr>
  <tr class="example"><td align=right>示例</td><td colspan=2>AF.func("setProp", "sort \r\n ShipCity a, OrderDate d");</td></tr>
</table>
<br>

<div id="TagFuncTableGetProp(用途1)"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetProp(用途1)</td><td class="funcTD">取得XML文档中 Properties 的属性内容</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableGetProp(用途1)"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>属性名, 包括Properties中的自定义属性</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>可选，用于 "Sort" 属性，true/false。true表示在指定静态排序情况下，按硕正静态排序格式输出；false表示输出当前真实的排序，默认是 false</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>内容</td></tr>
</table>
<br>

<div id="TagFuncTableSetProp(用途2)"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>SetProp(用途2)</td><td class="funcTD">设置打印配置属性</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableSetProp(用途2)"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>固定的串，为 Print 或 PrintPage</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>XML串</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>备注</td><td colspan=2>更改打印参数，需要借助全局函数中的DOM函数集</td></tr>
  <tr class="example"><td align=right>示例</td><td colspan=2>//如下例子是把打印纸的左边界修改为10毫米：<br>
var xml=AF.func("GetProp", "Print");<br>
var hDOM = AF.func("dom_new", xml);  //创建DOM对象<br>
var hMargin = AF.func("dom_find", hDOM + "\r\n margin");   //查找节点<br>
AF.func("dom_SetProp", hMargin + "\r\n  left  \r\n  10");   //设置<br>
xml = AF.func("dom_export", hDOM);  //输出xml<br>
AF.func("SetProp", "Print \r\n" + xml);  //完成<br>
AF.func("dom_delete", hDOM);  //销毁对象<br>
</td></tr>
</table>
<br>

<div id="TagFuncTableGetProp(用途2)"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetProp(用途2)</td><td class="funcTD">取得打印配置属性, 即 PrintPage 节点下的全部内容</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableGetProp(用途2)"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>固定的串，为 Print 或 PrintPage</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>XML串</td></tr>
  <tr><td align=right>备注</td><td colspan=2>1.打印属性稍复杂，需要您对XML规范中的 PrintPage 节点进行分析;<br>
2.返回的XML串内容不多，因为默认的设置就不出现在XML中了;<br></td></tr>
</table>
<br>

<div id="TagFuncTableGetUserProps"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetUserProps</td><td class="funcTD">取得 Properties 中的全部自定义属性名</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableGetUserProps"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>属性名，多个属性名之间以逗号分隔</td></tr>
</table>
<br>

<div id="TagFuncTableSetColProp"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>SetColProp</td><td class="funcTD">动态更改XML文档中某 Col 的属性、以及自定义属性</td><td align="right" style="border-left:0px;"><img src="image/documentg.bmp" title="参见演示页: 5.图文并茂(2)、25.动态更改属性">&nbsp;&nbsp;<a href="#func_TagFuncTableSetColProp"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>列名或列号，建议用列名</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>属性名</td></tr>
  <tr><td align=right>参数3</td><td colspan=2>内容</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>备注</td><td colspan=2>1.若要更改列标题文字，请用“Title”属性;<br>2.少数属性如name、atLayer、extentRows、ref是无法修改的</td></tr>
  <tr class="example"><td align=right>示例</td><td colspan=2>AF.func("SetColProp", "CustomerID \r\n edittype   \r\n droptreelist");</td></tr>
</table>
<br>

<div id="TagFuncTableGetColProp"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetColProp</td><td class="funcTD">取得XML文档中某 Col 的属性内容、或者自定义属性的内容</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableGetColProp"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>列名或列号，建议用列名</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>属性名</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>内容</td></tr>
  <tr><td align=right>备注</td><td colspan=2>1.若要获取列标题文字，请用“Title”属性;<br>2.如果属性是 "isHide", 返回值只是1或0，如果要判断 absHide 或 absShow, 属性应该用 "isAbsHide" 或 "isAbsShow"</td></tr>
</table>
<br>

<div id="TagFuncTableGetColUserProps"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetColUserProps</td><td class="funcTD">取得某列的全部自定义属性名</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableGetColUserProps"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>列名或列号，建议用列名</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>自定义属性名，如果有多个自定义属性，则以逗号分隔</td></tr>
</table>
<br>

<div id="TagFuncTableSetGroupProp"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>SetGroupProp</td><td class="funcTD">动态更改XML文档中某 Group 的属性</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableSetGroupProp"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>Group 的 ID</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>属性名, 只能是 title(或name)、headerFontIndex(或fontIndex)、textColor(或color)、Align 这几种</td></tr>
  <tr><td align=right>参数3</td><td colspan=2>内容</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>1/0 - 成功/失败</td></tr>
  <tr class="example"><td align=right>示例</td><td colspan=2>AF.func("SetGroupProp", "GrpID1 \r\n title \r\n 本年度");</td></tr>
</table>
<br>

<div id="TagFuncTableGetGroupProp"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetGroupProp</td><td class="funcTD">取得XML文档中某 Group 的属性内容</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableGetGroupProp"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>Group 的 ID</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>属性名, 只能是 title(或name)、headerFontIndex(或fontIndex)、textColor(或color)、Align 这几种</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>内容</td></tr>
</table>
<br>

<div id="TagFuncTableGetDroplistProp"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetDroplistProp</td><td class="funcTD">取得某下拉树列表的属性</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableGetDroplistProp"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>Droplist的ID, 也可以是某列的列名</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>属性名, 例如 dataURL, RefreshDelay, treelist, dataCol, displayCol 等XML中定义的属性</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>内容</td></tr>
</table>
<br>

<div id="TagFuncTableSetDroplistProp"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>SetDroplistProp</td><td class="funcTD">动态更改XML中某 Droplist 的属性</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableSetDroplistProp"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>Droplist的ID, 也可以是某列的列名</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>属性名</td></tr>
  <tr><td align=right>参数3</td><td colspan=2>内容</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>备注</td><td colspan=2>1.更改dataURL相当于是重新加载数据，其内容可以是绝对或相对URL(注意：是相对于XML描述文件，而不是页面)，也可以是XML/JSON大串，且对Edittype为Droplist、 DropTreelist均能生效;<br>2.若treelistURL内容是相对URL，那么是相对于该XML描述文件的<br>3.id是无法修改的</td></tr>
  <tr class="example"><td align=right>示例</td><td colspan=2>AF.func("SetDroplistProp", "sex \r\n dataURL \r\n &lt;items&gt;&lt;item key=1&gt;男&lt;/item&gt;&lt;item key=2&gt;女&lt;/item&gt;&lt;/items&gt;");</td></tr>
</table>
<br>

<div id="TagFuncTableAddDroplist"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>AddDroplist</td><td class="funcTD">动态增加下拉资源(Droplists\Droplist)</td><td align="right" style="border-left:0px;"><img src="image/documentg.bmp" title="参见演示页: 25.动态更改属性">&nbsp;&nbsp;<a href="#func_TagFuncTableAddDroplist"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>可包含id、treelistURL、dataURL等6个属性，以“;”分隔。 例如"id=cus;treelistURL=cus.xml;dataURL=http://www.abcde.com/aa/aa"</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>1 - 成功; 空串 - 失败(id为空或重复)</td></tr>
  <tr class="example"><td align=right>示例</td><td colspan=2>AF.func("AddDroplist", "id=customer;treelistURL=customer.xml;DataCol=id;DisplayCol=name");</td></tr>
</table>
<br>

<div id="TagFuncTableGetAsTree"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetAsTree</td><td class="funcTD">取得当前是否以树展现</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableGetAsTree"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>1/0 - 是/否</td></tr>
</table>
<br>

<div id="TagFuncTableSetAsTree"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>SetAsTree</td><td class="funcTD">切换到以树或列表展现</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableSetAsTree"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>true - 树,  false - 列表</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>1/0 - 成功/失败</td></tr>
</table>
<br>

<div id="TagFuncTableGetHandle"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetHandle</td><td class="funcTD">取得当前TreeList、或某下拉TreeList、或某下拉List的句柄</td><td align="right" style="border-left:0px;"><img src="image/documentg.bmp" title="参见演示页: 17.Treelist拖曳、18.分页方案(一)">&nbsp;&nbsp;<a href="#func_TagFuncTableGetHandle"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>可以为:<br>
<b>空串(无参数)</b> - 取当前TreeList的句柄;<br>
<b>topBar (或tBar)</b> - 取顶部工具条的Freeform句柄;<br>
<b>bottomBar (或bBar)</b> - 取底部工具条的Freeform句柄;<br>
<b>innerDialog</b> - 取内部非模式对话框的Freeform句柄;<br>
<b>Validation</b> - 取Validation的句柄;<br>
<b>某下拉列的列名</b> - 表示取得某列的下拉DropTreelist、或下拉DropList、或EditWithButton的Droplist字典的句柄;</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>整数串</td></tr>
  <tr><td align=right>备注</td><td colspan=2>操控下拉TreeList的内容请参见“扩展函数”、操控下拉List的内容请参见“全局函数”</td></tr>
</table>
<br>

<div id="TagFuncTableOpenFreeformBar"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>OpenFreeformBar</td><td class="funcTD">打开freeform工具条</td><td align="right" style="border-left:0px;"><img src="image/documentg.bmp" title="参见演示页: 30.查询条件(一)">&nbsp;&nbsp;<a href="#func_TagFuncTableOpenFreeformBar"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>可以为:<br>
　空串(无参数) - freeform采用已定义的 &lt;freeformRes&gt; 元素中的freeform;<br>
　url - 采用外部一个freeform的URL;<br>
　id=[?] - 采用 &lt;freeformRes&gt; 下的某个freeform, id是该freeform的id;</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>可选，0/tBar/topBar - 顶部工具条;  1/bBar/bottomBar - 底部工具条。默认topBar</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
</table>
<br>

<div id="TagFuncTableCloseFreeformBar"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>CloseFreeformBar</td><td class="funcTD">关闭freeform工具条</td><td align="right" style="border-left:0px;"><img src="image/documentg.bmp" title="参见演示页: 30.查询条件(一)">&nbsp;&nbsp;<a href="#func_TagFuncTableCloseFreeformBar"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>可选，0/tBar/topBar - 顶部工具条;  1/bBar/bottomBar - 底部工具条。<br>
默认值是：如果当前只开启了一个工具条，那么默认的就是这个工具条，否则默认值是topBar</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
</table>
<br>

<div id="TagFuncTableOpenEditFreeformDialog"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>OpenEditFreeformDialog</td><td class="funcTD">打开用于输入的freeform对话框</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableOpenEditFreeformDialog"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>行号</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>备注</td><td colspan=2>即回车或双击时打开的对话框，请参见 Properties 中的 editFreeformId 属性</td></tr>
</table>
<br>

<div id="TagFuncTableGetCellData"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetCellData</td><td class="funcTD">取得某单元格的数据</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableGetCellData"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>行号</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>列名或列号，建议采用列名</td></tr>
  <tr><td align=right>参数3</td><td colspan=2>可选, true/false(或1/0), true表示取原始缓存中的数据(即被你修改前的数据), 默认是false(或0)</td></tr>
  <tr><td align=right>参数4</td><td colspan=2>可选, true/false(或1/0), 表示优先从输入框中取数(当输入框打开着时)，还是直接从树列表中取数, 默认是true, 即优先从输入框中取数。<br>注1：当参数3为true时，本参数无效, 即原始值只能从树列表取；<br>注2：大多数情况下，输入框中的内容和树列表的内容是一致的，本参数意义不大</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>串</td></tr>
</table>
<br>

<div id="TagFuncTableSetCellData"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>SetCellData</td><td class="funcTD">设置某单元格的数据</td><td align="right" style="border-left:0px;"><img src="image/documentg.bmp" title="参见演示页: 28.过滤: 关联下拉">&nbsp;&nbsp;<a href="#func_TagFuncTableSetCellData"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>行号</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>列名或列号，建议采用列名</td></tr>
  <tr><td align=right>参数3</td><td colspan=2>内容串</td></tr>
  <tr><td align=right>参数4</td><td colspan=2>可选，true(或1)表示修改原始缓存中的数据(即被你修改前的数据)，默认是false(或0).<br>
这个选项一般用于强制更改"NMD"状态, 请参见下面"提交"类函数：GetRowChanged( )</td></tr>
  <tr><td align=right>参数5</td><td colspan=2>可选，true(或1)表示自动修改 TreeCombine 的其它关联行的CheckBox内容, 默认是false(或0)</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>1 - 成功; 空串 - 失败</td></tr>
  <tr><td align=right>备注</td><td colspan=2>1. <font color=red>严重警告：</font>参数2和参数3之间不得留有多余空格，否则结果将不是你所期望的，例如：<br>　　AF.func("SetCellData", "0 \r\n city \r\n   "+ vCity);　　//执行结果是左侧有多余空格<br>
2.如果内容串中含回车，需要先把回车转义成 "\\r\\n"
</td></tr>
</table>
<br>

<div id="TagFuncTableGetCellText"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetCellText</td><td class="funcTD">取得某单元格的显示内容</td><td align="right" style="border-left:0px;"><img src="image/documentg.bmp" title="参见演示页: 26.自定义右键菜单">&nbsp;&nbsp;<a href="#func_TagFuncTableGetCellText"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>行号</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>列名或列号，建议采用列名</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>串</td></tr>
  <tr><td align=right>备注</td><td colspan=2>显示内容是指有下拉、或显示掩码的列，或者是通过 SetCellDataText 函数设置了 <b>key-value对</b>的内容，有别于真实数据(data)的显示串，说白了就是你在屏幕上看到的文字</td></tr>
</table>
<br>

<div id="TagFuncTableSetCellText"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>SetCellText</td><td class="funcTD">设置某单元格的显示内容</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableSetCellText"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>行号</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>列名或列号，建议采用列名</td></tr>
  <tr><td align=right>参数3</td><td colspan=2>内容串</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>1 - 成功; 空串 - 失败</td></tr>
  <tr><td align=right>备注</td><td colspan=2>常用于和Droplist绑定的EditWithButton, 否则和SetCellData( )同义.</td></tr>
</table>
<br>

<div id="TagFuncTableSetCellDataText"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>SetCellDataText</td><td class="funcTD">同时设定某单元格的 key-value对，包括值、和显示的内容</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableSetCellDataText"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>行号</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>列名或列号，建议采用列名</td></tr>
  <tr><td align=right>参数3</td><td colspan=2>值串</td></tr>
  <tr><td align=right>参数4</td><td colspan=2>内容串</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>1 - 成功; 空串 - 失败</td></tr>
  <tr><td align=right>备注</td><td colspan=2>1.普通的列都可以拥有简易的 <b>key-value对</b>字典，不管是否下拉;<br>
2.如果 edittype 为 droplist, 此 <b>key-value对</b> 将自动加入下拉字典.</td></tr>
</table>
<br>

<div id="TagFuncTableGetDropCellData"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetDropCellData</td><td class="funcTD">取得某单元格对应到下拉树列表选中行中某列的数据</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableGetDropCellData"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>行号</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>列名或列号，建议采用列名</td></tr>
  <tr><td align=right>参数3</td><td colspan=2>下拉树列表的列名</td></tr>
  <tr><td align=right>参数4</td><td colspan=2>可选，true(或1)表示当该单元格正在编辑中时, 主键的值取编辑窗中输入的内容, 例如在 DropdownSelChanged 事件中执行本函数时, 此时数据尚未同步到单元格; false(或0)表示取单元格的数据 , 默认是 false</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>串</td></tr>
  <tr><td align=right>备注</td><td colspan=2>仅用于该列的 EditType 为 DropTreeList 或 EditAbleDropTreeList 的情形</td></tr>
  <tr class="example"><td align=right>示例</td><td colspan=2>如下例子表示 CustomerId 列为下拉树列表, 从第0行单元格对应的下拉树列表的选中行中，取得该下拉树列表的 Country 列的内容：<br>
var v = AF.func("GetDropCellData", "0 \r\n CustomerId \r\n Country");</td></tr>
</table>
<br>

<div id="TagFuncTableSetRowCellData"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>SetRowCellData</td><td class="funcTD">设置整行的单元格数据</td><td align="right" style="border-left:0px;"><img src="image/documentg.bmp" title="参见自由表头的演示页: 14.基于Freeform的对话框">&nbsp;&nbsp;<a href="#func_TagFuncTableSetRowCellData"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>行号</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>XML或JSON大串(允许包含多行内容)</td></tr>
  <tr><td align=right>参数3</td><td colspan=2>可选， true(或1)表示修改原始缓存中的数据(即被你修改前的数据), 默认是false(或0).<br>
这个选项一般用于强制更改"NMD"状态, 请参见下面"提交"类函数：GetRowChanged( )</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>被修改的行数</td></tr>
  <tr class="example"><td align=right>示例</td><td colspan=2>AF.func("SetRowCellData", "0\r\n {id:'k101', price:33.40, orderdt:'2011/12/21'}");</td></tr>
</table>
<br>

<div id="TagFuncTableSetColCellData"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>SetColCellData</td><td class="funcTD">设置整列的单元格数据, 支持表达式，该函数非常有用</td><td align="right" style="border-left:0px;"><img src="image/documentg.bmp" title="参见演示页: 16.行的复选">&nbsp;&nbsp;<a href="#func_TagFuncTableSetColCellData"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>列名或列号，建议采用列名</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>内容串，支持以"="开头的表达式</td></tr>
  <tr><td align=right>参数3</td><td colspan=2>可选，开始行号，默认0</td></tr>
  <tr><td align=right>参数4</td><td colspan=2>可选，结束行号，默认-1, 表示末尾行</td></tr>
  <tr><td align=right>参数5</td><td colspan=2>可选， true(或1)表示修改原始缓存中的数据(即被你修改前的数据), 默认是false(或0).<br>
这个选项一般用于强制更改"NMD"状态, 请参见下面"提交"类函数：GetRowChanged( )</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>1 / 0 - 成功 / 失败，失败原因有：行列不正确、企图统一设置树节点列</td></tr>
  <tr class="example"><td align=right>示例</td><td colspan=2>AF.func("SetColCellData", 'price \r\n0');  //price设置成0<br>
AF.func("SetColCellData", 'price \r\n');   //price设置成 null<br>
AF.func("SetColCellData", 'price \r\n=if(product=102, 0, 100)');  //按条件设</td></tr>
</table>
<br>

<div id="TagFuncTableGetRadioCol"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetRadioCol</td><td class="funcTD">取得某行某个GroupID的单选框(RadioButton)的选中列</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableGetRadioCol"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>行号</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>GroupID号，如果只有一个分组，则可忽略</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>选中的列名</td></tr>
  <tr><td align=right>备注</td><td colspan=2>没有SetRadioCol函数的，因为直接执行SetCellData置选中列的值为1即可.</td></tr>
</table>
<br>

<div id="TagFuncTableGetDroplistIndex"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetDroplistIndex</td><td class="funcTD">取得某下拉List的当前选中行顺序号</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableGetDroplistIndex"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>行号</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>列名或列号，建议采用列名</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>本单元格中的下拉列表的当前选中行, 从0开始计数</td></tr>
  <tr><td align=right>备注</td><td colspan=2>一般用于非排序的下拉List</td></tr>
</table>
<br>

<div id="TagFuncTableSetDroplistIndex"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>SetDroplistIndex</td><td class="funcTD">选中下拉List中的某行</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableSetDroplistIndex"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>行号</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>列名或列号，建议采用列名</td></tr>
  <tr><td align=right>参数3</td><td colspan=2>本单元格中的下拉列表中的顺序号, 从0开始计数</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>1 / 0 - 成功 / 失败</td></tr>
  <tr><td align=right>备注</td><td colspan=2>一般用于非排序的下拉List</td></tr>
</table>
<br>

<div id="TagFuncTableGetEditText"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetEditText</td><td class="funcTD">取得当前输入框中的文字</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableGetEditText"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>串</td></tr>
  <tr><td align=right>备注</td><td colspan=2>通常用在事件中，因为你很难把握当前输入框是否正打开着</td></tr>
</table>
<br>

<div id="TagFuncTableSetEditText"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>SetEditText</td><td class="funcTD">设置当前输入框中的文字</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableSetEditText"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>串</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>备注</td><td colspan=2>通常用在事件中，因为你很难把握当前输入框是否正打开着</td></tr>
</table>
<br>

<div id="TagFuncTableGetAutoId"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetAutoId</td><td class="funcTD">取得某字段唯一的随机值</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableGetAutoId"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>列名或列号，建议采用列名。仅支持 string、int、double三种类型的字段</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>本参数仅用于 string 型字段，格式为 len = [?]; Prefix=[?], 含义如下：<br>
<b>len</b> 或 <b>length</b> - 生成的随机串的长度，范围是从1到32，默认是6。如果您设得太小，比如设为１, 很可能会发生程序内部死循环而崩溃;<br>
<b>Prefix</b> - 生成的串的前缀，这个前缀的长度是不算在 len 中的;<br>
</td></tr>
<tr><td align=right>返回值</td><td colspan=2>值串</td></tr>
<tr><td align=right>备注</td><td colspan=2>1.生成过程是随机、并遍历整个表判断是否唯一的;<br>
2.如果字段是 string 型，生成的随机串是由数字 0-9 和字母 A-Z　混合组成的，每个字符相当于有36种取值, 默认的6字长的串，值的表达范围是36的6次方, 相当于21亿多;<br>
3.&lt;col&gt; 的 AutoId 属性，其内部实现时也是用到了本函数，但本函数的调用与 AutoId 是否已定义无关.</td></tr>
<tr class="example"><td align=right>示例</td><td colspan=2>var s = AF.func("GetAutoId", "ID \r\n len=8;Prefix=@V");</td></tr>
</table>
<br>


<div id="TagFuncTableGetCellEditAble"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetCellEditAble</td><td class="funcTD">取得某单元EditAble</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableGetCellEditAble"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>行号</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>列名或列号，建议采用列名</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>1或0, 空串表示失败</td></tr>
</table>
<br>

<div id="TagFuncTableSetCellEditAble"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>SetCellEditAble</td><td class="funcTD">单独设置某单元格的EditAble，其等级高于行列的EditAble规定，但低于 Properties 中的EditAble规定.</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableSetCellEditAble"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>行号</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>列名或列号，建议采用列名</td></tr>
  <tr><td align=right>参数3</td><td colspan=2>1/0，或true/false、yes/no</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
</table>
<br>

<div id="TagFuncTableGetCellBackColor"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetCellBackColor</td><td class="funcTD">取得某单元被单独指定的、或根据DisplayMask计算出来的背景色</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableGetCellBackColor"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>行号</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>列名或列号，建议采用列名</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>颜色串</td></tr>
</table>
<br>

<div id="TagFuncTableSetCellBackColor"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>SetCellBackColor</td><td class="funcTD">单独指定某单元的背景色</td><td align="right" style="border-left:0px;"><img src="image/documentg.bmp" title="参见演示页: 25.动态更改属性">&nbsp;&nbsp;<a href="#func_TagFuncTableSetCellBackColor"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>行号</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>列名或列号，建议采用列名</td></tr>
  <tr><td align=right>参数3</td><td colspan=2>颜色串，空串表示解除背景色</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
</table>
<br>

<div id="TagFuncTableGetCellTextColor"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetCellTextColor</td><td class="funcTD">取得某单元被单独指定的、或根据DisplayMask计算出来的文字色</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableGetCellTextColor"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>行号</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>列名或列号，建议采用列名</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>颜色串</td></tr>
</table>
<br>

<div id="TagFuncTableSetCellTextColor"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>SetCellTextColor</td><td class="funcTD">单独指定某单元的文字色</td><td align="right" style="border-left:0px;"><img src="image/documentg.bmp" title="参见演示页: 25.动态更改属性">&nbsp;&nbsp;<a href="#func_TagFuncTableSetCellTextColor"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>行号</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>列名或列号，建议采用列名</td></tr>
  <tr><td align=right>参数3</td><td colspan=2>颜色串，空串表示解除文字色</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
</table>
<br>

<div id="TagFuncTableGetCellAlign"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetCellAlign</td><td class="funcTD">取得某单元被单独指定的文字对齐，如果尚未被指定，则返回该列的默认对齐</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableGetCellAlign"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>行号</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>列名或列号，建议采用列名</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>left / center / right</td></tr>
</table>
<br>

<div id="TagFuncTableSetCellAlign"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>SetCellAlign</td><td class="funcTD">单独指定某单元的文字水平对齐</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableSetCellAlign"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>行号</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>列名或列号，建议采用列名</td></tr>
  <tr><td align=right>参数3</td><td colspan=2>left / center / right</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
</table>
<br>

<div id="TagFuncTableGetCellVAlign"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetCellVAlign</td><td class="funcTD">取得某单元的文字垂直对齐</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableGetCellVAlign"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>行号</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>列名或列号，建议采用列名</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>top / middle / bottom</td></tr>
</table>
<br>

<div id="TagFuncTableSetCellVAlign"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>SetCellVAlign</td><td class="funcTD">单独指定某单元的文字垂直对齐</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableSetCellVAlign"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>行号</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>列名或列号，建议采用列名</td></tr>
  <tr><td align=right>参数3</td><td colspan=2>top / middle / bottom</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
</table>
<br>

<div id="TagFuncTableGetCellFontIndex"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetCellFontIndex</td><td class="funcTD">取得某单元被单独指定的字体、或默认的字体(如果没有被单独指定)，也可以写成GetCellFont</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableGetCellFontIndex"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>行号</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>列名或列号，建议采用列名</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>序号，即 &lt;Fonts&gt; 下的字体顺序号</td></tr>
</table>
<br>

<div id="TagFuncTableSetCellFontIndex"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>SetCellFontIndex</td><td class="funcTD">单独指定某单元的字体序号，其等级高于默认字体，也可以写成SetCellFont</td><td align="right" style="border-left:0px;"><img src="image/documentg.bmp" title="参见演示页: 25.动态更改属性">&nbsp;&nbsp;<a href="#func_TagFuncTableSetCellFontIndex"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>行号</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>列名或列号，建议采用列名</td></tr>
  <tr><td align=right>参数3</td><td colspan=2>序号，即 &lt;Fonts&gt; 下的字体顺序号，-1表示解除字体</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
</table>
<br>

<div id="TagFuncTableGetCellHyperLink"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetCellHyperLink</td><td class="funcTD">取得某单元是否超链接</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableGetCellHyperLink"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>行号</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>列名或列号，建议采用列名</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>1/0</td></tr>
</table>
<br>

<div id="TagFuncTableSetCellHyperLink"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>SetCellHyperLink</td><td class="funcTD">单独指定某单元是否为超链接，其等级高于 &lt;Col&gt; 的isHyperLink规定</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableSetCellHyperLink"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>行号</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>列名或列号，建议采用列名</td></tr>
  <tr><td align=right>参数3</td><td colspan=2>true/false</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
</table>
<br>

<div id="TagFuncTableGetCellTip"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetCellTip</td><td class="funcTD">取得某单元的Tip, Tip的含义为: 鼠标划过时，浮现的黄色文字注释</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableGetCellTip"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>行号</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>列名或列号，建议采用列名</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>串</td></tr>
</table>
<br>

<div id="TagFuncTableSetCellTip"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>SetCellTip</td><td class="funcTD">单独指定某单元的Tip, Tip的含义为: 鼠标划过时，浮现的黄色文字注释</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableSetCellTip"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>行号</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>列名或列号，建议采用列名</td></tr>
  <tr><td align=right>参数3</td><td colspan=2>串</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
</table>
<br>

<div id="TagFuncTableGetCellLeftImage<br>GetCellRightImage"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetCellLeftImage<br>GetCellRightImage</td><td class="funcTD">取得某单元的左侧/右侧小图标</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableGetCellLeftImage<br>GetCellRightImage"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>行号</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>列名或列号，建议采用列名</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>图标的URL</td></tr>
</table>
<br>

<div id="TagFuncTableSetCellLeftImage<br>SetCellRightImage"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>SetCellLeftImage<br>SetCellRightImage</td><td class="funcTD">单独指定某单元的左侧/右侧小图标，优先级高于displayMask指定的图标</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableSetCellLeftImage<br>SetCellRightImage"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>行号</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>列名或列号，建议采用列名</td></tr>
  <tr><td align=right>参数3</td><td colspan=2>图标的URL</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
</table>
<br>

<div id="TagFuncTableSetCellProp"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>SetCellProp</td><td class="funcTD">设置某单元格的自定义属性和它的值，每个单元格允许有多个这样的名-值对，其目的是方便程序员的编程设计，Treelist控件不对其语义作任何解析</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableSetCellProp"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>行号</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>列名或列号，建议采用列名</td></tr>
  <tr><td align=right>参数3</td><td colspan=2>属性名，任意串</td></tr>
  <tr><td align=right>参数4</td><td colspan=2>该属性的值，任意串</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
</table>
<br>

<div id="TagFuncTableGetCellProp"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetCellProp</td><td class="funcTD">取得某单元格的自定义属性的值，每个单元格允许有多个这样的名-值对，其目的是方便程序员的编程设计，Treelist控件不对其语义作任何解析</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableGetCellProp"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>行号</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>列名或列号，建议采用列名</td></tr>
  <tr><td align=right>参数3</td><td colspan=2>属性名，任意串</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>串，为该属性的值</td></tr>
</table>
<br>

<div id="TagFuncTableGetCellProps"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetCellProps</td><td class="funcTD">取得某单元格的所有自定义属性</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableGetCellProps"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>行号</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>列名或列号，建议采用列名</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>串，以逗号分隔的属性名</td></tr>
</table>
<br>

<div id="TagFuncTableMergeSame(用途1)"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>MergeSame(用途1)</td><td class="funcTD">合并某行给定范围内相同内容的单元格</td><td align="right" style="border-left:0px;"><img src="image/documentg.bmp" title="参见演示页: 33.合并单元格">&nbsp;&nbsp;<a href="#func_TagFuncTableMergeSame(用途1)"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>格式为：row=[?];col1=[?];col2=[?];isIgnoreNull=[?];isDemergeFirst=[?]，含义为：<br>
<b>row</b>  - 某行的行号<br>
<b>col1</b>  - 开始列名或列号，建议采用列名，默认是0<br>
<b>col2</b>  - 结束列名或列号，建议采用列名，默认是最后列<br>
<b>isIgnoreNull</b>  - 内容为空是否就不合并了，true/false，默认是true<br>
<b>isDemergeFirst</b>  - 合并前是否先解除覆盖了该范围的以前的合并，true/false，默认是true<br>
<b>isKeepMergeAsPossible</b>  - 如果新的合并区横贯了以前的合并区，是否把以前的合并区拆分为二段，true/false，默认是false, 只有在isDemergeFirst=false时才能生效<br>
</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>备注</td><td colspan=2>1.以树展现时，合并无效; 2.合并只改变外观，并不影响各自单元格的数据;</td></tr>
</table>
<br>

<div id="TagFuncTableMergeSame(用途2)"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>MergeSame(用途2)</td><td class="funcTD">合并某列给定范围内相同内容的单元格</td><td align="right" style="border-left:0px;"><img src="image/documentg.bmp" title="参见演示页: 33.合并单元格">&nbsp;&nbsp;<a href="#func_TagFuncTableMergeSame(用途2)"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>格式为：col=[?];row1=[?];row2=[?];isIgnoreNull=[?];isDemergeFirst=[?]，含义为：<br>
<b>col</b>  - 列名或列号，建议采用列名<br>
<b>row1</b>  - 开始行的行号，默认是0<br>
<b>row2</b>  - 结束行的行号，默认是最后行<br>
<b>isIgnoreNull</b>  - 内容为空是否就不合并了，true/false，默认是true<br>
<b>isDemergeFirst</b>  - 合并前是否先解除覆盖了该范围的以前的合并，true/false，默认是true<br>
<b>isKeepMergeAsPossible</b>  - 如果新的合并区横贯了以前的合并区，是否把以前的合并区拆分为二段，true/false，默认是false, 只有在isDemergeFirst=false时才能生效<br>
</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>备注</td><td colspan=2>1.以树展现时，合并无效; 2.合并只改变外观，并不影响各自单元格的数据;</td></tr>
</table>
<br>

<div id="TagFuncTableMergeSame(用途3)"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>MergeSame(用途3)</td><td class="funcTD">多个列按大类、小类方式, 跨行合并相同内容的单元格</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableMergeSame(用途3)"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>格式为：col=[?];row1=[?];row2=[?];isIgnoreNull=[?];isDemergeFirst=[?]，含义为：<br>
<b>col</b>  - 多个列名, 以逗号分隔；这些列通常是按顺序已经排序了的<br>
<b>row1</b>  - 开始行的行号，默认是0<br>
<b>row2</b>  - 结束行的行号，默认是最后行<br>
<b>isIgnoreNull</b>  - 内容为空是否就不合并了，true/false，默认是true<br>
<b>isDemergeFirst</b>  - 合并前是否先解除覆盖了该范围的以前的合并，true/false，默认是true<br>
<b>isKeepMergeAsPossible</b>  - 如果新的合并区横贯了以前的合并区，是否把以前的合并区拆分为二段，true/false，默认是false, 只有在isDemergeFirst=false时才能生效<br>
</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>备注</td><td colspan=2>1.以树展现时，合并无效; 2.合并只改变外观，并不影响各自单元格的数据;</td></tr>
<tr class="example"><td align=right>示例</td><td colspan=2>AF.func("MergeSame", "col = Category,summary,customer");</td></tr>
</table>
<br>

<div id="TagFuncTableMerge"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>Merge</td><td class="funcTD">合并指定范围内的单元格</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableMerge"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>开始行号</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>开始列名或列号，建议采用列名</td></tr>
  <tr><td align=right>参数3</td><td colspan=2>结束行号</td></tr>
  <tr><td align=right>参数4</td><td colspan=2>结束列名或列号，建议采用列名</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>备注</td><td colspan=2>1.参数之间也可以用逗号分隔;<br>
2.以树展现时，合并无效; <br>
3.合并只改变外观，并不影响各自单元格的数据;</td></tr>
  <tr class="example"><td align=right>示例</td><td colspan=2>AF.func("merge", "0 \r\n id \r\n 10 \r\n city");</td></tr>
</table>
<br>

<div id="TagFuncTableDeMerge"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>DeMerge</td><td class="funcTD">解除单元格的合并</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableDeMerge"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>可选，开始行号</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>可选，开始列名或列号，建议采用列名</td></tr>
  <tr><td align=right>参数3</td><td colspan=2>可选，结束行号</td></tr>
  <tr><td align=right>参数4</td><td colspan=2>可选，结束列名或列号，建议采用列名</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>备注</td><td colspan=2>1.如果没有参数，表示解除Treelist所有合并；<br>
2.如果只有前2个参数，表示解除覆盖了该单元的合并；<br>
3.参数之间也可以用逗号分隔;<br>
4.以树展现时，合并功能无效</td></tr>
  <tr class="example"><td align=right>示例</td><td colspan=2>AF.func("demerge", "0 \r\n id");</td></tr>
</table>
<br>

<div id="TagFuncTableGetCellStatus"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetCellStatus</td><td class="funcTD">取得某单元格的状态</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableGetCellStatus"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>行号</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>列名或列号，建议采用列名</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>A - 普通单元格; <br> H - 被合并; <br> M - 被合并，但位于合并区的左上角，是有效的主单元格; <br> 空串 - 该单元格不存在</td></tr>
  <tr><td align=right>备注</td><td colspan=2>以树展现时，合并功能无效</td></tr>
</table>
<br>

<div id="TagFuncTableGetMainCell"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetMainCell</td><td class="funcTD">取得某单元格所在的合并区域中的主单元格(即左上角单元格)</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableGetMainCell"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>行号</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>列名或列号，建议采用列名</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>诸如"10,3"格式的串，表示“行号，列号”。如果本单元格没有被合并，则返回它自己</td></tr>
  <tr><td align=right>备注</td><td colspan=2>以树展现时，合并功能无效</td></tr>
</table>
<br>

<div id="TagFuncTableGetMergedCells"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetMergedCells</td><td class="funcTD">取得覆盖了某个单元格的合并范围</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableGetMergedCells"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>行号</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>列名或列号，建议采用列名</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>诸如"10,3,20,3"格式的串，表示“开始行号，开始列号，结束行号，结束列号”</td></tr>
  <tr><td align=right>备注</td><td colspan=2>以树展现时，合并功能无效</td></tr>
</table>
<br>

<div id="TagFuncTableCopyCellDataByMerge"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>CopyCellDataByMerge</td><td class="funcTD">将主单元格的数据复制给被合并的各个单元格, 换句话说：所有被合并的单元格的数据，从各自的主单元格(即左上角单元格)中去复制</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableCopyCellDataByMerge"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>可选，开始行号</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>可选，开始列名或列号，建议采用列名</td></tr>
  <tr><td align=right>参数3</td><td colspan=2>可选，结束行号</td></tr>
  <tr><td align=right>参数4</td><td colspan=2>可选，结束列名或列号，建议采用列名</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>备注</td><td colspan=2>该函数一般用于提交前，因为用户如果修改了主单元格，被合并的单元格数据并不会自动跟着变</td></tr>
</table>
<br>

<div id="TagFuncTableIsTreeNodeRow"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>IsTreeNodeRow</td><td class="funcTD">是否树节点行(即树杈行)</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableIsTreeNodeRow"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>行号</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>1/0 - 是/否</td></tr>
</table>
<br>

<div id="TagFuncTableGetTreeLevel(用途一)"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetTreeLevel(用途一)</td><td class="funcTD">取得某行在树中的层次级别，从0开始计数</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableGetTreeLevel(用途一)"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>行号</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>大于等于0的数字</td></tr>
</table>
<br>

<div id="TagFuncTableGetParentRow"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetParentRow</td><td class="funcTD">取得某行的父节点所在行</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableGetParentRow"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>行号</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>行号, -1表示失败，原因有：行号无效、已经是顶级、当前不是以树展现</td></tr>
</table>
<br>

<div id="TagFuncTableGetChildRow"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetChildRow</td><td class="funcTD">取得某行的第一个儿子</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableGetChildRow"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>行号</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>行号, -1表示失败，原因有：行号无效、已经是末级、当前不是以树展现</td></tr>
</table>
<br>

<div id="TagFuncTableGetChildRows"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetChildRows</td><td class="funcTD">取得某行的所有儿子 (不包括孙子)</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableGetChildRows"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>行号</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>以逗号分隔的行号, 空串表示该行没有儿子</td></tr>
</table>
<br>

<div id="TagFuncTableGetNextSibling"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetNextSibling</td><td class="funcTD">取得某行的下一个或前一个同级(即同辈、兄弟)的行</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableGetNextSibling"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>行号</td></tr>
  <tr><td align=right>参数</td><td colspan=2>可选, true/false, 表示下一个兄弟/前一个兄弟, 默认是 true</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>行号, -1表示失败，原因有：行号无效、已经是同辈中最后的一个(父亲的小儿子)、当前不是以树展现</td></tr>
</table>
<br>

<div id="TagFuncTableSetTreeImage"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>SetTreeImage</td><td class="funcTD">更改树的图标, 也可写成 SetTreeIcon</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableSetTreeImage"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>行号</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>图片文件URL，合拢时的图标</td></tr>
  <tr><td align=right>参数3</td><td colspan=2>可选，图片文件URL，展开时的图标</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>备注</td><td colspan=2>仅对单列多层树有效</td></tr>
</table>
<br>

<div id="TagFuncTableGetTreeImage"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetTreeImage</td><td class="funcTD">取得树的图标, 也可写成 GetTreeIcon</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableGetTreeImage"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>行号</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>URL，如果有不止一个图片(合拢和展开)，则以回车分隔</td></tr>
  <tr><td align=right>备注</td><td colspan=2>仅对单列多层树有效</td></tr>
</table>
<br>

<div id="TagFuncTableExpand(用法1)"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>Expand(用法1)</td><td class="funcTD">展开树节点</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableExpand(用法1)"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>行号(从0开始计数)，如果为空或为 -1，表示展开所有节点</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>可选，true/false, 表示是否展开其子孙的节点。如果参数1为空或-1, 默认是true,  否则默认值是false</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
  <tr class="example"><td align=right>示例</td><td colspan=2>AF.func("expand", "-1 \r\n true");  //展开所有的节点<br>
AF.func("expand", "-1 \r\n false");  //仅展开第一层的所有节点<br>
AF.func("expand", "0 \r\n true");  //展开第一行，包括它的所有子孙节点<br>
AF.func("expand", "0 \r\n false");  //展开第一行，但不包括它的子孙节点 </td></tr>
</table>
<br>

<div id="TagFuncTableExpand(用法2)"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>Expand(用法2)</td><td class="funcTD">展开树的前 n 层节点</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableExpand(用法2)"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>固定的"Level" + 数字，表示展开前 n 层，例如"Level1"、"Level2"</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
  <tr class="example"><td align=right>示例</td><td colspan=2>AF.func("expand", "Level1");  //展开第一层 </td></tr>
</table>
<br>

<div id="TagFuncTableCollapse"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>Collapse</td><td class="funcTD">收拢树节点</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableCollapse"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>可选，行号，如果为空或为 -1，表示收拢所有节点</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
</table>
<br>

<div id="TagFuncTableIsExpand"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>IsExpand</td><td class="funcTD">树节点是否已展开</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableIsExpand"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>行号</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>1/0 - 是/否</td></tr>
</table>
<br>

<div id="TagFuncTableDeleteChild"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>DeleteChild</td><td class="funcTD">删除某行下的所有子孙行</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableDeleteChild"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>行号</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>可选, 格式为 cacheKey=[true/false], 选项的含义为：<br>
<b>cacheKey(或 isCacheKey)</b> - 是否将删除行的Key存入删除缓冲区(用于提交)，默认是true</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>被删除的总行数</td></tr>
</table>
<br>


<div id="TagFuncTableIsLazyloadRow"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>IsLazyloadRow</td><td class="funcTD">某行是否Lazyload行</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableIsLazyloadRow"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>行号</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>1/0 - 是/否</td></tr>
  <tr><td align=right>备注</td><td colspan=2>用于单列多层树、以Lazyload方式加载数据的场景</td></tr>
</table>
<br>

<div id="TagFuncTableRebuildTreeCombine"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>RebuildTreeCombine</td><td class="funcTD">重新整理 TreeCombine 的父节点的 Checkbox</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableRebuildTreeCombine"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>备注</td><td colspan=2>用于 TreeCombine 包含了 "auto" 的树</td></tr>
</table>
<br>

<div id="TagFuncTableRebuildPid"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>RebuildPid</td><td class="funcTD">重新整理 treeformat=byPid 的单列多层树的树杈树叶</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableRebuildPid"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>1/0 - 成功/失败，失败原因为非byPid树</td></tr>
  <tr><td align=right>备注</td><td colspan=2>用于 pid 和 id 字段被手工修改后、需要重新整理树的排列的情况</td></tr>
</table>
<br>

<div id="TagFuncTableClearLazyload"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>ClearLazyload</td><td class="funcTD">强制设定某Lazyload行没有子孙</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableClearLazyload"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>行号</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>备注</td><td colspan=2>用于单列多层树、以Lazyload方式加载数据的场景</td></tr>
</table>
<br>

<div id="TagFuncTableGetCurrentRow (方式一)"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetCurrentRow (方式一)</td><td class="funcTD">取得当前选中的行</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableGetCurrentRow (方式一)"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>行号，空串表示没有当前行；如果有多行，行号之间以逗号分隔</td></tr>
</table>
<br>

<div id="TagFuncTableGetCurrentRow (方式二)"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetCurrentRow (方式二)</td><td class="funcTD">取得当前选中的行</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableGetCurrentRow (方式二)"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>顺序号，从0开始，依次取得第几个选中行，直到返回空串</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>行号，空串表示没有当前行</td></tr>
</table>
<br>

<div id="TagFuncTableGetCurrentRows"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetCurrentRows</td><td class="funcTD">取得当前选中行的数量</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableGetCurrentRows"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>数量</td></tr>
</table>
<br>

<div id="TagFuncTableIsRowSelected"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>IsRowSelected</td><td class="funcTD">某行是否被选中</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableIsRowSelected"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>行号</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>1/0 - 是/否</td></tr>
</table>
<br>

<div id="TagFuncTableGetCurrentCell"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetCurrentCell</td><td class="funcTD">用于取得当 curSelMode=“excel” 时当前选中的单元格范围，因为此时选中的单元格是一个区域</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableGetCurrentCell"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>如果为串 “ColName”，表示返回的列是用列名，否则用列号，默认是列号</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>以逗号分隔的4个值：开始行号, 开始列号或列名，结束行号, 结束列号或列名</td></tr>
  <tr class="example"><td align=right>示例</td><td colspan=2>var s = AF.func("GetCurrentCells", "");  //返回串可能为 "3,5,4,6"<br>
var s = AF.func("GetCurrentCells", "ColName");  //返回串可能为 "3,dept,4,price"</td></tr>
</table>
<br>

<div id="TagFuncTableSelectRow"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>SelectRow</td><td class="funcTD">选定当前行</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableSelectRow"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>行号</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>可选，true/false - 允许动画方式定位/禁止动画, 默认false</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>备注</td><td colspan=2>1.在可多选(curselmode = rows)的情况下,可以有多个参数,分别表示其它各个选中行;<br>
2.如果行号无效，原当前行将失去当前标记;<br>
3.本函数同时也让控件获得了焦点 (即SetFocus)</td></tr>
</table>
<br>

<div id="TagFuncTableSelectCell"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>SelectCell</td><td class="funcTD">选定当前行、并让某个单元格立即进入编辑状态</td><td align="right" style="border-left:0px;"><img src="image/documentg.bmp" title="参见自由表头的演示页: 9.有表头表体的表单(1)">&nbsp;&nbsp;<a href="#func_TagFuncTableSelectCell"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>行号</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>列名或列号，建议采用列名</td></tr>
  <tr><td align=right>参数3</td><td colspan=2>可选，true/false - 允许动画方式定位/禁止动画, 默认false</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>备注</td><td colspan=2>1.如果行列号无效，原当前行将失去当前标记;<br>
2.本函数同时也让控件获得了焦点 (即SetFocus)</td></tr>
</table>
<br>

<div id="TagFuncTableCloseDropdown"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>CloseDropdown</td><td class="funcTD">收起当前正处于下拉状态的树列表</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableCloseDropdown"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>已成功收起的行号、列名，以逗号分隔。空串表示当前没有处于下拉状态的树列表.</td></tr>
</table>
<br>

<div id="TagFuncTableCloseEdit"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>CloseEdit</td><td class="funcTD">结束当前单元格的输入状态</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableCloseEdit"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>可选，true/false - 将输入框中的内容存入单元格/忽略输入框中的内容, 默认true</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>已成功关闭的行号、列名，以逗号分隔。空串表示当前不在输入状态.</td></tr>
</table>
<br>

<div id="TagFuncTableLockCurrent"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>LockCurrent</td><td class="funcTD">锁定当前行，使之无法被切换，当前行内的单元格默认是无法被修改的、右键菜单是屏蔽的.</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableLockCurrent"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>可选, 可以是如下串的组合，以逗号分隔：<br>
<b>edit</b>  - 当前行内的单元格允许被修改<br>
<b>button</b> - 当前行内的按钮、Radio、Checkbox允许被点击 <br>
<b>hyper</b>(或 <b>hyperLink</b>) - 当前行内的超链接允许被点击<br>
<b>menu</b> - 允许右键菜单;<br>
		</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
  <tr class="example"><td align=right>示例</td><td colspan=2>AF.func("LockCurrent", "edit");  //锁定当前行, 但允许本行内容被修改</td></tr>
</table>
<br>

<div id="TagFuncTableUnlockCurrent"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>UnlockCurrent</td><td class="funcTD">解除锁定当前行</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableUnlockCurrent"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
</table>
<br>

<div id="TagFuncTableInsertRows(语法一)"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=160><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>InsertRows(语法一)</td><td class="funcTD">插入行</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableInsertRows(语法一)"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>插入处行号(从0开始，-1表示从末尾添加)</td></tr>
  <tr><td align=right>参数4</td><td colspan=2>可选, 选项子句，语法为：<br>
rows=[?]; isBefore=[true/false]; raiseEvent=[true/false];selectRow=[true/false];openEdit=[true/false];asChild=[true/false];autoId=[true/false], 各选项的含义为：<br>
<b>rows</b>(或 <b>count</b>)  - 行数，默认是 1;<br>
<b>isBefore</b>  - 前插或后插，默认是true;<br>
<b>raiseEvent</b>(或 <b>isRaiseEvent</b>)  - 是否触发 rowsInserted 事件，默认是false<br>
<b>selectRow</b>(或 <b>isSelectRow</b>) - 是否将当前行切换成新插入行，默认是true<br>
<b>openEdit</b>(或 <b>isOpenEdit</b>) - 是否继续直接打开输入框，默认是true<br>
<b>autoId</b> - 如果该列的 &lt;col&gt; 定义了 autoId, 那么是否自动生成唯一值, 默认是true;<br>
<b>asFirstChild</b> - 后插的行是否作为第一个儿子，默认是false;<br>
<b>asLastChild</b> - 后插的行是否作为最后一个儿子，默认是false;<br>
备注：asFirstChild, asLastChild 不能同时为true，并且仅用于 treeFormat="format=byId; autoid=true" 或 "format=bypid"、"format=bydata"的单列多层树、在后插入1行的情况;<br>
		</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>新增行的行号，空串表示失败</td></tr>
  <tr><td align=right>备注</td><td colspan=2>当以树显示时，插入的新行是插入处所在行（即参数1）的同级</td></tr>
  <tr class="example"><td align=right>示例</td><td colspan=2>AF.func("insertRows", -1);  //后端添加一行<br>AF.func("insertRows", "0 \r\n count=4; isBefore=false; raiseEvent=true;SelectRow=false");</td></tr>
</table>
<br>


<div id="TagFuncTableInsertRows(语法二)"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=160><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>InsertRows(语法二)</td><td class="funcTD">插入行 (过时的语法)</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableInsertRows(语法二)"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>插入处行号(从0开始，-1表示从末尾添加)</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>可选, 插入行数，默认1</td></tr>
  <tr><td align=right>参数3</td><td colspan=2>可选, true/false(或1/0、yes/no)，分别表示前插/后插，默认前插</td></tr>
  <tr><td align=right>参数4</td><td colspan=2>可选, 选项子句，语法为：<br>
raiseEvent=[true/false];selectRow=[true/false];openEdit=[true/false];asChild=[true/false];autoId=[true/false], 各选项的含义同语法一.</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>同语法一</td></tr>
</table>
<br>

<div id="TagFuncTableInsertCol"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>InsertCol</td><td class="funcTD">插入列</td><td align="right" style="border-left:0px;"><img src="image/documentg.bmp" title="参见演示页: 16.行的复选">&nbsp;&nbsp;<a href="#func_TagFuncTableInsertCol"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>插入处列号(从0开始，-1表示从末尾添加)</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>列的参数，例如"name=price;title=项目名称;width=100"，列属性可参考《Treelist XML文档规范》之Cols\col;</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>新增列的列号，空串表示失败</td></tr>
</table>
<br>

<div id="TagFuncTableDeleteRows (方式一)"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>DeleteRows (方式一)</td><td class="funcTD">删除行</td><td align="right" style="border-left:0px;"><img src="image/documentg.bmp" title="参见演示页: 21.提交修改内容、26.自定义右键菜单">&nbsp;&nbsp;<a href="#func_TagFuncTableDeleteRows (方式一)"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>开始删除的行号</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>行数，-1表示删除后面所有行</td></tr>
  <tr><td align=right>参数3</td><td colspan=2>可选, 选项子句，语法为：<br>
raiseEvent=[true/false];cacheKey=[true/false];withChild=[true/false], 各选项的含义为：<br>
<b>raiseEvent</b>(或 <b>isRaiseEvent</b>)  - 是否触发 rowsDeleted 事件，默认是false<br>
<b>cacheKey</b>(或 <b>isCacheKey</b>) - 是否将删除行的Key存入删除缓冲区(用于提交)，默认是true<br>
<b>withChild</b>(或 <b>withChildren</b>) - 当以树显示时，是否将其子孙行也删除，默认是false<br>
		</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
</table>
<br>

<div id="TagFuncTableDeleteRows (方式二)"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>DeleteRows (方式二)</td><td class="funcTD">删除行</td><td align="right" style="border-left:0px;"><img src="image/documentg.bmp" title="参见演示页: 16.行的复选">&nbsp;&nbsp;<a href="#func_TagFuncTableDeleteRows (方式二)"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>表达式。满足表达式的行均会被删除</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>可选, 选项子句，语法为：<br>
raiseEvent=[true/false];cacheKey=[true/false];withChild=[true/false], 各选项的含义为：<br>
<b>raiseEvent</b>(或 <b>isRaiseEvent</b>)  - 是否触发 rowsDeleted 事件，默认是false<br>
<b>cacheKey</b>(或 <b>isCacheKey</b>) - 是否将删除行的Key存入删除缓冲区(用于提交)，默认是true<br>
<b>withChild</b>(或 <b>withChildren</b>) - 当以树显示时，是否将其子孙行也删除，默认是false<br>
		</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
  <tr class="example"><td align=right>示例</td><td colspan=2>AF.func("deleteRows", "price>100 and toUpperCase(left(ProdId,2))='KS' \r\n cacheKey=true");</td></tr>
</table>
<br>

<div id="TagFuncTableDeleteCurrentRow"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>DeleteCurrentRow</td><td class="funcTD">删除当前行</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableDeleteCurrentRow"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>可选, 选项子句，语法为：<br>
raiseEvent=[true/false];cacheKey=[true/false];withChild=[true/false], 各选项的含义为：<br>
<b>raiseEvent</b>(或 <b>isRaiseEvent</b>)  - 是否触发 rowsDeleted 事件，默认是false<br>
<b>cacheKey</b>(或 <b>isCacheKey</b>) - 是否将删除行的Key存入删除缓冲区(用于提交)，默认是true<br>
<b>withChild</b>(或 <b>withChildren</b>) - 当以树显示时，是否将其子孙行也删除，默认是false<br>
		</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>备注</td><td colspan=2>如果当前行允许多选，那么可能有多行</td></tr>
</table>
<br>

<div id="TagFuncTableCopyCurrentRow"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>CopyCurrentRow</td><td class="funcTD">将当前行拷贝入操作系统的剪帖板</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableCopyCurrentRow"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>可选，可包含如下属性子句：content=[asData/asDisplay];inIncludeHide=[true/false]，含义为:<br>
<b>content</b> - 内容，asData表示纯数据，asDisplay表示显示的内容，默认是asData;<br>
<b>includeHide</b> (或<b>isIncludeHide</b>) - 是否包含隐藏行或隐藏列，默认是false;<br>
		</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>备注</td><td colspan=2>如果有多个当前行(多选)，那么所有选中行内容都将被复制</td></tr>
</table>
<br>

<div id="TagFuncTablePasteCurrentRow"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>PasteCurrentRow</td><td class="funcTD">将操作系统剪帖板内容粘帖到当前行</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTablePasteCurrentRow"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>备注</td><td colspan=2>如果有多个当前行(多选)，那么所有选中行内容都将被粘帖</td></tr>
</table>
<br>

<div id="TagFuncTablePasteNewRow"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>PasteNewRow</td><td class="funcTD">将操作系统剪帖板内容粘帖到新增行</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTablePasteNewRow"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
</table>
<br>

<div id="TagFuncTableMoveCol"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>MoveCol</td><td class="funcTD">移动某列的位置</td><td align="right" style="border-left:0px;"><img src="image/documentg.bmp" title="参见演示页: 13.分类汇总">&nbsp;&nbsp;<a href="#func_TagFuncTableMoveCol"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>列名或列号，建议采用列名</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>目标列的列名或列号，建议采用列名</td></tr>
  <tr><td align=right>参数3</td><td colspan=2>可选, true/false(或1/0、yes/no)，分别表示前插/后插，默认前插</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>新的位置, -1失败</td></tr>
</table>
<br>

<div id="TagFuncTableMoveRow"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>MoveRow</td><td class="funcTD">移动某行的位置</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableMoveRow"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>行号</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>目标行的行号</td></tr>
  <tr><td align=right>参数3</td><td colspan=2>可选, true/false(或1/0、yes/no)，分别表示前插/后插，默认前插</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>新的位置, -1失败</td></tr>
</table>
<br>

<div id="TagFuncTableGetNextValidRow"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetNextValidRow</td><td class="funcTD">遍历行，用于需要自动跨越隐藏行、树杈行(多列多层树)、小计行、合计行的情形</td><td align="right" style="border-left:0px;"><img src="image/documentg.bmp" title="参见小型页面控件的演示页: 2.与Treelist联动">&nbsp;&nbsp;<a href="#func_TagFuncTableGetNextValidRow"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>开始行, 如果是从头遍历，参数应该为空串或“-1”</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>可选, 1 / -1 表示 正向/反向遍历, 默认是1</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>行号，空串表示遍历完毕</td></tr>
</table>
<br>

<div id="TagFuncTableGetNextValidCol"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetNextValidCol</td><td class="funcTD">遍历列，用于需要自动跨越多列多层树的首列的情形</td><td align="right" style="border-left:0px;"><img src="image/documentg.bmp" title="参见自由表头的演示页: 14.和Treelist互动、13.基于Freeform的对话框">&nbsp;&nbsp;<a href="#func_TagFuncTableGetNextValidCol"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>开始列的列名, 如果是从头遍历，参数应该为空串</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>列名，空串表示遍历完毕</td></tr>
  <tr class="example"><td align=right>示例</td><td colspan=2>for(var col=AF.func("GetNextValidCol", ""); col!=""; col=AF.func("GetNextValidCol", col)) {<br>
  ...<br>
}</td></tr>
</table>
<br>

<div id="TagFuncTableGetNextVisibleCol"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetNextVisibleCol</td><td class="funcTD">遍历可视列，用于需要自动跨越隐藏列、树的首列的情形</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableGetNextVisibleCol"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>开始列的列名, 如果是从头遍历，参数应该为空串</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>列名，空串表示遍历完毕</td></tr>
  <tr class="example"><td align=right>示例</td><td colspan=2>for(var col=AF.func("GetNextVisibleCol", ""); col!=""; col=AF.func("GetNextVisibleCol", col)) {<br>
  ...<br>
}</td></tr>
</table>
<br>

<div id="TagFuncTableIsTotalRow"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>IsTotalRow</td><td class="funcTD">是否合计行，通常合计行只有一行，且位于最后</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableIsTotalRow"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>行号(从0开始计数)</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>1 - 是，0 - 否</td></tr>
</table>
<br>

<div id="TagFuncTableIsSubTotalRow"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>IsSubTotalRow</td><td class="funcTD">是否小计行</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableIsSubTotalRow"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>行号</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>1 - 是，0 - 否</td></tr>
</table>
<br>

<div id="TagFuncTableGetTreeLevel(用途二)"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetTreeLevel(用途二)</td><td class="funcTD">取得某小计行的分类层次级别，从1开始计数</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableGetTreeLevel(用途二)"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>行号</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>如果此行不是小计行，返回0，否则返回大于0的数字，其含义是分类的层次，最外层是1</td></tr>
</table>
<br>

<div id="TagFuncTableGetRowKey"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetRowKey</td><td class="funcTD">取得某行的Key(即键值)</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableGetRowKey"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>行号</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>可选，复合主键的分隔符，默认逗号(,)</td></tr>
  <tr><td align=right>参数3</td><td colspan=2>可选, 0或1, 1表示取被修改前的原始内容, 默认是0</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>Key串</td></tr>
</table>
<br>

<div id="TagFuncTableGetRowEditAble"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetRowEditAble</td><td class="funcTD">某行是否能修改</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableGetRowEditAble"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>行号</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>1 - 是，0 - 否</td></tr>
</table>
<br>

<div id="TagFuncTableGetColEditAble"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetColEditAble</td><td class="funcTD">某列是否能修改</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableGetColEditAble"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>列名</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>1 - 是，0 - 否</td></tr>
</table>
<br>

<div id="TagFuncTableSetRowEditAble"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>SetRowEditAble</td><td class="funcTD">置某行能否修改</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableSetRowEditAble"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>行号</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>true/false(或1/0、yes/no)</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>备注</td><td colspan=2>通常是 &lt;Properties&gt; 中的 editable 为 true 的情况下, 本函数才有意义</td></tr>
</table>
<br>

<div id="TagFuncTableSetColEditAble"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>SetColEditAble</td><td class="funcTD">置某列能否修改</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableSetColEditAble"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>列名</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>true/false(或1/0、yes/no)</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>备注</td><td colspan=2>通常是 &lt;Properties&gt; 中的 editable 为 true 的情况下, 本函数才有意义</td></tr>
</table>
<br>

<div id="TagFuncTableGetColName"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetColName</td><td class="funcTD">取得列名</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableGetColName"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>列号</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>串, 空串表示列号已经超出范围了</td></tr>
</table>
<br>

<div id="TagFuncTableGetColTitle"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetColTitle</td><td class="funcTD">取得列标题</td><td align="right" style="border-left:0px;"><img src="image/documentg.bmp" title="参见小型页面控件的演示页: 2.与Treelist联动">&nbsp;&nbsp;<a href="#func_TagFuncTableGetColTitle"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>列号，或列名</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>串</td></tr>
</table>
<br>

<div id="TagFuncTableSetRowDeleteAble"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>SetRowDeleteAble</td><td class="funcTD">单独指定某行是否允许被删除(仅限于右键菜单)</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableSetRowDeleteAble"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>行号</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>true/false</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
</table>
<br>

<div id="TagFuncTableGetRowDeleteAble"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetRowDeleteAble</td><td class="funcTD">取得某行是否允许删除</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableGetRowDeleteAble"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>行号</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>1 / 0 - 允许/不允许</td></tr>
</table>
<br>

<div id="TagFuncTableGetRowBackColor"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetRowBackColor</td><td class="funcTD">取得某行被单独指定的背景色</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableGetRowBackColor"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>行号</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>颜色串，空串表示该行尚未被单独指定背景色</td></tr>
</table>
<br>

<div id="TagFuncTableSetRowBackColor"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>SetRowBackColor</td><td class="funcTD">单独指定某行的背景色</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableSetRowBackColor"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>行号</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>颜色串，空串表示解除背景色</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
</table>
<br>

<div id="TagFuncTableGetRowTextColor"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetRowTextColor</td><td class="funcTD">取得某行被单独指定的文字色</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableGetRowTextColor"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>行号</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>颜色串，空串表示该行尚未被单独指定文字色</td></tr>
</table>
<br>

<div id="TagFuncTableSetRowTextColor"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>SetRowTextColor</td><td class="funcTD">单独指定某行的文字色</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableSetRowTextColor"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>行号</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>颜色串，空串表示解除文字色</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
</table>
<br>

<div id="TagFuncTableGetRowEnable"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetRowEnable</td><td class="funcTD">某行是否Enable，disable的行以灰色(或删除线)显示、不可编辑、不触发Clicked和DblClicked事件、不可拖拽</td><td align="right" style="border-left:0px;"><img src="image/documentg.bmp" title="请参见演示页: 29.下拉的其它功能">&nbsp;&nbsp;<a href="#func_TagFuncTableGetRowEnable"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>行号</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>1/0/空串 - 是/否/无效行号</td></tr>
</table>
<br>

<div id="TagFuncTableSetRowEnable"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>SetRowEnable</td><td class="funcTD">置某行为Enable或disable，disable的行以灰色(或删除线)显示、不可编辑、不触发Clicked事件</td><td align="right" style="border-left:0px;"><img src="image/documentg.bmp" title="请参见演示页: 29.下拉的其它功能">&nbsp;&nbsp;<a href="#func_TagFuncTableSetRowEnable"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>行号</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>true/false(或1/0、yes/no) - 表示enable/disable</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
</table>
<br>

<div id="TagFuncTableIsRowHide"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>IsRowHide</td><td class="funcTD">或GetRowHide，某行是否隐藏</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableIsRowHide"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>行号</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>1/0/空串 - 隐藏/显示/无效行号</td></tr>
</table>
<br>

<div id="TagFuncTableHideRow"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>HideRow</td><td class="funcTD">隐藏某行</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableHideRow"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>行号</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>true/false - 隐藏/显示</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
</table>
<br>

<div id="TagFuncTableIsColHide"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>IsColHide</td><td class="funcTD">或GetColHide，某列是否隐藏，等同GetColProp(colname, "isHide")</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableIsColHide"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>列名</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>1/0/空串 - 隐藏/显示/无效列名</td></tr>
</table>
<br>

<div id="TagFuncTableHideCol"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>HideCol</td><td class="funcTD">隐藏某列，等同SetColProp(colname, "isHide", 1/0)</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableHideCol"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>列名</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>true/false - 隐藏/显示</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
</table>
<br>

<div id="TagFuncTableGetColCheckState"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetColCheckState</td><td class="funcTD">取得isCheckboxOnly列标题处的CheckBox的状态</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableGetColCheckState"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>列名或列号，建议采用列名</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>1/0 - 已选中/未选中</td></tr>
</table>
<br>

<div id="TagFuncTableSetColCheckState"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>SetColCheckState</td><td class="funcTD">设置isCheckboxOnly列标题处的CheckBox的状态</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableSetColCheckState"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>列名或列号，建议采用列名</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>1/0 - 已选中/未选中</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>备注</td><td colspan=2>仅修改选中状态，并不改动数据. 如果要修改整列的数据，请执行 SetColCellData 函数</td></tr>
</table>
<br>

<div id="TagFuncTableGetColGroup"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetColGroup</td><td class="funcTD">取得某列所属的分组(Group)</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableGetColGroup"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>列名或列号，建议采用列名</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>top/all - 仅返回顶层分组名/返回所有分组名，默认是 top</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>所属Group的名称，如果有多层分组，则以逗号分隔</td></tr>
</table>
<br>

<div id="TagFuncTableEnsureVisible"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>EnsureVisible</td><td class="funcTD">保证让某个单元格或某行在屏幕中可见</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableEnsureVisible"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>行号</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>可选, 列名, 如果为空表示仅定位行</td></tr>
  <tr><td align=right>参数3</td><td colspan=2>可选，true/false - 允许动画方式定位/禁止动画, 默认false</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
</table>
<br>

<div id="TagFuncTableFind"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>Find</td><td class="funcTD">按表达式查找，并返回首个符合条件的行号</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableFind"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>表达式(可参见<a href="pub01.htm" target=_blank>“公共内容\表达式”</a>)</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>可选, 格式为startRow=[行号];content=[asData/asDisplay];isReverse=[?], 其含义为:<br>
<b>startRow</b> - 开始的行号，默认是0;<br>
<b>content</b> - 为 asData 或 asDispplay，默认是asData, 表示搜索的内容是值还是显示的文字(例如下拉的值和显示文字是不一样的);<br>
<b>isReverse</b> - 为 true/false, 表示正向搜索 / 逆向搜索，默认是false;<br>
</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>行号，-1表示未能找到匹配的行</td></tr>
</table>
<br>

<div id="TagFuncTableFindAll"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>FindAll</td><td class="funcTD">按表达式查找，并返回符合条件的所有行号</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableFindAll"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>表达式(可参见<a href="pub01.htm" target=_blank>“公共内容\表达式”</a>)</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>可选, 格式为 content=[asData/asDisplay], 其含义为:<br>
<b>content</b> - 为 asData 或 asDispplay，默认是asData, 表示搜索的内容是值还是显示的文字(例如下拉的值和显示文字是不一样的).
</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>从小到大排列的行号串，行号之间以逗号分隔，空串表示未能找到匹配的行</td></tr>
  <tr class="example"><td align=right>示例</td><td colspan=2>var s=AF.func("findAll", "price<20 and if(len(ProcId)==0, 1, 0)");</td></tr>
</table>
<br>

<div id="TagFuncTableFindByKey"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>FindByKey</td><td class="funcTD">按键值搜索</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableFindByKey"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>键值</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>可选，表示复合主键之间的分隔符，默认是逗号</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>行号，-1表示未找到</td></tr>
</table>
<br>

<div id="TagFuncTableGetUnique"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetUnique</td><td class="funcTD">取得某列(或多列)的唯一的值的数组</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableGetUnique"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>列名, 也允许以加号(+)分隔的多个列</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>可选, 格式为 CaseSensitive=[?];Sort=[?], 其含义为:<br>
<b>CaseSensitive</b> - 大小写是否敏感, true或false, 默认是true;<br>
<b>Sort</b> - 是否对结果进行排序, "none"表示不排序; "string"表示按照字符串方式排序; "number"表示按照数值大小排序, 默认是"none";<br>
(注：如果 sort=number, 则该列必须为数值列、且只能是单个列<br>
</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>以回车符分隔的值串</td></tr>
  <tr class="example"><td align=right>示例</td><td colspan=2>var s=AF.func("GetUnique", "price \r\n Sort=Number");<br>
var s=AF.func("GetUnique", "ID+Name \r\n CaseSensitive=0");</td></tr>
</table>
<br>

<div id="TagFuncTableFilter"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>Filter</td><td class="funcTD">对已加载的数据进行过滤，只显示满足条件的行</td><td align="right" style="border-left:0px;"><img src="image/documentg.bmp" title="参见演示页: 27.过滤、28.过滤: 关联下拉">&nbsp;&nbsp;<a href="#func_TagFuncTableFilter"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>表达式(可参见<a href="pub01.htm" target=_blank>“公共内容\表达式”</a>)</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>可选，格式为 droplistCol=[?]; content=[asData/asDisplay], 其含义为：<br>
<b>droplistCol</b> -  , 列名，表示仅对该列的下拉TreeList的内容进行过滤;<br>
<b>content</b> - 为 asData 或 asDispplay，默认是asData, 表示搜索的内容是值还是显示的文字(例如下拉的值和显示文字是不一样的).</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>1 - 成功，0 - 失败，失败原因通常为表达式书写错误</td></tr>
  <tr class="example"><td align=right>示例</td><td colspan=2>AF.func("Filter", "price<20 and if(len(ProcId)==0, 1, 0)");</td></tr>
</table>
<br>

<div id="TagFuncTableApplyFilter"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>ApplyFilter</td><td class="funcTD">对某个下拉列执行过滤，通常用于EditChanged事件中，对多个关联下拉、下拉过滤采用了表达式的某个下拉强制过滤</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableApplyFilter"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>基准的行号，例如在EditChanged事件中，行号就是 p1 参数</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>下拉列的列名</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>无</td></tr>
  <tr class="example"><td align=right>示例</td><td colspan=2>AF.func("ApplyFilter", p1 + "\r\n cityId");</td></tr>
</table>
<br>

<div id="TagFuncTableEnableDrag"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>EnableDrag</td><td class="funcTD">使2个Treelist之间能够用鼠标拖拉(Drag)行</td><td align="right" style="border-left:0px;"><img src="image/documentg.bmp" title="参见演示页: 17.Treelist拖曳">&nbsp;&nbsp;<a href="#func_TagFuncTableEnableDrag"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>另一个TreeList的句柄(句柄可通过GetHandle()取得)</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>1 - 成功</td></tr>
</table>
<br>

<div id="TagFuncTableDisableDrag"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>DisableDrag</td><td class="funcTD">终止2个Treelist之间的行拖拉</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableDisableDrag"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>另一个TreeList的句柄(句柄可通过GetHandle()取得)</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>1 - 成功</td></tr>
</table>
<br>

<div id="TagFuncTableCopy"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>Copy</td><td class="funcTD">将某单元格/某行/某区块内容复制进内存剪切板</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableCopy"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>开始行号</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>开始列名或列号，建议采用列名</td></tr>
  <tr><td align=right>参数3</td><td colspan=2>可选，结束行号，默认等于开始行号</td></tr>
  <tr><td align=right>参数4</td><td colspan=2>可选，结束列名或列号，建议采用列名，-1表示最后列，默认值是-1</td></tr>
  <tr><td align=right>参数5</td><td colspan=2>可选，可包含如下属性子句：content=[asData/asDisplay];isIncludeTotalRow=[true/false];inIncludeHide=[true/false]，含义为:<br>
<b>content</b> - 内容，asData表示纯数据，asDisplay表示显示的内容，默认是asData;<br>
<b>includeTotalRow</b> (或<b>isIncludeTotalRow</b>) - 是否包含合计/小计行，默认是false;<br>
<b>includeHide</b> (或<b>isIncludeHide</b>) - 是否包含隐藏行或隐藏列，默认是false;<br>
		</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>1/0 - 成功/失败</td></tr>
  <tr class="example"><td align=right>示例</td><td colspan=2>AF.func("copy", "3 \r\n 0");  //复制第四行整行<br>
AF.func("copy", "3 \r\n orderid \r\n 5 \r\n price \r\n content=asDisplay;includeHide=true");  //复制一个区块</td></tr>
</table>
<br>

<div id="TagFuncTableScrollToRow"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>ScrollToRow</td><td class="funcTD">窗口滚动到某行</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableScrollToRow"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>行号, 表示滚动到的首个可见行</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>备注</td><td colspan=2>请参见函数 GetScrollRow </td></tr>
</table>
<br>

<div id="TagFuncTableGetScrollRow"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetScrollRow</td><td class="funcTD">取得窗口首个可见行</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableGetScrollRow"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>行号</td></tr>
  <tr><td align=right>备注</td><td colspan=2>请参见函数 ScrollToRow </td></tr>
</table>
<br>

<div id="TagFuncTableValidate"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>Validate</td><td class="funcTD">验证输入的内容</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableValidate"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>可选, 可以有如下的选项，相互以分号分隔：<br>
<b>isReturnText</b> - true/false, true 表示未通过验证时返回错误文字串, 不浮现错误提示窗; false 表示将当前单元格切换到未通过验证的单元格, 并自动浮现出错误提示, 默认是 false;<br>
<b>startRow</b> - 开始行，默认是0;<br>
<b>endRow</b> - 结束行，默认是-1，-1表示最后行;<br>
<b>isValidateKey</b> - 是否需要在校验Key(例如key重复)，默认是True;<br>
<b>includeCol / excludeCol</b> - 仅包含某些列/不包含某些列，二者可选其一，表示列的<b>范围</b>. 列名之间以逗号分隔。默认是空串，表示验证所有列;<br>
　　备注1：这个“范围”是指验证的范围，以及限定NMD中“M”的识别范围.<br>
　　备注2：Key以及Key的验证和这个“范围”无关.<br>
</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>如果 isReturnText 参数为 false, 返回 1 或 0, 分别表示通过验证、未通过验证.<br>
如果 isReturnText 参数为 true, 验证通过时返回空串, 未通过时则返回这种 json 串:<br>
　　　　{"row":3, "col":"price", "errorType":"key", "errorText":"价格未输入!"}<br>
其中 row 和 col 表示错误处的行列, errorType 是未通过的验证类型, 有 key, unique, nullable, validation 四种</td></tr>
  <tr><td align=right>备注</td><td colspan=2>1.验证范围为 notNull、isUnique，以及 &lt;Validations&gt; 中的内容;<br>2.一般不需要调用这个函数，因为函数GetChangedXML( )本身就包含了验证过程.</td></tr>
  <tr class="example"><td align=right>示例</td><td colspan=2>AF.func("Validate", "isValidateKey=false");</td></tr>
</table>
<br>

<div id="TagFuncTableGetChangedXML"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetChangedXML</td><td class="funcTD">调用Validate( )验证，并生成用于提交的XML/JSON大串, XML/JSON格式规范请参见 "XML提交格式规范". </td><td align="right" style="border-left:0px;"><img src="image/documentg.bmp" title="参见演示页: 21.提交修改内容、22.4种提交级别、23.连续输入提交控制">&nbsp;&nbsp;<a href="#func_TagFuncTableGetChangedXML"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>可选, 可以有如下的选项，相互以分号分隔：<br>
<b>level</b> - 级别号，可以是0(默认)、1、2、3，其含义分别为:<br>　　0 - 级别0，生成当前全部、最新内容(不包括修改前的原始内容);<br>　　1 - 级别1，仅生成被修改过的单元格的内容(包括原始内容);<br>　　2 - 级别2，在级别1的基础上，增加被修改过单元的整行内容;<br>　　3 - 级别3，内容包含所有行、所有列、修改前后的内容;<br>
<b>isIgnoreChange</b> - true/false, 仅用于Level=0.  true表示不管内容是否被修改过，始终生成XML; false表示除非内容被修改过，否则返回空串. 默认是false;<br>
<b>returnFormat</b> - 本函数返回串的格式, xml/json, 默认是xml;<br>
<b>startRow</b> - 开始行，默认是0;<br>
<b>endRow</b> - 结束行，默认是-1，-1表示最后行;<br>
<b>DateFormat</b> - 日期的格式，默认是'%Y.%m.%d'，可参见<a href="pub02.htm#TagFuncTablenow" target=_blank>公共内容中now( )函数</a>的参数;<br>
<b>DateTimeFormat</b> - 日期时间的格式，默认是'%Y.%m.%d %H:%M:%S'，可参见<a href="pub02.htm#TagFuncTablenow" target=_blank>公共内容中now( )函数;</a>的参数<br>
<b>isValidateKey</b> - 是否需要在客户端校验Key(如key重复)，默认是True;<br>
<b>isExecuteValidations</b> - 是否自动执行XML描述文件的 &lt;Validations&gt; 中的验证，默认是true.<br>
<b>isNeedDeleteDetail</b> - 删除行的XML节点, 除了Key以外, 是否还需要包含该行的全部原始内容，默认是False，用于级别1、2、3;<br>
<b>includeCol / excludeCol</b> - 仅包含某些列/不包含某些列，二者可选其一，表示列的<b>范围</b>. 列名之间以逗号分隔。默认是空串，表示提交所有列;<br>
<b>absIncludeCol</b> - 始终包含某些列，不管其列数据有没有被修改过，并且在删除行的XML节点中也包含这些列的内容. 仅用于Level=1;<br>
　　备注1：这个“范围”是指提交、验证的范围，以及限定NMD中“M”的识别范围.<br>
　　备注2：Key以及Key的验证和这个“范围”无关.<br>
<b>CompKeySep</b> - 复合主键的分隔符，默认逗号分隔;<br>
</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>XML/JSON大串 - 成功;<br>空串 - 内容尚未被修改;<br>0 - 失败(原因为未通过客户端验证, 如notNull、isUnique)</td></tr>
  <tr><td align=right>备注</td><td colspan=2>1.XML描述文件的 &lt;Properties&gt; 中必须定义Key;<br>2.如果包含了开始行和结束行参数，生成的XML中将不包括被删除行的信息</td></tr>
  <tr class="example"><td align=right>示例</td><td colspan=2>//取得级别为0、复合主键无分隔符的XML提交串，且不校验Key是否重复<br>
AF.func("GetChangedXML", "level=0; CompKeySep=;isValidateKey=false");<br>
//取得级别为1、不校验Key重复、仅包含3个字段的XML提交串<br>
AF.func("GetChangedXML", "level=1; isValidateKey=false; includeCol=id,price,custid");</td></tr>
</table>
<br>

<div id="TagFuncTableGetRowChanged"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetRowChanged</td><td class="funcTD">取得某行或整表的修改状态</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableGetRowChanged"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>行号.  如果为 -1，表示所有行，即整个表.</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>可选, 状态掩码，为字母 N、M、D 的组合(简称“ni-ma-的”)：<br>
N - 表示有新增行;<br>
M - 表示有修改过的行;<br>
D - 表示有删除行(仅用于整表)<br>
默认值为 NM 或 NMD(如果是整表)</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>为上述3个字母的组合，空串表示未符合掩码</td></tr>
  <tr class="example"><td align=right>示例</td><td colspan=2>AF.func("GetRowChanged", "-1\r\n ND");　　//可能返回N、D、ND、空串<br>
AF.func("GetRowChanged", "30");　　//可能返回N、M、NM、空串</td></tr>
</table>
<br>

<div id="TagFuncTableSetAsNewRow"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>SetAsNewRow</td><td class="funcTD">修改某行的“新增行”状态(和GetRowChanged的 "N" 相关)，它影响GetChangedXML( )的执行结果</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableSetAsNewRow"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>行号, 也可以是逗号分隔的多个行号、减号分隔的行号范围</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>可选，true/false，默认true</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
  <tr class="example"><td align=right>示例</td><td colspan=2>AF.func("SetAsNewRow", "2 \r\n true");<br>AF.func("SetAsNewRow", "3,5,7-11,13-22 \r\n true");</td></tr>
</table>
<br>

<div id="TagFuncTableGetCellChanged"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetCellChanged</td><td class="funcTD">取得某单元格是否被修改过</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableGetCellChanged"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>行号</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>列名或列号，建议采用列名</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>M - 被修改过，空串：未改过</td></tr>
</table>
<br>

<div id="TagFuncTableSetCellChanged"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>SetCellChanged</td><td class="funcTD">强制更改某单元格的修改状态</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableSetCellChanged"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>行号</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>列名或列号，建议采用列名</td></tr>
  <tr><td align=right>参数3</td><td colspan=2>M - 将原始缓存数据修改成和当前不一样的内容; 空串 - 用当前内容替换原始缓存数据, 即清除修改状态</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
</table>
<br>


<div id="TagFuncTableSetColCellChanged"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>SetColCellChanged</td><td class="funcTD">强制更改所有行、某列的单元格的修改状态</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableSetColCellChanged"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>列名或列号，建议采用列名</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>M - 将原始缓存数据修改成和当前不一样的内容; 空串 - 用当前内容替换原始缓存数据, 即清除修改状态</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
</table>
<br>

<div id="TagFuncTableResetChanged"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>ResetChanged</td><td class="funcTD">合并修改内容，清除行和单元格的修改标记(即 "NMD" 状态)，以避免重复提交.</td><td align="right" style="border-left:0px;"><img src="image/documentg.bmp" title="参见演示页: 23.连续输入提交控制">&nbsp;&nbsp;<a href="#func_TagFuncTableResetChanged"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>可选，表示开始行，默认是0</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>可选，表示结束行，默认是-1, -1表示末行</td></tr>
  <tr><td align=right>参数3</td><td colspan=2>可选，是多个"名=值"对选项，以分号分隔：<br>
<b>includeCol/excludeCol</b> - 仅包括某些列/仅排除某些列，二者只能选其一, 列名之间以逗号分隔. 默认为空，表示包含全部列;<br>
<b>resetDelete</b> - true/false, true表示清空删除行的缓存，默认是true, 该选项和开始行、结束行无关;<br>
<b>resetNew</b> - true/false, true表示清除新增行的“新增”标志，默认是true, 该选项和开始行、结束行有关;<br>
		</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
  <tr class="example"><td align=right>示例</td><td colspan=2>//清除所有修改标记;<br>
AF.func("resetchanged", "");<br>
//仅清除某单元格的"M"标志;<br>
AF.func("resetchanged", "3\r\n3\r\n includeCol=id; resetDelete=false; resetNew=false");<br>
//清除所有行中除了3个列以外的"M"标志, 并清除删除行缓存("D");<br>
AF.func("resetchanged", "0\r\n-1\r\n excludeCol=id,orgNo,flag; resetDelete=true; resetNew=false");</td></tr>
</table>
<br>

<div id="TagFuncTableGetDeleteRows"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetDeleteRows</td><td class="funcTD">或 GetDeletedRows，取得被删除的总行数.</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableGetDeleteRows"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>被删除的总行数</td></tr>
  <tr><td align=right>备注</td><td colspan=2>删除区并不缓存新插入的行.</td></tr>
</table>
<br>

<div id="TagFuncTableGetDeleteKey"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetDeleteKey</td><td class="funcTD">或 GetDeletedKey，取得被删除的行中某行的Key.</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableGetDeleteKey"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>序号，空串表示取得所有被删行的Key</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>Key值，如果是多个行，则以逗号分隔</td></tr>
  <tr><td align=right>备注</td><td colspan=2>删除区并不缓存新插入的行.</td></tr>
</table>
<br>

<div id="TagFuncTableUnDelete"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>UnDelete</td><td class="funcTD">恢复被删除的行</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableUnDelete"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>以逗号分隔的Key值，空串表示恢复所有被删行</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>恢复的总行数</td></tr>
  <tr><td align=right>备注</td><td colspan=2>1.被恢复的行将位于表格末尾处;<br>
2.删除区并不缓存新插入的行.</td></tr>
</table>
<br>

<div id="TagFuncTableEnableUndo"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>EnableUndo</td><td class="funcTD">启用Undo/Redo功能</td><td align="right" style="border-left:0px;"><img src="image/documentg.bmp" title="参见演示页: 36.Undo/Redo">&nbsp;&nbsp;<a href="#func_TagFuncTableEnableUndo"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>1/0 - 成功/失败</td></tr>
</table>
<br>
<div id="TagFuncTableIsUndoEnabled"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>IsUndoEnabled</td><td class="funcTD">Undo/Redo功能是否已启用</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableEnableUndo"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>1/0 - 是/否</td></tr>
</table>
<br>

<div id="TagFuncTableUndo"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>Undo</td><td class="funcTD">执行Undo操作</td><td align="right" style="border-left:0px;"><img src="image/documentg.bmp" title="参见演示页: 36.Undo/Redo">&nbsp;&nbsp;<a href="#func_TagFuncTableUndo"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
</table>
<br>
<div id="TagFuncTableRedo"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>Redo</td><td class="funcTD">执行Redo操作</td><td align="right" style="border-left:0px;"><img src="image/documentg.bmp" title="参见演示页: 36.Undo/Redo">&nbsp;&nbsp;<a href="#func_TagFuncTableRedo"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
</table>
<br>
<div id="TagFuncTableSaveUndo"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>SaveUndo</td><td class="funcTD">将当前状态保存到 Undo 缓存,</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableSaveUndo"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>备注</td><td colspan=2>凡是涉及到对树列表的更改数据的交互操作, 系统都是自动保存Undo状态的, 但调用API函数更改数据时 (例如 SetCellData) 是不自动保存Undo状态. 本函数通常用于 js 更改数据前, </td></tr>
</table>
<br>

<div id="TagFuncTableUndoAble"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>UndoAble</td><td class="funcTD">当前是否有Undo可操作</td><td align="right" style="border-left:0px;"><img src="image/documentg.bmp" title="参见演示页: 36.Undo/Redo">&nbsp;&nbsp;<a href="#func_TagFuncTableUndoAble"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>1/0 - 是/否</td></tr>
</table>
<br>
<div id="TagFuncTableRedoAble"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>RedoAble</td><td class="funcTD">当前是否有Redo可操作</td><td align="right" style="border-left:0px;"><img src="image/documentg.bmp" title="参见演示页: 36.Undo/Redo">&nbsp;&nbsp;<a href="#func_TagFuncTableRedoAble"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>1/0 - 是/否</td></tr>
</table>
<br>

<div id="TagFuncTableResetUndo"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>ResetUndo</td><td class="funcTD">清空Undo缓存，相当于重置Undo</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableResetUndo"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
</table>
<br>

<div id="TagFuncTableGetCustom"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetCustom</td><td class="funcTD">取得当前Treelist的外观状态XML串用于上传，使操作者可定制外观</td><td align="right" style="border-left:0px;"><img src="image/documentg.bmp" title="参见演示页: 34.定制">&nbsp;&nbsp;<a href="#func_TagFuncTableGetCustom"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>XML串</td></tr>
</table>
<br>

<div id="TagFuncTableSetCustom"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>SetCustom</td><td class="funcTD">应用原先已保存(上传)的外观状态XML串， 通常需要在 Build( ) 后立即执行</td><td align="right" style="border-left:0px;"><img src="image/documentg.bmp" title="参见演示页: 34.定制">&nbsp;&nbsp;<a href="#func_TagFuncTableSetCustom"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>XML串</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
</table>
<br>

<div id="TagFuncTableAddMenu"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>AddMenu</td><td class="funcTD">增加自定义的弹出菜单项</td><td align="right" style="border-left:0px;"><img src="image/documentg.bmp" title="参见演示页: 26.自定义右键菜单">&nbsp;&nbsp;<a href="#func_TagFuncTableAddMenu"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>串、XML串，或URL，内容的格式规范请参考Treelist的帮助文档“13.自定义菜单”</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>可选，格式为LocateAt=[top/bottom], 表示自定义菜单在弹出时位于顶部还是底部，默认是bottom</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>备注</td><td colspan=2>只能在OnEvent(id, "MenuBeforePopup", ...)事件中执行。</td></tr>
</table>
<br>

<div id="TagFuncTableEnableMenu"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>EnableMenu</td><td class="funcTD">配置内置的右键菜单项，使之能显示</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableEnableMenu"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>固定的菜单项名称，以逗号分隔，含义为: <br>
		copy - 复制　　　　　　paste - 粘贴　　　　　　　　pasteNewRow - 粘贴到新行<br>
		delete - 删除　　　　　deleteMore - 删除更多　　　insert - 插入<br>
		print - 打印预览　　　　addSort - 加入多重排序　　 selectCol - 自定义显示隐藏列<br>
		export - 转换输出　　　import - 导入Excel文件　　curselMode - 焦点选取方式<br>
		separate - 分屏冻结　　enter - 回车键行为　　　　　expandTree - 展开/合拢树<br>
		showRuler - 显示/隐藏左标尺　　　　　　　　　　　　displayAs - 以列表/树展现<br>
		exportAll - 转换输出全部页(用于分页显示时)　　　　　printAll - 打印全部页(用于分页显示时)<br>
		hue - 色调　　　　　　language - 语言切换
		</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>可选， true - 仅对参数1的菜单项生效； false - 仅显示参数1的菜单项，其余的统统不显示.<br>默认是true</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>备注</td><td colspan=2>默认情况下，language、exportAll、printAll是disable的</td></tr>
</table>
<br>

<div id="TagFuncTableDisableMenu"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>DisableMenu</td><td class="funcTD">配置内置的右键菜单项，使之不显示</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableDisableMenu"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>同上</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>可选，true/false.<br>  true - 仅对参数1的菜单项生效； false - 仅隐藏参数1的菜单项，其余的统统显示, 默认是true</td></tr>
  <tr><td align=right>参数3</td><td colspan=2>可选，true/false.<br>  true - 临时性的，仅用于 MenuBeforPopup 事件中, 默认是false</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>备注</td><td colspan=2>默认情况下，language、exportAll、printAll是disable的</td></tr>
</table>
<br>


<div id="TagFuncTableGetExpress"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetExpress</td><td class="funcTD">取得当前表达式(Expresses)节点的完整XML串</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableGetExpress"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>XML串</td></tr>
  <tr class="example"><td align=right>示例</td><td colspan=2>var s = AF.func("GetExpress", "");<br>
alert(AF.func("toJson", s)); &nbsp;&nbsp;&nbsp; //可以用全局函数 toJson 转换成 JSON 串</td></tr>
</table>
<br>

<div id="TagFuncTableSetExpress"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>SetExpress</td><td class="funcTD">设置当前表达式(Expresses)节点的完整XML串</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableSetExpress"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>XML/JSON串, 格式须和 GetExpress 返回串类似</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
  <tr class="example"><td align=right>示例</td><td colspan=2>var exp = "&lt;expresses&gt;\<br>
  &lt;express&gt;total=round(price*num, 2)&lt;/express&gt;\<br>
  &lt;express&gt;price=round(total/num, 4)&lt;/express&gt;\<br>
&lt;/expresses&gt;";<br>
AF.func("SetExpress", exp);<br>
AF.func("ReCalc", "")); &nbsp;&nbsp;&nbsp; //按照新的表达式重新计算</td></tr>
</table>
<br>

<div id="TagFuncTableReCalc"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>ReCalc</td><td class="funcTD">重新计算整表的计算关系，如表达式(Expresses)、合计小计</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableReCalc"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
</table>
<br>



<div id="TagFuncTableGetRedrawAble"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>GetRedrawAble</td><td class="funcTD">是否能够重画</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableGetRedrawAble"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>1 / 0 - 能 / 不能</td></tr>
</table>
<br>

<div id="TagFuncTableSetRedrawAble"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>SetRedrawAble</td><td class="funcTD">设置让Treelist能够重画或不能重画。为了提高性能，消除不必要的重画，在需要连续对Treelist作改动性操作(比如改数据、改属性)前关闭重画，操作完成后再开启重画.</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableSetRedrawAble"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>true/false - 能 / 不能</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
</table>
<br>

<div id="TagFuncTablePrintPreview"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>PrintPreview</td><td class="funcTD">打印预览</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTablePrintPreview"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
</table>
<br>

<div id="TagFuncTablePrint"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>Print</td><td class="funcTD">直接打印</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTablePrint"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>可选，格式为 isOpenSysDialog=[?]; 其含义和用法如下:<br>
isOpenSysDialog - true/false - 弹出操作系统的打印对话框/不弹出对话框，默认是true;</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
</table>
<br>

<div id="TagFuncTableImport"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>Import</td><td class="funcTD">从本地 Excel 文件导入数据</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableImport"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>格式为 filename=[?];SheetName=[?];isDeleteFirst=[?];HeaderRows=[?];TailRows=[?]; 列名1=[?]; 列名2=[?]...; 列名n=[?]：<br>
<b>FileName</b> - Excel 文件的全文件名, 后缀须为 xlsx, 或 xls(仅硕正企业版);<br>
<b>SheetName</b> 或 <b>Sheet</b> - 如果是多工作表，需指定的工作表名，否则默认导入第一个工作表;<br>
<b>MappingMode</b> - 列和字段的映射方式，可以是 <b>byContent</b> / <b>byComment</b> / <b>none</b>, 分别表示: 按写在单元格中的字段名或标题自动匹配 / 按设在单元格中的"批注"的字段名自动匹配 / 不自动匹配。默认是None ;<br>
<b>TailRows</b> - Excel 的下方不得导入的行数;<br>
<b>isDeleteFirst</b> - true/false, 是否先删除原先的数据, 默认是false;<br>
<br>
如果 MappingMode = None, 还可以进一步选择如下选项:<br>
<b>HeaderRows</b> - Excel 的上方不得导入的行数;<br>
<b>各个列名</b> - Excel 中各个列的列号， 对应到XML中的列ID。需要逐个列对应过去，如果不指定这个对应关系，则以自然顺序逐个自动对应;<br>
</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>1/0 - 成功/失败</td></tr>
  <tr><td align=right>备注</td><td colspan=2>1.mappingMode 为 byContent 或 byComment 时，标记所在的单元格往往是Excel的标题单元格，标题单元格所在行是不导入的，是从它们的下一行开始导入的;<br>
2.下面例子中的文件是固定的文件名, 但在实际情况中，往往是用户需要打开文件对话框选择 Excel 文件的，请参考“12.全局函数”中的“其它函数”下的 FileDialog( ) 函数;
</td></tr>
  <tr class="example"><td align=right>示例</td><td colspan=2>AF.func("Import", "filename=d:\\表1.xlsx; A=Country; B=PrdId; D=price");  //按指定的列-字段关系导入<br>
AF.func("Import", "filename=d:\\表1.xlsx; mappingMode=byComment");  //按藏在批注中的字段映射关系导入</td></tr>
</table>
<br>

<div id="TagFuncTableExport"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>Export</td><td class="funcTD">取得XML格式的全部数据，一般用于打印:将串作为数据源转交给Report组件.</td><td align="right" style="border-left:0px;"><img src="image/documentg.bmp" title="参见自由表头的演示页: 10.有表头表体的表单(2)、14.基于Freeform的对话框">&nbsp;&nbsp;<a href="#func_TagFuncTableExport"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>可选，为 asData 或 asDisplay，表示输出内容是纯数据，还是和界面显示的一样串，默认是asDisplay</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>可选，为行的范围，默认是全部行，格式可以为：<br>
row = 行号，多个行之间以逗号分隔;<br>
startRow = 开始行的行号;<br>
endRow = 结束行的行号(注：不包括结束行);<br>
　或 count = 行数;<br>
</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>XML大串</td></tr>
  <tr class="example"><td align=right>示例</td><td colspan=2>var row=4;<br>AF.func("Export", "asData \r\n row=" + row);</td></tr>
</table>
<br>

<div id="TagFuncTableOpenImportDialog"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>OpenImportDialog</td><td class="funcTD">打开从 Excel 文件导入数据的对话框</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableOpenImportDialog"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>可选串，格式为: filename=[?], 说明如下：<br>
<b>filename</b> - 本地 xlsx 或 xls 文件，必须是全文件名.<br>
如果未指定filename，那么首先会弹出文件选择对话框
</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>如果未导入，返回空串；否则返回以逗号分隔的插入到树列表的开始行、行数</td></tr>
  <tr class="example"><td align=right>示例</td><td colspan=2>AF.func("OpenImportDialog", "");</td></tr>
</table>
<br>

<div id="TagFuncTableOpenExportDialog"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>OpenExportDialog</td><td class="funcTD">打开转换输出对话框、或直接转换输出</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableOpenExportDialog"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>可选串，格式为: <br>type=[?];typeOnly=[?];filename=[?];content=[?];dropdown=[?];includeHide=[?];includeHeader=[?];scale=[?];precision=[?],  其含义说明如下：<br>
<b>type</b> - 首选的文件名后缀，例如xlsx、 jpg、 pdf之类.<br>
<b>filename</b> - 指定文件名.<br>
<b>isEcho</b> - 完成后是否需要提示框提示成功与否.<br>
<b>content</b> - 为asData 或 asDisplay，表示输出内容是纯数据，还是和界面显示的一样串，默认是asData.<br>
<b>dropdown</b> - 为asData、asDisplay 或 asDataAndDisplay，表示下拉内容的输出格式，默认是asData.<br>
<b>includeHide</b> - 为true或false，表示是否包含隐藏列，默认是false.<br>
<b>gridLine</b> - 是否显示表格线，仅用于 xlsx 或 xls.<br>
<b>scale</b> - 图像类文件的打印比例，范围是10 到 400，默认100。对于PDF而言，Scale越大越清晰，例如300表示在300%的显示比例下仍很清晰.<br>
<b>precision</b> - JPG精度，仅对JPG和PDF有效，精度范围1-100(默认85)，越接近100越清晰，但文件尺寸越大.<br>
<b>isOpenDialog</b> - 是否需要弹出对话框，默认是true。<br>
　　如果打开对话框, 还可以有如下选项:<br>
　　　　<b>typeOnly</b> - 和type类似，表示仅限于该种文件类型.<br>
　　如果不弹出对话框，则直接转换输出，还可以有如下参数:<br>
　　　　<b>includeHeader</b> - none/name/title, 表示无列标题/列名/列标题，默认采用上次对话框中所选的内容.<br>
</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>转换输出成功的文件名(含路径的全文件名)，空串表示未作转换. 如果有多个文件名，则以回车分隔</td></tr>
  <tr class="example"><td align=right>示例</td><td colspan=2>AF.func("OpenExportDialog", "typeOnly=xlsx;content=asDisplay");<br>
AF.func("OpenExportDialog", "isOpenDialog=false;type=xlsx;filename=d:\\my.xlsx;includeHeader=title");</td></tr>
</table>
<br>

<div id="TagFuncTableSetExportFilename"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>SetExportFilename</td><td class="funcTD">指定转换输出的文件名，通常用于 ExportDialog 事件</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableSetExportFilename"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>文件名，可以是带路径的全文件名，也可以不带路径</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>格式为 isOpenFileDialog=[?], 值可以是true/false, 表示是否打开后面的文件选择对话框，默认是True</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>无</td></tr>
  <tr><td align=right>备注</td><td colspan=2>如果 isOpenFileDialog=false、且文件名不带路径，那么文件将被生成到 "我的文档" 目录下</td></tr>
  <tr class="example"><td align=right>示例</td><td colspan=2>function OnEvent(id, Event, p1, p2, p3, p4)<br>
{<br>
　if(Event == "ExportDialog" && p1 == "xlsx")<br>
　{<br>
　　AF.func("SetExportFilename", "MyDoc.xlsx \r\n isOpenFileDialog=0");<br>
　}<br>
}</td></tr>
</table>
<br>

<div id="TagFuncTableOpenDeleteRowsDialog"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>OpenDeleteRowsDialog</td><td class="funcTD">打开删除行对话框</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableOpenDeleteRowsDialog"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
</table>
<br>

<div id="TagFuncTableAddHotKey"></div><br>
<table width=98% cols=3 border=1 align="center"><col width=120><col><col width=64 align=right>
  <tr bgcolor=#EEF5FB><td class="funcTD" align=center>AddHotKey</td><td class="funcTD">增设快捷键。快捷键将触发HotKey事件</td><td align="right" style="border-left:0px;"><a href="#func_TagFuncTableAddHotKey"><img border=0 src="image/arrowup.gif" title="回到目录"/> </a> </td></tr>
  <tr><td align=right>参数1</td><td colspan=2>第一个快捷键，可以是F1至F12、字母、数字、或键的AscII码，也可再加Ctrl、Shift、Alt的组合，以'+'分隔.</td></tr>
  <tr><td align=right>参数2</td><td colspan=2>可选，第二个快捷键，以此类推.</td></tr>
  <tr><td align=right>返回值</td><td colspan=2>(无)</td></tr>
  <tr><td align=right>备注</td><td colspan=2>1.并不是所有键都能用作快捷的，受制于浏览器，您需要逐个测试;<br>2.快捷键将触发 HotKey 事件</td></tr>
  <tr class="example"><td align=right>示例</td><td colspan=2>AF.func("AddHotKey", "F12 \r\n Ctrl+F4 \r\n Ctrl+Shift+S \r\n Alt+5 \r\n Ctrl+32");<br>
分别表示了5个快捷键：F12、Ctrl+F4、Ctrl+Shift+S、Alt+5、Ctrl+空格(空格的AscII码是32)</td></tr>
</table>
<br>

 
<br><br><br>
<script type='text/javascript' src='nstd.js'></script>
</body></html>