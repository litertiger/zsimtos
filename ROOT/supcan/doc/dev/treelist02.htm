<HTML>
<head>
<meta http-equiv="content-type" content="text/html; charset=gb2312">
<link rel="stylesheet" href="temp1.css" type="text/css">
</head>
<body bgcolor=#ffffff vlink=#0000ff>
<br>
<p class="sz1">2.展现与数据分离</p><hr color=#2266ee size=1>
　　Supcan Treelist遵循展现与数据分离的原则：决定 Treelist 外观的是一个XML文件，我们把它叫做 “XML描述文件” 或者 “模板文件”；而填入的数据则是独立的，通常来自一个 URL。<br>
<br>
　　在页面上完整展示一个空的 Treelist 需要执行 <b>Build</b> 函数，在该 Treelist 中加载数据有如下三种方案：<br>
　　　　1.执行 Load( ) 函数, 组件将立即访问该 URL、并将取得的数据填入到树列表中.<br>
　　　　2.在 XML 模板的 &lt;Properties&gt; 中设置 dataURL 属性, 在执行 Build 的同时，它能继续访问该 URL 并取得数据，例如 &lt;Properties dataURL="../serv/getdata?w=23" ...&gt;.<br>
　　　　3.在 XML 模板的 &lt;Table&gt; 节点中直接安置数据.<br>
<br>
　　Treelist 的 XML 描述文件须符合《Treelist XML 文档规范》，该规范并不复杂，文档有6个顶级节点：<br>
　　<b>1</b>.&lt;Properties&gt;　-　总的外观、行为、背景等属性，以及列和列之间的逻辑关系、数据验证逻辑等；<br>
　　<b>2</b>.&lt;Fonts&gt;　-　用到的字体；<br>
　　<b>3</b>.&lt;Cols&gt;　-　每个列的详细描述，这是最关键内容；<br>
　　<b>4</b>.&lt;Droplists&gt;　-　下拉、主外键引用的数据源定义(<img src='image/document.bmp' title='请参见演示页: 9.各种下拉'>)；<br>
　　<b>5</b>.&lt;FreeformBar&gt;　-　上方和下方的工具条(<img src='image/document.bmp' title='请参见演示页: 30.查询条件(一)、31.查询条件(二)'>)；<br>
　　<b>6</b>.&lt;Table&gt;　-　夹带的纯数据(<img src='image/document.bmp' title='请参见演示页: 7.计算列、合计行 '>)；<br>
<br>
　　Treelist的格式属性尽管由 XML 描述文件决定，但是通过 SetProp( ) 和 SetColProp( ) 函数，在页面中可以被动态更改(<img src='image/document.bmp' title='请参见演示页: 26.动态更改属性'>)；带参数的Build( )函数也可以强制更改其属性(<img src='image/document.bmp' title='请参见演示页: 2.以Tree展现'>)，请参考这3个函数的详细说明。<br>
<br>
　　Treelist的填入数据来自一个 Http URL，数据格式支持 XML、JSON、TSV-TXT(Tab分隔列、回车分隔行的纯文本)。目前 XML 和 JSON 格式最流行，TSV-TXT 尽管不太流行，但也有其优势，那就是长度最短。有关数据格式的详细描述请参见下面的<a href="addi01.htm" target=_blank>附录1：数据格式</a>.<br>



<br><br><br>
<script type='text/javascript' src='nstd.js'></script>
</body></html>