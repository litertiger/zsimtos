<HTML>
<head>
<meta http-equiv="content-type" content="text/html; charset=gb2312">
<link rel="stylesheet" href="temp1.css" type="text/css">
</head>
<body bgcolor=#ffffff vlink=#0000ff>
<br>
<p class="sz1">14.事件</p><hr color=#2266ee size=1>
　　Supcan Treelist的OnEvent( id, Event, p1, p2, p3, p4 )事件含义及参数分别如下：<br>
<table width=98% border=1 align="center">
<tr><th>Event</th><th>含义</th><th>p1</th><th>p2</th><th>p3</th><th>p4</th></tr>
<tr>
  <td rowspan="2">SelChanged</td>
  <td>当前行或单元格已变化(被切换)</td>
  <td>行号</td>
  <td>列名(见备注)</td>
  <td>&nbsp;</td>
  <td>&nbsp;</td></tr>
<tr bgColor=#ffffdd><td colspan="5">备注：当p2参数为空串时, 表示当前行已变化: 否则表示当前单元格已变化, 并且进入编辑状态</td></tr>
<tr>
  <td rowspan="6">Clicked</td>
  <td>情形1: 鼠标点到某单元格</td>
  <td>行号</td>
  <td>列名</td>
  <td>如果当前列为超链接, 则为本单元格的内容</td>
  <td>HyperLink</td></tr>
<tr>
  <td>情形2: 鼠标点到某列表头</td>
  <td>-1</td>
  <td>列名</td>
  <td>1 / 0 / icon(见备注)</td>
  <td>&nbsp;</td></tr>
<tr bgColor=#ffffdd><td colspan="5">备注：如果是isCheckboxOnly 列, 则p3为 1 或 0; 如果是点击在headerIcon小图标上，则p3为串icon</td></tr>
<tr>
  <td>情形3: 鼠标点到 EditWithButton 输入框右侧的按钮</td>
  <td>行号</td>
  <td>列名</td>
  <td>　</td>
  <td>见备注</td></tr>
<tr bgColor=#ffffdd><td colspan="5">备注：p4参数规定为：如果当前列为 Button 型 或 editWithButton 型,  鼠标点在 button 上则为 "button"；如果列中有多个 button，那么分别为 "button1"、"button2"... 依次类推</td></tr>
<tr>
  <td>情形4: 鼠标点到下拉 DropTreelist 弹出窗的自定义按钮上</td>
  <td>行号</td>
  <td>列名</td>
  <td>DropdownButton</td>
  <td>按钮的 id</td></tr>
<tr>
  <td rowspan="2">DblClicked</td>
  <td>鼠标双击某单元格</td>
  <td>行号</td>
  <td>列名</td>
  <td>&nbsp;</td>
  <td>&nbsp;</td></tr>
<tr bgColor=#ffffdd><td colspan="5">备注：可执行全局函数CalcelEvent( )阻止继续执行</td></tr>
<tr>
  <td rowspan="2">BeforeEdit</td>
  <td>某单元进入编辑(输入)前</td>
  <td>行号</td>
  <td>列名</td>
  <td>&nbsp;</td>
  <td>&nbsp;</td></tr>
<tr bgColor=#ffffdd><td colspan="5">备注：可执行全局函数CalcelEvent( )阻止继续执行</td></tr>
<tr>
  <td rowspan="3">EditChanged</td>
  <td>某单元被修改</td>
  <td>行号</td>
  <td>列名</td>
  <td>&nbsp;</td>
  <td>&nbsp;</td></tr>
<tr>
  <td>执行了右键菜单的"粘贴"</td>
  <td>开始行号</td>
  <td>开始列名</td>
  <td>结束行号</td>
  <td>结束列名</td></tr>
<tr bgColor=#ffffdd><td colspan="5">备注：在编辑状态下单元格内部的右键菜单是操作系统的菜单，是不会触发本事件的</td></tr>
<tr>
  <td rowspan="2">DropdownSelChanged</td>
  <td>某单元的下拉 Treelist 的选中行已变</td>
  <td>行号</td>
  <td>列名</td>
  <td>1 - 数据有变化<br>0 - 数据无变化</td>
  <td>&nbsp;</td></tr>
<tr bgColor=#ffffdd><td colspan="5">备注：该事件和 EditChanged 不太一样, 因为下拉以后, 仍可以通过 Esc 键反悔、 不再触发 EditChanged 事件. 当然，如果您在 &lt;properties&gt; 中设定了 AutoUpdate="true", 那就无法用 Esc 反悔了</td></tr>
<tr>
  <td rowspan="2">BeforeDropdown</td>
  <td>某单元的下拉 List 或下拉 Treelist 正准备下拉</td>
  <td>行号</td>
  <td>列名</td>
  <td>&nbsp;</td>
  <td>&nbsp;</td></tr>
<tr bgColor=#ffffdd><td colspan="5">备注：可执行全局函数CalcelEvent( )阻止继续执行, 但仅对下拉 Treelist 有效, 对下拉 List 无效</td></tr>
<tr>
  <td rowspan="4">EditKeydown</td>
  <td>在编辑状态时输入框的键盘动作<br>请见备注2</td>
  <td>行号</td>
  <td>列名</td>
  <td>键的ASCII码，例如回车是13、空格是32</td>
  <td>见备注2</td></tr>
<tr bgColor=#ffffdd><td colspan="5">备注1：EditKeydown 和 EditChar 事件均为在输入框中的键盘事件，EditKeydown 能捕获几乎所有键盘动作，包括非字符的回车、Tab等；而 EditChar 事件则以输入的字符为主，包括中文;</td></tr>
<tr bgColor=#ffffdd><td colspan="5">备注2：p4的含义为: 1-Ctrl键也按下了； 2-Shift键也按下了； 3-二者一起按下了</td></tr>
<tr bgColor=#ffffdd><td colspan="5">备注3：您可以执行全局函数 CancelEvent( ) 去阻止继续执行，就如事件没有发生过那样，但不同的ASCII码，您需要在这两个事件中挑选一个执行CancelEvent( )，具体请在演示页“12.事件”中去测试</td></tr>
<tr>
  <td rowspan="2">EditChar</td>
  <td>在编辑状态时输入框的键盘字符</td>
  <td>行号</td>
  <td>列名</td>
  <td>字符的ASCII码</td>
  <td>&nbsp;</td></tr>
<tr bgColor=#ffffdd><td colspan="5">备注：EditKeydown 和 EditChar 事件均为在输入框中的键盘事件，EditKeydown 能捕获几乎所有键盘动作，包括非字符的回车、Tab等；而 EditChar 事件则以输入的字符为主，包括中文;</td></tr>
<tr>
  <td rowspan="3">Keydown</td>
  <td>在非编辑状态时的键盘动作</td>
  <td>行号，如果有多行则以逗号分隔</td>
  <td>　</td>
  <td>键的ASCII码，例如回车是13、空格是32</td>
  <td>见备注2</td></tr>
<tr bgColor=#ffffdd><td colspan="5">备注1：可执行全局函数CalcelEvent( )阻止继续执行</td></tr>
<tr bgColor=#ffffdd><td colspan="5">备注2：p4的含义为: 1-Ctrl键也按下了； 2-Shift键也按下了； 3-二者一起按下了</td></tr>
<tr>
  <td>LooseFocus</td>
  <td>某单元刚失去焦点</td>
  <td>行号</td>
  <td>列名</td>
  <td>导致失去焦点的动作键位值：<br>9 - Tab<br>13 - 回车<br>37 - left<br>38 - up<br>39 - right;<br>40 - down<br> 空串 - 鼠标或其它原因导致</td>
  <td>&nbsp;</td></tr>
<tr>
  <td>rowsInserted</td>
  <td>有行插入</td>
  <td>新行的行号</td>
  <td>数量</td>
  <td>&nbsp;</td>
  <td>&nbsp;</td></tr>
<tr>
  <td rowspan="2">BeforeRowsDeleted</td>
  <td>有行即将被删除</td>
  <td>被删行的行号, 若有多行则以\t分隔</td>
  <td>&nbsp;</td>
  <td>&nbsp;</td>
  <td>&nbsp;</td></tr>
<tr bgColor=#ffffdd><td colspan="5">备注：可执行全局函数CalcelEvent( )阻止继续执行</td></tr>
<tr>
  <td rowspan="2">rowsDeleted</td>
  <td>有行被删除</td>
  <td>被删行的Key, 若有多行则以\t分隔</td>
  <td>被删除行的原始内容(XML串), 或内存句柄(纯数字串)</td>
  <td>&nbsp;</td>
  <td>&nbsp;</td></tr>
<tr bgColor=#ffffdd><td colspan="5">备注1: 未定义 key 的 Treelist 不会触发该事件;<br>备注2: 如果P2参数是内存句柄, 可以用全局函数 GetDataString 取得串</td></tr>
<tr>
  <td>LazyLoad</td>
  <td>LazyLoad="true"的单列多层树的树杈被首次点击</td>
  <td>行号</td>
  <td>id号 (当treeformat为byId、byPid时)</td>
  <td>&nbsp;</td>
  <td>&nbsp;</td></tr>
<tr>
  <td>MenuBeforePopup</td>
  <td>鼠标右键菜单即将弹出</td>
  <td>行号，<br>可能为-1</td>
  <td>列名, <br>有可能为空</td>
  <td>&nbsp;</td>
  <td>&nbsp;</td></tr>
<tr>
  <td>MenuClicked</td>
  <td>鼠标右键菜单自定义功能被选中</td>
  <td>菜单项id</td>
  <td>行号</td>
  <td>列名</td>
  <td>&nbsp;</td></tr>
<tr>
  <td rowspan="3">BeforeDragRow</td>
  <td>行即将被拖拽</td>
  <td>被拖动的行，多个行则以逗号分隔</td>
  <td>目的行</td>
  <td>1/0 - 拖动到目的行的上方/下方</td>
  <td>见备注2</td></tr>
<tr bgColor=#ffffdd><td colspan="5">备注1：可执行全局函数CalcelEvent( )阻止继续执行</td></tr>
<tr bgColor=#ffffdd><td colspan="5">备注2：p4参数格式为 handle=[?];asChild=true，例如串 "handle=82922093;asChild=true"，其中 handle 的含义为源 Treelist 的句柄(可通过 GetHandle 函数获得)，如果是自我拖拽，则不出现该项；asChild=true 表示作为子孙拖入，如果非子孙、或者当前非树，则不出现该项.</td></tr>
<tr>
  <td rowspan="2">RequestAllPages</td>
  <td>需要加载全部数据，以打印或转换输出</td>
  <td>&nbsp;</td>
  <td>&nbsp;</td>
  <td>&nbsp;</td>
  <td>&nbsp;</td></tr>
<tr bgColor=#ffffdd><td colspan="5">备注：用于分页显示时</td></tr>
<tr>
  <td rowspan="2">Switched</td>
  <td>被执行了树、列表之间的切换</td>
  <td>&nbsp;</td>
  <td>&nbsp;</td>
  <td>&nbsp;</td>
  <td>&nbsp;</td></tr>
<tr bgColor=#ffffdd><td colspan="5">备注：仅在弹出菜单时触发, 通过 js 进行切换是不会触发的</td></tr>
<tr>
  <td>Sort</td>
  <td>已重新排序 (触发了排序操作)</td>
  <td>如果&lt;Properties&gt;中定义了IsRemoteSort, <br>则为“1”，否则是空</td>
  <td>&nbsp;</td>
  <td>&nbsp;</td>
  <td>&nbsp;</td></tr>
  	
<tr>
  <td rowspan="2">CustomAble</td>
  <td>用户修改了界面中与可定制(GetCustom函数)有关的内容, 如选择显示列、列宽等等</td>
  <td>ColHideShow - 列的显示/隐藏有变化<br>ColWidth - 列的宽度有变化<br>ColSeq - 列的左右排列次序有变化</td>
  <td>&nbsp;</td>
  <td>&nbsp;</td>
  <td>&nbsp;</td></tr>
<tr bgColor=#ffffdd><td colspan="5">备注：目前 p1 只有这几种，今后版本会继续完善.</td></tr>
  	
<tr>
  <td rowspan="2">InvalidMouseWheel</td>
  <td>无效的鼠标滚轮操作</td>
  <td>如果顶部已经是第一行仍然要上滚，为"up"; 如果底部已经是末行仍要下滚, 则为“down”</td>
  <td>&nbsp;</td>
  <td>&nbsp;</td>
  <td>&nbsp;</td></tr>
<tr bgColor=#ffffdd><td colspan="5">备注：常用于分页显示情形</td></tr>
<tr>
  <td>Printed</td>
  <td>已打印<br>(是指打印任务已经发送给操作系统的打印任务队列)</td>
  <td>　</td>
  <td>0 - 普通打印;<br>1 - 在预览窗口中的打印当前页;<br>2 - 在预览窗口中的打印全部页;</td>
  <td>&nbsp;</td>
  <td>&nbsp;</td></tr>
<tr>
  <td>Previewed</td>
  <td>打印预览窗已关闭</td>
  <td>　</td>
  <td>&nbsp;</td>
  <td>&nbsp;</td>
  <td>&nbsp;</td></tr>
<tr>
  <td>Load</td>
  <td>数据已经通过Load( )函数加载</td>
  <td>URL, 空串表示加载的是XML/JSON串</td>
  <td>0-同步加载<br>1-异步加载</td>
  <td>0-加载失败<br>1-加载成功</td>
  <td>&nbsp;</td></tr>
<tr>
  <td>Imported</td>
  <td>刚从Excel文件导入</td>
  <td>导入的起始行的行号</td>
  <td>导入的总行数</td>
  <td>&nbsp;</td>
  <td>&nbsp;</td></tr>
<tr>
  <td rowspan="3">ExportDialog</td>
  <td>转换输出对话框中，当用户点击"确定"后、文件对话框即将弹出前</td>
  <td>文件后缀</td>
  <td>&nbsp;</td>
  <td>&nbsp;</td>
  <td>&nbsp;</td></tr>
<tr>
<tr bgColor=#ffffdd><td colspan="5">备注：可以在该事件中执行 SetExportFilename 函数，详见该函数的说明.</td></tr>

<tr>
  <td rowspan="3">MouseMoveIn</td>
  <td>鼠标移入某个单元格</td>
  <td>行号</td>
  <td>列名</td>
  <td>&nbsp;</td>
  <td>&nbsp;</td></tr>
<tr bgColor=#ffffdd><td colspan="5">备注1：&lt;Col&gt;设定了 MouseMoveIn 属性值才能生效</td></tr>
<tr bgColor=#ffffdd><td colspan="5">备注2：鼠标在单元格上方停留不动、停留时间超过设定的值才触发该事件</td></tr>

<tr>
  <td>MouseMoveOut</td>
  <td>鼠标移出某个单元格, 和鼠标移入事件 MouseMoveIn 配对</td>
  <td>行号</td>
  <td>列名</td>
  <td>&nbsp;</td>
  <td>&nbsp;</td></tr>
<tr>
  <td>UndoState</td>
  <td>Undo状态有改变</td>
  <td>&nbsp;</td>
  <td>&nbsp;</td>
  <td>&nbsp;</td>
  <td>&nbsp;</td></tr>
  
<tr>
  <td rowspan="3">DataReach</td>
  <td>已经访问了 dataURL(包括 Load 函数访问) 并得到了数据，但尚未应用该数据</td>
  <td>内存块的句柄(纯数字串形式)</td>
  <td>URL</td>
  <td>&nbsp;</td>
  <td>&nbsp;</td></tr>
<tr bgColor=#ffffdd><td colspan="5">备注1：可以用全局函数 GetDataString / SetDataString 取得或更改内存块中的数据</td></tr>
<tr bgColor=#ffffdd><td colspan="5">备注2：可以用上述2个函数存取数据，但不宜过多调用其它函数，否则会造成不稳定</td></tr>
<tr>
  <td rowspan="4">DropDownDataReach</td>
  <td>某个异步加载数据的下拉已经获得了数据并已完成加载</td>
  <td><b>某个下拉资源的 id</b> - 表示此下拉数据已经到达<br>
<b>Complete!</b> - 所有异步下拉的数据已全部到达</td>
  <td>&nbsp;</td>
  <td>&nbsp;</td>
  <td>&nbsp;</td></tr>
<tr bgColor=#ffffdd><td colspan="5">备注1：异步访问http的下拉列表、下拉树列表在初始加载数据时触发</td></tr>
<tr bgColor=#ffffdd><td colspan="5">备注2：同步加载数据的下拉不会触发本事件</td></tr>
<tr bgColor=#ffffdd><td colspan="5">备注3：当全部异步下拉都完成加载后，本事件会再次被触发，p1是固定的串 "Complete!"</td></tr>
<tr>
  <td>HotKey</td>
  <td>触发了快捷键</td>
  <td>快捷键</td>
  <td>当前行的行号, 如果正在输入的话</td>
  <td>当前列的列名, 如果正在输入的话</td>
  <td>&nbsp;</td></tr>
<tr>
  <td>UserEvent</td>
  <td>全局函数 PostMessage 发出的自定义事件</td>
  <td>自定义</td>
  <td>自定义</td>
  <td>自定义</td>
  <td>自定义</td></tr>
<tr>
  <td>CacheSaved</td>
  <td>全局事件，请参见全局函数 ListenEvent</td>
  <td>缓存的ID</td>
  <td>&nbsp;</td>
  <td>&nbsp;</td>
  <td>&nbsp;</td></tr>
<tr>
  <td>Download</td>
  <td>全局事件，请参见Freeform组件的同名事件</td>
  <td>&nbsp;</td>
  <td>&nbsp;</td>
  <td>&nbsp;</td>
  <td>&nbsp;</td></tr>
<tr>
  <td>Upload</td>
  <td>全局事件，请参见Freeform组件的同名事件</td>
  <td>&nbsp;</td>
  <td>&nbsp;</td>
  <td>&nbsp;</td>
  <td>&nbsp;</td></tr>
</table>

　　在线演示中有大量的事件脚本，请自行参考。<br>


<br><br><br>
<script type='text/javascript' src='nstd.js'></script>
</body></html>