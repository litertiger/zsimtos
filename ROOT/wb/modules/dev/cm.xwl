{
 "hidden": false,
 "children": [{
  "configs": {"itemId": "module"},
  "expanded": true,
  "children": [{
   "configs": {
    "layout": "border",
    "itemId": "viewport1"
   },
   "expanded": true,
   "children": [
    {
     "configs": {
      "border": "false",
      "itemId": "toolbar1",
      "enableOverflow": "true",
      "region": "north"
     },
     "expanded": true,
     "children": [
      {
       "configs": {
        "itemId": "controlMenu",
        "minWidth": "200",
        "text": "控件管理"
       },
       "expanded": false,
       "children": [
        {
         "configs": {
          "itemId": "addBtn",
          "text": "添加控件<span class=\"wb_right\">Ctrl+Shift+J<\/span>",
          "iconCls": "db_field_add_icon"
         },
         "expanded": false,
         "children": [],
         "type": "item",
         "events": {"click": "app.addControl();"}
        },
        {
         "configs": {
          "itemId": "addFolderBtn",
          "text": "添加目录",
          "iconCls": "folder_icon"
         },
         "expanded": false,
         "children": [],
         "type": "item",
         "events": {"click": "app.addControl(true);"}
        },
        {
         "configs": {
          "itemId": "openBtn",
          "handler": "app.editControl",
          "text": "打开控件",
          "iconCls": "db_field_edit_icon"
         },
         "expanded": false,
         "children": [],
         "type": "item"
        },
        {
         "configs": {
          "itemId": "deleteBtn",
          "handler": "app.deleteControl",
          "text": "删除控件",
          "iconCls": "db_field_delete_icon"
         },
         "expanded": false,
         "children": [],
         "type": "item"
        },
        {
         "configs": {
          "itemId": "line1",
          "text": "-"
         },
         "expanded": false,
         "children": [],
         "type": "item"
        },
        {
         "configs": {
          "itemId": "copyBtn",
          "handler": "app.copyControl",
          "text": "复制控件..."
         },
         "expanded": false,
         "children": [],
         "type": "item"
        },
        {
         "configs": {
          "itemId": "renameBtn",
          "handler": "app.rename",
          "text": "修改目录名称...",
          "iconCls": "edit_icon"
         },
         "expanded": false,
         "children": [],
         "type": "item"
        },
        {
         "configs": {
          "itemId": "line2",
          "text": "-"
         },
         "expanded": false,
         "children": [],
         "type": "item"
        },
        {
         "configs": {
          "itemId": "closeAllBtn",
          "handler": "app.closeAll",
          "text": "关闭全部"
         },
         "expanded": false,
         "children": [],
         "type": "item"
        }
       ],
       "type": "item"
      },
      {
       "configs": {
        "itemId": "saveBtn",
        "tooltip": "保存当前编辑的控件 (Ctrl+S)",
        "text": "保存当前",
        "iconCls": "save_icon"
       },
       "expanded": false,
       "children": [],
       "type": "item",
       "events": {"click": "app.saveControls();"}
      },
      {
       "configs": {
        "itemId": "saveAllBtn",
        "tooltip": "保存全部编辑的控件 (Ctrl+Shift+S)",
        "text": "保存全部",
        "iconCls": "save_all_icon"
       },
       "expanded": false,
       "children": [],
       "type": "item",
       "events": {"click": "app.saveControls(true);"}
      },
      {
       "configs": {
        "itemId": "line1",
        "text": "-"
       },
       "expanded": false,
       "children": [],
       "type": "item"
      },
      {
       "configs": {
        "itemId": "addItemBtn",
        "handler": "app.addItem",
        "tooltip": "在当前页面添加新的条目 (Ctrl+E)",
        "text": "添加条目",
        "iconCls": "table_add_icon"
       },
       "expanded": false,
       "children": [],
       "type": "item"
      },
      {
       "configs": {
        "itemId": "editItemBtn",
        "handler": "app.editItem",
        "tooltip": "修改选择的条目",
        "text": "修改条目",
        "iconCls": "table_edit_icon"
       },
       "expanded": false,
       "children": [],
       "type": "item"
      },
      {
       "configs": {
        "itemId": "deleteItemBtn",
        "handler": "app.deleteItem",
        "tooltip": "删除选择的条目",
        "text": "删除条目",
        "iconCls": "table_delete_icon"
       },
       "expanded": false,
       "children": [],
       "type": "item"
      },
      {
       "configs": {
        "itemId": "line2",
        "text": "-"
       },
       "expanded": false,
       "children": [],
       "type": "item"
      },
      {
       "configs": {
        "itemId": "copyItemsBtn",
        "handler": "app.copyItems",
        "tooltip": "复制当前控件所有条目",
        "text": "复制条目",
        "iconCls": "copy_icon"
       },
       "expanded": false,
       "children": [],
       "type": "item"
      },
      {
       "configs": {
        "itemId": "pasteItemsBtn",
        "handler": "app.pasteItems",
        "tooltip": "把条目粘贴到当前控件",
        "text": "粘贴条目",
        "iconCls": "paste_icon"
       },
       "expanded": false,
       "children": [],
       "type": "item"
      }
     ],
     "type": "toolbar"
    },
    {
     "configs": {
      "itemId": "controlTree",
      "split": "true",
      "root": "{\
  text: '全部',\
  expanded: true\
}",
      "width": "240",
      "viewConfig": "{\
  plugins: {\
    ptype: 'treeviewdragdrop'\
  },\
  listeners: {\
    beforedrop: function(node, data, om, dp, dh) {\
      var sels = Wb.reverse(data.records),\
        nodes = [];\
      Wb.each(sels, function(n) {\
        nodes.push(n.data.id);\
      });\
      dh.wait = true;\
      Wb.request({\
        url: 'm?xwl=dev/cm/move',\
        params: {\
          sourceNodes: Wb.encode(nodes),\
          destNode: om.data.id,\
          dropPosition: dp\
        },\
        callback: function(a, succ) {\
          if (succ)\
            dh.processDrop();\
          else\
            dh.cancelDrop();\
        }\
      });\
    }\
  }\
}",
      "region": "west",
      "title": "控件箱",
      "iconCls": "tool_icon",
      "tools": "Wb.getTreeTools({search:true})",
      "collapsible": "true",
      "multiSelect": "true"
     },
     "expanded": true,
     "children": [{
      "configs": {
       "itemId": "store",
       "fields": "['id', 'text', 'control', 'general', 'configs', 'events']",
       "url": "m?xwl=dev/cm/get-tree"
      },
      "expanded": false,
      "children": [],
      "type": "treestore"
     }],
     "type": "tree",
     "events": {
      "selectionchange": "app.setButtons();",
      "itemdblclick": "if (record.isLeaf())\
  app.editControl();"
     }
    },
    {
     "configs": {
      "itemId": "controlTab",
      "plugins": "'tabreorderer'",
      "bodyStyle": "background-color:#787878;",
      "region": "center"
     },
     "expanded": false,
     "children": [],
     "type": "tab",
     "events": {
      "tabchange": "app.activeCard = newCard;\
app.setButtons();",
      "remove": "if (tab.items.length === 0)\
  app.activeCard = null;\
app.setButtons();"
     }
    }
   ],
   "type": "viewport",
   "events": {"afterrender": "app.setButtons();\
app.navKey = new Ext.KeyNav({\
  viewport: app.viewport1,\
  E: {\
    ctrl: true,\
    fn: function(e) {\
      if (e.shiftKey)\
        app.addControl();\
      else\
        app.addItem();\
    }\
  },\
  S: {\
    ctrl: true,\
    fn: function(e) {\
      app.saveControls(e.shiftKey);\
    }\
  }\
});"}
  }],
  "type": "module",
  "events": {
   "beforeunload": "var title = Wb.getModifiedTitle(app.controlTab, true);\
if (title !== null)\
  return title + '已经被修改。';",
   "initialize": "Ext.apply(app, {\
  //常规项\
  generalEnum: ['autoCreate', 'autoNames', 'class', 'container', 'design', 'designXtype',\
    'directOutput', 'handleText', 'height', 'hintType', 'iconCls', 'media', 'render',\
    'root', 'tag', 'type', 'width', 'xtype'\
  ],\
  //配置项\
  configsEnum: ['bind', 'color', 'enum', 'exp', 'expBind', 'expBool', 'expJson', 'glyph', 'html',\
    'iconCls', 'jndi', 'js', 'sql', 'ss', 'string', 'text', 'url', 'urlList'\
  ],\
  //事件\
  eventsEnum: ['expJson', 'js', 'ss'],\
  propertyChange: function() {\
    Wb.setModified(app.activeCard);\
    app.setButtons();\
  },\
  addControl: function(isFolder) {\
    var node = app.controlTree.getSelection()[0],\
      selNodeRef, selNode = '';\
    if (!node)\
      node = app.controlTree.getRootNode();\
    else if (node.isLeaf()) {\
      selNode = node.data.id;\
      selNodeRef = node;\
      node = node.parentNode;\
    }\
    Wb.prompt({\
      title: (isFolder ? '添加目录' : '添加') + ' - ' + node.data.text,\
      iconCls: isFolder ? 'folder_icon' : 'db_field_add_icon',\
      items: [{\
        fieldLabel: '名称',\
        validator: isFolder ? null : Wb.verifyName,\
        itemId: 'name',\
        allowBlank: false\
      }],\
      handler: function(values, win) {\
        Wb.request({\
          url: 'm?xwl=dev/cm/add',\
          params: Ext.apply({\
            parent: node.data.id,\
            selNode: selNode,\
            isFolder: isFolder\
          }, values),\
          success: function(resp) {\
            node.expand(false, function() {\
              var newNode, nodeExp;\
              if (isFolder)\
                nodeExp = {\
                  text: values.name,\
                  id: resp.responseText,\
                  children: []\
                };\
              else\
                nodeExp = {\
                  text: values.name,\
                  id: values.name,\
                  iconCls: 'item_icon',\
                  leaf: true\
                };\
              if (selNodeRef && selNodeRef.nextSibling)\
                newNode = node.insertBefore(nodeExp, selNodeRef.nextSibling);\
              else\
                newNode = node.appendChild(nodeExp);\
              newNode.commit();\
              app.controlTree.setSelection(newNode);\
              if (!isFolder)\
                app.editControl();\
              win.close();\
            });\
          }\
        });\
      }\
    });\
  },\
  saveControls: function(isAll, callback) {\
    if (isAll && app.saveAllBtn.disabled || !isAll && app.saveBtn.disabled) {\
      return;\
    }\
\
    function stringToJson(data) {\
      Wb.each(data, function(key, value) {\
        data[key] = Wb.decode(value);\
      });\
      return data;\
    }\
\
    function getGeneralData(data) {\
      Wb.each(data, function(key, value) {\
        if (Ext.String.startsWith(value, '{') || Ext.String.startsWith(value, '['))\
          data[key] = Wb.decode(value);\
        else if (value == 'true')\
          data[key] = true;\
        else if (value == 'false')\
          data[key] = false;\
      });\
      return data;\
    }\
\
    function getData(tab) {\
      var data = {};\
      data.general = getGeneralData(tab.getComponent('general').getSource());\
      data.id = tab.itemId;\
      data.text = tab.itemId;\
      data.iconCls = data.general.iconCls;\
      tab.pendIconCls = data.iconCls;\
      data.leaf = true;\
      data.configs = stringToJson(Ext.apply({}, tab.getComponent('configs').getSource()));\
      data.events = stringToJson(Ext.apply({}, tab.getComponent('events').getSource()));\
      return data;\
    }\
    var data = [];\
    app.activeCard.getActiveTab().findPlugin('cellediting').completeEdit();\
    app.controlTab.items.each(function(tab) {\
      if (tab.isModified && (isAll || tab == app.activeCard))\
        data.push({\
          id: tab.itemId,\
          data: getData(tab)\
        });\
    });\
    if (data.length === 0)\
      return;\
    Wb.request({\
      url: 'm?xwl=dev/cm/save',\
      jsonData: data,\
      success: function() {\
        var rootNode = app.controlTree.getRootNode();\
        app.controlTab.items.each(function(tab) {\
          if (tab.isModified && (isAll || tab == app.activeCard)) {\
            tab.setIconCls(tab.pendIconCls);\
            rootNode.findChild('id', tab.itemId, true).set('iconCls', tab.pendIconCls);\
            Wb.unModified(tab);\
          }\
        });\
        Ext.callback(callback);\
        app.setButtons();\
      }\
    });\
  },\
  createTrigger: function() {\
    return {\
      xtype: 'trigger',\
      triggerCls: 'x-form-ellipsis-trigger',\
      onTriggerClick: function() {\
        this.ownerCt.completeEdit();\
        app.editItem();\
      },\
      listeners: {\
        change: app.propertyChange\
      }\
    };\
  },\
  createConfig: function(data) {\
    var config = Ext.apply({}, data);\
    Wb.each(config, function(key, value) {\
      config[key] = {\
        editor: app.createTrigger()\
      };\
    });\
    return config;\
  },\
  editControl: function() {\
    var sels = app.controlTree.getSelection(),\
      controls, firstCard, card;\
    controls = [];\
    Wb.each(sels, function(control) {\
      if (control.isLeaf()) {\
        card = app.controlTab.getComponent(control.data.id);\
        if (!card)\
          controls.push(control.data.id);\
        else if (!firstCard)\
          firstCard = card;\
      }\
    });\
    if (controls.length === 0) {\
      if (firstCard)\
        app.controlTab.setActiveTab(firstCard);\
      else\
        Wb.warn('请选择至少一个需要打开的控件。');\
      return;\
    }\
\
    function getGeneralData(data) {\
      Wb.each(data, function(key, value) {\
        if (Ext.isObject(value) || Ext.isArray(value) || Ext.isBoolean(value))\
          data[key] = Wb.encode(value);\
      });\
      return data;\
    }\
\
    function jsonToString(data) {\
      Wb.each(data, function(key, value) {\
        data[key] = Wb.encode(value);\
      });\
      return data;\
    }\
    Wb.request({\
      url: 'm?xwl=dev/cm/open',\
      params: {\
        controls: Wb.encode(controls)\
      },\
      success: function(response) {\
        var data = Wb.decode(response.responseText);\
        Wb.each(data, function(control) {\
          card = app.controlTab.add({\
            xtype: 'tabpanel',\
            title: control.text,\
            iconCls: control.iconCls,\
            closable: true,\
            itemId: control.id,\
            listeners: {\
              tabchange: function(me, newCard) {\
                app.setButtons();\
              },\
              beforeclose: function(tab) {\
                if (tab.isModified) {\
                  Wb.choose('\"' + tab.itemId + '\" 已经被修改，保存所做的更改吗？',\
                    function(btn) {\
                      if (btn == 'yes')\
                        app.saveControls(false, function() {\
                          tab.close();\
                        });\
                      else if (btn == 'no') {\
                        Wb.unModified(tab);\
                        tab.close();\
                      }\
                    });\
                  return false;\
                }\
              }\
            },\
            items: [{\
              title: 'General',\
              iconCls: 'view_icon',\
              itemId: 'general',\
              xtype: 'propertygrid',\
              nameColumnWidth: 150,\
              source: getGeneralData(control.general),\
              sourceConfig: app.createConfig(control.general),\
              listeners: {\
                selectionchange: app.setButtons\
              }\
            }, {\
              title: 'Configs',\
              iconCls: 'property_icon',\
              itemId: 'configs',\
              xtype: 'propertygrid',\
              nameColumnWidth: 150,\
              source: jsonToString(control.configs),\
              sourceConfig: app.createConfig(control.configs),\
              listeners: {\
                selectionchange: app.setButtons\
              }\
            }, {\
              title: 'Events',\
              iconCls: 'execute_icon',\
              itemId: 'events',\
              xtype: 'propertygrid',\
              nameColumnWidth: 150,\
              source: jsonToString(control.events),\
              sourceConfig: app.createConfig(control.events),\
              listeners: {\
                selectionchange: app.setButtons\
              }\
            }]\
          });\
          if (!firstCard)\
            firstCard = card;\
        });\
        app.controlTab.setActiveTab(firstCard);\
      }\
    });\
  },\
  verifyJson: function(value, force) {\
    var json = {};\
    if (value) {\
      try {\
        if (force || (Ext.String.startsWith(value, '{') || Ext.String.startsWith(value, '[')))\
          json = Wb.decode(value);\
      } catch (e) {\
        Wb.warn('\"' + value + '\" 不是一个有效的JSON表达式。');\
        return false;\
      }\
    }\
    return json;\
  },\
  editItem: function() {\
    var rec, recData, paramValue, index, propertyGrid = app.activeCard.getActiveTab();\
    rec = propertyGrid.getSelection()[0];\
    if (!rec) {\
      Wb.warn('请选择需要修改的条目。');\
      return;\
    }\
    if (propertyGrid.itemId == 'general') {\
      Wb.prompt({\
        title: '修改条目 - ' + rec.data.name,\
        iconCls: 'table_edit_icon',\
        width: 550,\
        items: [{\
          fieldLabel: '名称',\
          itemId: 'name',\
          xtype: 'combobox',\
          forceSelection: true,\
          allowBlank: false,\
          value: rec.data.name,\
          store: app.generalEnum\
        }, {\
          fieldLabel: '值',\
          itemId: 'value',\
          xtype: 'textarea',\
          anchor: '-16 -35',\
          value: rec.data.value,\
          height: 240\
        }],\
        handler: function(values, win) {\
          if (!app.verifyJson(values.value))\
            return;\
          propertyGrid.setProperty(values.name, values.value, true);\
          app.propertyChange();\
          propertyGrid.setSelection(Wb.find(propertyGrid.store, 'name', values.name));\
          win.close();\
        }\
      });\
    } else {\
      try {\
        if (rec.data.value)\
          recData = Wb.decode(rec.data.value);\
        else recData = {};\
      } catch (e) {\
        Wb.warn('\"' + rec.data.value + '\" 不是一个有效的JSON表达式。');\
        return;\
      }\
      paramValue = Ext.apply({}, recData);\
      delete paramValue.type;\
      if (Ext.Object.isEmpty(paramValue))\
        paramValue = '';\
      else\
        paramValue = Ext.encode(paramValue);\
\
      Wb.prompt({\
        title: '修改条目 - ' + rec.data.name,\
        iconCls: 'table_edit_icon',\
        width: 550,\
        items: [{\
          fieldLabel: '类别',\
          itemId: 'type',\
          xtype: 'combobox',\
          forceSelection: true,\
          value: recData.type,\
          allowBlank: false,\
          store: app[propertyGrid.itemId + 'Enum']\
        }, {\
          fieldLabel: '参数',\
          xtype: 'textarea',\
          anchor: '-16 -35',\
          height: 240,\
          itemId: 'params',\
          value: paramValue\
        }],\
        handler: function(values, win) {\
          var json;\
          if (values.params) {\
            json = app.verifyJson(values.params, true);\
            if (!json)\
              return;\
            if (!Ext.isObject(json)) {\
              Wb.warn('值不是JSON对象。');\
              return;\
            }\
          } else json = {};\
          propertyGrid.setProperty(rec.data.name, Wb.encode(Ext.apply(json, {\
            type: values.type\
          })), true);\
          app.propertyChange();\
          win.close();\
        }\
      });\
    }\
  },\
  deleteControl: function() {\
    var sels = Wb.reverse(app.controlTree.getSelection()),\
      nodes = [];\
    if (Wb.indexOf(sels, app.controlTree.getRootNode()) != -1) {\
      Wb.warn('不能删除全部控件。');\
      return;\
    }\
    Wb.each(sels, function(n) {\
      nodes.push(n.data.id);\
    });\
    Wb.confirm(sels.length == 1 ? '确定要删除 \"' + sels[0].data.text + '\" 吗？' : '确定要删除选择的 ' + sels.length + ' 项吗？', function() {\
      Wb.request({\
        url: 'm?xwl=dev/cm/delete',\
        params: {\
          controls: Wb.encode(nodes)\
        },\
        success: function() {\
          var tab;\
          Wb.each(sels, function(node) {\
            node.cascadeBy(function(n) {\
              tab = app.controlTab.getComponent(n.data.id);\
              if (tab) {\
                tab.isModified = false;\
                tab.close();\
              }\
            });\
          });\
          Wb.remove(app.controlTree, sels);\
        }\
      });\
    });\
  },\
  copyControl: function() {\
    var control = app.controlTree.getSelection()[0];\
    Wb.prompt({\
      title: '复制控件 - ' + control.data.text,\
      items: [{\
        fieldLabel: '名称',\
        validator: Wb.verifyName,\
        itemId: 'name',\
        allowBlank: false\
      }],\
      handler: function(values, win) {\
        Wb.request({\
          url: 'm?xwl=dev/cm/copy',\
          params: {\
            source: control.data.id,\
            dest: values.name\
          },\
          success: function() {\
            Wb.insertAfter({\
              id: values.name,\
              text: values.name,\
              iconCls: control.data.iconCls,\
              leaf: true\
            }, control);\
            win.close();\
          }\
        });\
      }\
    });\
  },\
  rename: function() {\
    var node = app.controlTree.getSelection()[0];\
    Wb.prompt({\
      title: '修改目录名称 - ' + node.data.text,\
      iconCls: 'edit_icon',\
      items: [{\
        fieldLabel: '名称',\
        itemId: 'name',\
        allowBlank: false\
      }],\
      handler: function(values, win) {\
        Wb.request({\
          url: 'm?xwl=dev/cm/rename',\
          params: {\
            id: node.data.id,\
            newName: values.name\
          },\
          success: function() {\
            node.set('text', values.name);\
            node.commit();\
            win.close();\
          }\
        });\
      }\
    });\
  },\
  closeAll: function() {\
    app.controlTab.items.each(function(tab) {\
      if (tab.isModified) {\
        app.controlTab.setActiveTab(tab);\
        Wb.choose('\"' + tab.itemId + '\" 已经被修改，保存所做的更改吗？',\
          function(btn) {\
            if (btn == 'yes')\
              app.saveControls(false, app.closeAll);\
            else if (btn == 'no') {\
              Wb.unModified(tab);\
              app.closeAll();\
            }\
          });\
        return false;\
      } else\
        tab.close();\
    });\
  },\
  setButtons: function() {\
    var noActiveCard, controlNotSelected, generalActived, activeGrid,\
      hasModified = Wb.getModifiedTitle(app.controlTab) !== null,\
      sels = app.controlTree.getSelection();\
    controlNotSelected = sels.length === 0;\
    app.openBtn.setDisabled(controlNotSelected);\
    app.deleteBtn.setDisabled(controlNotSelected);\
    app.saveBtn.setDisabled(!(app.activeCard && app.activeCard.isModified));\
    app.saveAllBtn.setDisabled(!hasModified);\
    app.copyBtn.setDisabled(sels.length != 1 || !sels[0].isLeaf());\
    app.renameBtn.setDisabled(sels.length != 1 || sels[0].isLeaf());\
    noActiveCard = !app.activeCard;\
    app.closeAllBtn.setDisabled(noActiveCard);\
    if (app.activeCard)\
      activeGrid = app.activeCard.getActiveTab();\
    generalActived = app.activeCard && activeGrid && activeGrid.itemId == 'general';\
    app.addItemBtn.setDisabled(noActiveCard);\
    app.editItemBtn.setDisabled(!activeGrid || activeGrid.getSelection().length === 0);\
    app.deleteItemBtn.setDisabled(app.editItemBtn.disabled);\
    app.copyItemsBtn.setDisabled(noActiveCard);\
    app.pasteItemsBtn.setDisabled(noActiveCard || !app.clipboard);\
  },\
  deleteItem: function() {\
    var editor, config, grid = app.activeCard.getActiveTab(),\
      rec = grid.getSelection()[0];\
    config = grid.sourceConfig[rec.data.name];\
    if (config)\
      editor = config.editor;\
    if (editor && Ext.isFunction(editor.destroy))\
      editor.destroy();\
    Wb.remove(grid);\
    app.propertyChange();\
  },\
  copyItems: function() {\
    var card = app.activeCard,\
      data = [];\
    card.items.each(function(grid) {\
      data.push(Ext.clone(grid.getSource()));\
    });\
    app.clipboard = data;\
    app.setButtons();\
  },\
  pasteItems: function() {\
    var mergeItems, sorters, index = 0;\
    app.activeCard.items.each(function(grid) {\
      mergeItems = Ext.applyIf(grid.getSource(), app.clipboard[index++]);\
      sorters = grid.store.sorters.items[0];\
      grid.setSource(mergeItems);\
      Wb.each(mergeItems, function(key) {\
        if (!grid.sourceConfig[key])\
          grid.sourceConfig[key] = {\
            editor: app.createTrigger()\
          };\
      });\
      grid.store.sort(sorters.property, sorters.direction);\
    });\
    Wb.setModified(app.activeCard);\
  },\
  addItem: function() {\
    if (app.addItemBtn.disabled)\
      return;\
    var rec, propertyGrid = app.activeCard.getActiveTab();\
    if (propertyGrid.itemId == 'general') {\
      Wb.prompt({\
        title: '添加条目',\
        iconCls: 'table_add_icon',\
        width: 550,\
        items: [{\
          fieldLabel: '名称',\
          itemId: 'name',\
          xtype: 'combobox',\
          forceSelection: true,\
          allowBlank: false,\
          store: app.generalEnum\
        }, {\
          fieldLabel: '值',\
          itemId: 'value',\
          xtype: 'textarea',\
          anchor: '-16 -35',\
          height: 240\
        }],\
        handler: function(values, win) {\
          if (!app.verifyJson(values.value))\
            return;\
          rec = Wb.find(propertyGrid.store, 'name', values.name);\
          if (rec) {\
            Wb.warn('名称 \"' + values.name + '\" 已经存在。');\
            return;\
          }\
          propertyGrid.setProperty(values.name, values.value, true);\
          propertyGrid.sourceConfig[values.name] = {\
            editor: app.createTrigger()\
          };\
          app.propertyChange();\
          propertyGrid.setSelection(Wb.find(propertyGrid.store, 'name', values.name));\
          win.close();\
        }\
      });\
    } else {\
      Wb.prompt({\
        title: '添加条目',\
        iconCls: 'table_add_icon',\
        width: 550,\
        items: [{\
          fieldLabel: '名称',\
          itemId: 'name',\
          allowBlank: false\
        }, {\
          fieldLabel: '类别',\
          itemId: 'type',\
          xtype: 'combobox',\
          forceSelection: true,\
          allowBlank: false,\
          saveKeyname: 'sys.cm.types',\
          store: app[propertyGrid.itemId + 'Enum']\
        }, {\
          fieldLabel: '参数',\
          itemId: 'params',\
          xtype: 'textarea',\
          anchor: '-16 -70',\
          height: 240\
        }],\
        handler: function(values, win) {\
          var json;\
          if (values.params) {\
            json = app.verifyJson(values.params, true);\
            if (!json)\
              return;\
            if (!Ext.isObject(json)) {\
              Wb.warn('值不是JSON对象。');\
              return;\
            }\
          } else json = {};\
          rec = Wb.find(propertyGrid.store, 'name', values.name);\
          if (rec) {\
            Wb.warn('名称 \"' + values.name + '\" 已经存在。');\
            return;\
          }\
          propertyGrid.setProperty(values.name, Wb.encode(Ext.apply(json, {\
            type: values.type\
          })), true);\
          propertyGrid.sourceConfig[values.name] = {\
            editor: app.createTrigger()\
          };\
          app.propertyChange();\
          propertyGrid.setSelection(Wb.find(propertyGrid.store, 'name', values.name));\
          win.close();\
        }\
      });\
    }\
  }\
});\
app.activeCard = null;"
  }
 }],
 "roles": {},
 "title": "控件管理器",
 "iconCls": "view_icon",
 "inframe": false,
 "pageLink": ""
}