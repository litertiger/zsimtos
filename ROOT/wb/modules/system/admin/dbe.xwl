{
 "hidden": false,
 "children": [{
  "configs": {"itemId": "module"},
  "expanded": true,
  "children": [
   {
    "configs": {
     "layout": "@{type:'vbox', align:'stretch'}",
     "itemId": "propertyWin",
     "createInstance": "false",
     "closeAction": "destroy",
     "width": "650",
     "bodyPadding": "8 8 0 8",
     "title": "属性",
     "autoShow": "true",
     "iconCls": "property_icon",
     "modal": "true",
     "height": "450",
     "maximizable": "true"
    },
    "expanded": true,
    "children": [
     {
      "configs": {
       "itemId": "tableNameText",
       "padding": "2",
       "labelAlign": "right",
       "fieldLabel": "关联表名",
       "labelWidth": "80",
       "readOnly": "true",
       "selectOnFocus": "true"
      },
      "expanded": false,
      "children": [],
      "type": "text"
     },
     {
      "configs": {
       "itemId": "fieldsText",
       "padding": "2",
       "labelAlign": "right",
       "fieldLabel": "字段列表",
       "labelWidth": "80",
       "readOnly": "true"
      },
      "expanded": false,
      "children": [],
      "type": "text"
     },
     {
      "configs": {
       "layout": "fit",
       "itemId": "fieldset1",
       "padding": "8",
       "flex": "1",
       "title": "字段属性"
      },
      "expanded": true,
      "children": [{
       "configs": {
        "itemId": "grid1",
        "pagingBar": "false"
       },
       "expanded": true,
       "children": [
        {
         "configs": {
          "itemId": "store",
          "fields": "['dataIndex', 'metaType', 'metaSize', 'metaScale', 'metaRequired']"
         },
         "expanded": false,
         "children": [],
         "type": "store"
        },
        {
         "configs": {
          "itemId": "viewConfig",
          "enableTextSelection": "true"
         },
         "expanded": false,
         "children": [],
         "type": "tableview"
        },
        {
         "configs": {"itemId": "columns"},
         "expanded": true,
         "children": [
          {
           "configs": {
            "itemId": "noCol",
            "xtype": "rownumberer",
            "width": "30"
           },
           "expanded": false,
           "children": [],
           "type": "column"
          },
          {
           "configs": {
            "itemId": "nameCol",
            "renderer": "if (record.get('metaRequired'))\
  return '<b>' + value + '<\/b>';\
else return value;",
            "dataIndex": "dataIndex",
            "flex": "1",
            "text": "字段名称"
           },
           "expanded": false,
           "children": [],
           "type": "column"
          },
          {
           "configs": {
            "itemId": "typeCol",
            "dataIndex": "metaType",
            "text": "类型"
           },
           "expanded": false,
           "children": [],
           "type": "column"
          },
          {
           "configs": {
            "itemId": "sizeCol",
            "dataIndex": "metaSize",
            "text": "大小",
            "align": "right"
           },
           "expanded": false,
           "children": [],
           "type": "column"
          },
          {
           "configs": {
            "itemId": "scaleCol",
            "dataIndex": "metaScale",
            "width": "70",
            "text": "精度",
            "align": "right"
           },
           "expanded": false,
           "children": [],
           "type": "column"
          },
          {
           "configs": {
            "itemId": "requiredCol",
            "xtype": "booleancolumn",
            "dataIndex": "metaRequired",
            "trueText": "是",
            "width": "70",
            "text": "必填",
            "falseText": "否"
           },
           "expanded": false,
           "children": [],
           "type": "column"
          }
         ],
         "type": "array"
        }
       ],
       "type": "grid"
      }],
      "type": "fieldset"
     }
    ],
    "type": "window"
   },
   {
    "configs": {
     "layout": "fit",
     "itemId": "sqlsWin",
     "width": "650",
     "title": "SQL历史记录",
     "iconCls": "script_icon",
     "modal": "true",
     "height": "450",
     "maximizable": "true"
    },
    "expanded": false,
    "children": [{
     "configs": {
      "itemId": "sqlGrid",
      "pagingBar": "false",
      "hideHeaders": "true"
     },
     "expanded": true,
     "children": [
      {
       "configs": {
        "itemId": "store",
        "fields": "['sql']"
       },
       "expanded": false,
       "children": [],
       "type": "store"
      },
      {
       "configs": {"itemId": "viewConfig"},
       "expanded": false,
       "children": [],
       "type": "tableview",
       "events": {"cellkeydown": "if (e.getKey() == e.ENTER)\
  app.addHisSql();"}
      },
      {
       "configs": {"itemId": "columns"},
       "expanded": true,
       "children": [{
        "configs": {
         "itemId": "sqlCol",
         "dataIndex": "sql",
         "flex": "1",
         "autoWrap": "true"
        },
        "expanded": false,
        "children": [],
        "type": "column"
       }],
       "type": "array"
      }
     ],
     "type": "grid",
     "events": {"itemdblclick": "app.addHisSql();"}
    }],
    "type": "window",
    "events": {
     "hide": "var card = app.active();\
if (card && card.editor)\
  setTimeout(function() {\
    card.editor.focus();\
  }, 20);",
     "show": "setTimeout(function() {\
  if (!app.sqlGrid.getSelection().length)\
    app.sqlGrid.setSelection(0);\
  app.sqlGrid.view.focus();\
}, 20);"
    }
   },
   {
    "configs": {
     "layout": "border",
     "border": "false",
     "itemId": "viewport1",
     "createInstance": "false"
    },
    "expanded": true,
    "children": [
     {
      "configs": {
       "border": "false",
       "itemId": "toolbar",
       "enableOverflow": "true",
       "region": "north"
      },
      "expanded": true,
      "children": [
       {
        "configs": {
         "itemId": "newSqlBtn",
         "tooltip": "添加新的SQL页",
         "text": "新建SQL",
         "iconCls": "sql_icon"
        },
        "expanded": false,
        "children": [],
        "type": "item",
        "events": {"click": "var node = app.tableTree.getSelection()[0];\
app.newSql(node.data.jndi);"}
       },
       {
        "configs": {
         "itemId": "sqlHisBtn",
         "tooltip": "显示历史记录 (Ctrl+H)",
         "text": "SQL记录",
         "iconCls": "script_icon"
        },
        "expanded": false,
        "children": [],
        "type": "item",
        "events": {"click": "var card = app.active();\
if (!card || !card.editor)\
  Wb.info('请选择一个SQL页面。');\
else\
  app.sqlsWin.show();"}
       },
       {
        "configs": {
         "itemId": "runSqlBtn",
         "tooltip": "运行SQL (Ctrl+Enter)",
         "text": "运行SQL",
         "iconCls": "run_icon"
        },
        "expanded": false,
        "children": [],
        "type": "item",
        "events": {"click": "var card = app.active();\
if (card.store.loading)\
  Wb.warn('正在运行SQL中。');\
else {\
  card.sql = card.editor.getSelection();\
  if (card.sql === '')\
    card.sql = card.editor.getValue();\
  app.runSql(card);\
}"}
       },
       {
        "configs": {
         "itemId": "line1",
         "text": "-"
        },
        "expanded": false,
        "children": [],
        "type": "item"
       },
       {
        "configs": {
         "itemId": "addRecordBtn",
         "handler": "app.addRecord",
         "tooltip": "添加新的记录 (Ctrl+E)",
         "text": "添加",
         "iconCls": "record_add_icon"
        },
        "expanded": false,
        "children": [],
        "type": "item"
       },
       {
        "configs": {
         "itemId": "delRecordBtn",
         "handler": "app.delRecord",
         "tooltip": "删除选择的记录 (Ctrl+D)",
         "text": "删除",
         "iconCls": "record_delete_icon"
        },
        "expanded": false,
        "children": [],
        "type": "item"
       },
       {
        "configs": {
         "itemId": "saveBtn",
         "tooltip": "保存当前修改的表格 (Ctrl+S)",
         "text": "保存当前",
         "iconCls": "save_icon"
        },
        "expanded": false,
        "children": [],
        "type": "item",
        "events": {"click": "app.save();"}
       },
       {
        "configs": {
         "itemId": "saveAllBtn",
         "tooltip": "保存全部修改的表格 (Ctrl+Shift+S)",
         "text": "保存全部",
         "iconCls": "save_all_icon"
        },
        "expanded": false,
        "children": [],
        "type": "item",
        "events": {"click": "app.save(true);"}
       },
       {
        "configs": {
         "itemId": "rejectBtn",
         "handler": "app.reject",
         "tooltip": "撤消最后一次保存后的所有更改",
         "text": "撤消",
         "iconCls": "undo_icon"
        },
        "expanded": false,
        "children": [],
        "type": "item"
       },
       {
        "configs": {
         "itemId": "filterBtn",
         "xtype": "splitbutton",
         "tooltip": "对表格数据添加过滤条件表达式",
         "text": "过滤",
         "iconCls": "filter_icon"
        },
        "expanded": true,
        "children": [{
         "configs": {
          "itemId": "resetFilterBtn",
          "text": "重置过滤"
         },
         "expanded": false,
         "children": [],
         "type": "item",
         "events": {"click": "var card = app.active();\
if (card.originSql && card.originSql != card.sql) {\
  card.sql = card.originSql;\
  app.runSql(card);\
}"}
        }],
        "type": "item",
        "events": {"click": "var card = app.active();\
Wb.promptText('添加过滤条件表达式', function(value, win) {\
  if (!card.originSql)\
    card.originSql = card.sql;\
  if (value) {\
    card.filterCondi = value;\
    card.sql = card.originSql + ' where ' + value;\
  } else card.sql = card.originSql;\
  app.runSql(card, function(a, b, succ) {\
    delete card.store.lastOptions.callback; //防止store.reload时再调用该回调函数\
    if (succ)\
      win.close();\
  });\
}, {\
  iconCls: 'filter_icon',\
  value: card.filterCondi\
});"}
       },
       {
        "configs": {
         "itemId": "exportBtn",
         "xtype": "splitbutton",
         "text": "导出",
         "iconCls": "db_export_icon"
        },
        "expanded": true,
        "children": [{
         "configs": {
          "itemId": "exportServerBtn",
          "text": "导出到服务器...",
          "iconCls": "server_icon"
         },
         "expanded": false,
         "children": [],
         "type": "item",
         "events": {"click": "var card = app.active(),\
  store = card.store;\
if (!card.sql) {\
  Wb.warn('无任何数据可导出。');\
  return;\
}\
app.showFileDialog(function(filename, win) {\
  if (store.getTotalCount() > store.getCount() || card.hasBlob) {\
    //从服务器端取数\
    Wb.request({\
      url: 'm?xwl=system/admin/dbe/exportToServer',\
      timeout: -1,\
      params: {\
        sql: card.sql,\
        jndi: card.jndi,\
        filename: filename\
      },\
      success: function() {\
        win.close();\
      }\
    });\
  } else {\
    //从客户端取数\
    var rows = [];\
    store.each(function(rec) {\
      rows.push(Wb.encode(rec.data));\
    });\
    Wb.request({\
      url: 'm?xwl=system/admin/dbe/write-file',\
      timeout: -1,\
      params: {\
        data: rows.join('\\
'),\
        gzip: true,\
        filename: filename\
      },\
      success: function() {\
        win.close();\
      }\
    });\
  }\
});"}
        }],
        "type": "item",
        "events": {"click": "var card = app.active(),\
  store = card.store;\
if (!card.sql) {\
  Wb.warn('无任何数据可导出。');\
  return;\
}\
if (store.getTotalCount() > store.getCount() || card.hasBlob) {\
  //从服务器端取数\
  Wb.download('m?xwl=system/admin/dbe/export', {\
    sql: card.sql,\
    jndi: card.jndi,\
    filename: card.isSql ? 'data.gz' : card.table + '.gz'\
  });\
} else {\
  //从客户端取数\
  var rows = [];\
  store.each(function(rec) {\
    rows.push(Wb.encode(rec.data));\
  });\
  Wb.download('get-file', {\
    data: rows.join('\\
'),\
    gzip: true,\
    filename: card.isSql ? 'data.gz' : card.table + '.gz'\
  }, true);\
}"}
       },
       {
        "configs": {
         "itemId": "importBtn",
         "xtype": "splitbutton",
         "text": "导入",
         "iconCls": "db_import_icon"
        },
        "expanded": true,
        "children": [{
         "configs": {
          "itemId": "importServerBtn",
          "text": "从服务器导入...",
          "iconCls": "server_icon"
         },
         "expanded": false,
         "children": [],
         "type": "item",
         "events": {"click": "app.showFileDialog(function(filename, win) {\
  var ext = filename.toLowerCase(),\
    endsWith = Ext.String.endsWith;\
  if (!endsWith(ext, '.gz') && !endsWith(ext, '.txt') &&\
    !endsWith(ext, '.xls') && !endsWith(ext, '.xlsx')) {\
    Wb.warn('请选择一个gz、txt或Excel格式的文件。');\
    return false;\
  }\
  var card = app.active();\
  app.useTrans = win.down('#transCheck').getValue();\
  Wb.request({\
    url: 'm?xwl=system/admin/dbe/import',\
    params: {\
      jndi: card.jndi,\
      table: Wb.addPrefix(card.schema, card.table),\
      fromServer: true,\
      trans: app.useTrans,\
      filename: filename\
    },\
    success: function() {\
      win.close();\
      card.store.reload();\
    }\
  });\
}, true);"}
        }],
        "type": "item",
        "events": {"click": "var card = app.active(),\
  ownerApp = app;\
Wb.run({\
  url: 'upload',\
  success: function(app) {\
    app.upload({\
      url: 'm?xwl=system/admin/dbe/import',\
      iconCls: 'import_icon',\
      title: '导入 - ' + card.table,\
      showProgress: false,\
      params: {\
        jndi: card.jndi,\
        table: Wb.addPrefix(card.schema, card.table)\
      },\
      beforeUpload: function() {\
        var ext = app.file.getValue().toLowerCase(),\
          endsWith = Ext.String.endsWith;\
        if (!endsWith(ext, '.gz') && !endsWith(ext, '.txt') &&\
          !endsWith(ext, '.xls') && !endsWith(ext, '.xlsx')) {\
          Wb.warn('请选择一个gz、txt或Excel格式的文件。');\
          return false;\
        }\
      },\
      success: function() {\
        card.store.reload();\
      }\
    });\
    app.win.setHeight(app.win.getHeight() + 30);\
    app.form1.add({\
      xtype: 'checkbox',\
      boxLabel: '导入过程使用事务',\
      checked: true,\
      itemId: 'trans',\
      x: 92,\
      y: 56\
    });\
  }\
});"}
       },
       {
        "configs": {
         "itemId": "line",
         "text": "-"
        },
        "expanded": false,
        "children": [],
        "type": "item"
       },
       {
        "configs": {
         "itemId": "propertyBtn",
         "overflowText": "属性",
         "tooltip": "显示当前页面字段详细信息",
         "iconCls": "property_icon"
        },
        "expanded": false,
        "children": [],
        "type": "item",
        "events": {"click": "var card = app.active();\
if (!app.tab.getActiveTab())\
  Wb.warn('当前无可用数据。');\
else if (card.store.loading)\
  Wb.warn('正在执行SQL。');\
else if (card.store.proxy.reader.rawData) {\
  var win = new Ext.window.Window(app._propertyWin),\
    grid = win.down('#grid1'),\
    cols = card.store.proxy.reader.rawData.columns;\
  grid.store.loadData(cols);\
  grid.store.removeAt(0);\
  //app.tableNameText对象每次均指向最新创建的控件，也可使用win.getComponent方法\
  app.tableNameText.setValue(card.isSql ? '(SQL)' : card.table);\
  app.fieldsText.setValue(Ext.Array.pluck(cols, 'dataIndex').join(', ').substring(2));\
} else\
  Wb.warn('表格无数据。');"}
       },
       {
        "configs": {
         "itemId": "backBtn",
         "overflowText": "后退",
         "tooltip": "转到上一个页面",
         "iconCls": "left_icon"
        },
        "expanded": false,
        "children": [],
        "type": "item"
       },
       {
        "configs": {
         "itemId": "forwardBtn",
         "overflowText": "前进",
         "tooltip": "转到后退前的页面",
         "iconCls": "right_icon"
        },
        "expanded": false,
        "children": [],
        "type": "item"
       },
       {
        "configs": {
         "itemId": "autoWidthBtn",
         "overflowText": "自动宽度",
         "tooltip": "自动设置列宽度",
         "iconCls": "table_align_columns_icon"
        },
        "expanded": false,
        "children": [],
        "type": "item",
        "events": {"click": "var grid = app.active().grid;\
if (grid && grid.columns) {\
  Ext.suspendLayouts();\
  app.autoSize(grid);\
  var col, i, j = grid.columns.length;\
  for (i = 1; i < j; i++) {\
    col = grid.columns[i];\
    //基于Neptune的系列主题同其他主题存在字体大小差异，进行微调\
    col.setWidth(col.width + (Wb.isNeptune ? 15 : 10));\
  }\
  Ext.resumeLayouts(true);\
}"}
       }
      ],
      "type": "toolbar"
     },
     {
      "configs": {
       "itemId": "tableTree",
       "split": "true",
       "plugins": "{ptype:'bufferedrenderer'}",
       "width": "200",
       "region": "west",
       "title": "数据库列表",
       "iconCls": "db_icon",
       "collapsible": "true",
       "rootVisible": "false"
      },
      "expanded": true,
      "children": [
       {
        "configs": {
         "itemId": "store",
         "fields": "['text', 'jndi', 'type', 'schema', 'table']",
         "url": "m?xwl=system/admin/dbe/get-tree"
        },
        "expanded": false,
        "children": [],
        "type": "treestore",
        "events": {"beforeload": "operation.params = operation.node.data;"}
       },
       {
        "configs": {"itemId": "tools"},
        "expanded": true,
        "children": [{
         "configs": {
          "itemId": "refreshBtn",
          "tooltip": "刷新",
          "tooltype": "refresh"
         },
         "expanded": false,
         "children": [],
         "type": "item",
         "events": {"click": "Wb.reload(app.tableTree);"}
        }],
        "type": "array"
       }
      ],
      "type": "tree",
      "events": {
       "itemclick": "/*\
点击表名打开表；\
点击数据库名打开指定数据库首个SQL页；\
在SQL页Ctrl+点击数据库或表名在SQL窗口添加点击的文本；\
*/\
var card, replaceText,\
  data = record.data,\
  type = data.type;\
if (e.ctrlKey || type == 'db' || type == 'schema') {\
  app.tab.items.each(function(item) {\
    if (item.isSql && item.jndi == data.jndi) {\
      app.tab.setActiveTab(item);\
      card = item;\
      return false;\
    }\
  });\
  if (!card) {\
    app.newSql(data.jndi);\
    card = app.active();\
  }\
  if (e.ctrlKey) {\
    if (type == 'table') {\
      if (data.schema)\
        replaceText = data.schema + '.' + data.table;\
      if (Wb.isEmpty(card.editor.getValue()))\
        replaceText = 'select * from ' + replaceText;\
    } else\
      replaceText = data.text;\
    card.editor.replaceSelection(replaceText);\
    setTimeout(function() {\
      card.editor.focus();\
    }, 20);\
  }\
} else if (type == 'table') {\
  app.newTable(data.jndi, data.schema, data.table);\
}",
       "tagEvents": "{\
  itemkeydown: Wb.mimicClick\
}"
      }
     },
     {
      "configs": {
       "itemId": "tab",
       "plugins": "'tabreorderer'",
       "bodyStyle": "background-color:#787878;",
       "region": "center"
      },
      "expanded": true,
      "children": [],
      "type": "tab",
      "events": {
       "tabchange": "app.setButtons();",
       "remove": "app.setButtons();"
      }
     }
    ],
    "type": "viewport",
    "events": {"afterrender": "Wb.setNavigate(app.tab, app.backBtn, app.forwardBtn);\
app.newSql('default');\
new Ext.KeyNav({\
  viewport: app.viewport1,\
  S: {\
    ctrl: true,\
    fn: function(e) {\
      app.save(e.shiftKey);\
    }\
  },\
  E: {\
    ctrl: true,\
    fn: app.addRecord\
  },\
  D: {\
    ctrl: true,\
    fn: app.delRecord\
  }\
});"}
   }
  ],
  "type": "module",
  "events": {
   "beforeunload": "var title = Wb.getModifiedTitle(app.tab, true);\
if (title !== null)\
  return '表' + title + '已经被修改。';",
   "finalize": "app.loadApp();",
   "initialize": "//私有方法定义\
function setCard(card) {\
  if (card instanceof Ext.grid.Panel)\
    card.grid = card;\
  else {\
    card.grid = card.down('grid');\
    card.store = card.grid.store;\
  }\
  card.store.mask = card;\
  card.store.card = card;\
  var toolbar = card.grid.down('toolbar');\
  toolbar.insert(toolbar.items.length - 2, ['-', {\
    xtype: 'tbtext',\
    itemId: 'hintLabel',\
    text: ''\
  }]);\
  card.mon(card, 'close', function(card) {\
    var request = card.store.lastRequest;\
    if (request) {\
      var xhr = request.xhr;\
      if (xhr) {\
        card.notShowError = true;\
        xhr.abort();\
      }\
    }\
  });\
  card.hintLabel = toolbar.getComponent('hintLabel');\
  app.tab.setActiveTab(card);\
}\
\
function getStore(isSql) {\
    return {\
      url: 'm?xwl=system/admin/dbe/execute',\
      timeout: -1,\
      showError: false,\
      remoteSort: !isSql,\
      message: '正在执行SQL...',\
      listeners: {\
        beforeload: function() {\
          var store = this,\
            card = store.card;\
          if (!isSql && card.isModified) {\
            Wb.choose('表 \"' + card.table + '\" 已经被修改，保存所做的更改吗？',\
              function(btn) {\
                if (btn == 'yes')\
                  app.save(false, function() {\
                    store.reload();\
                  });\
                else if (btn == 'no') {\
                  Wb.unModified(card);\
                  store.reload();\
                }\
              });\
            return false;\
          }\
          card.hintLabel.setText('执行中...');\
        },\
        loadraw: function(store, response, succ) {\
          if (!succ) {\
            var card = store.card;\
            if (!card.notShowError) {\
              Wb.except(response, function() {\
                if (store.card.editor)\
                  setTimeout(function() {\
                    store.card.editor.focus();\
                  }, 20);\
              });\
            }\
          }\
        },\
        failure: function(store) {\
          store.card.hintLabel.setText('');\
        },\
        success: function(store) {\
          var card = store.card;\
          if (card.lastSql != card.sql) {\
            var cellediting,\
              columns = Wb.getColumns(store);\
            if (!card.isSql) {\
              cellediting = card.grid.findPlugin('cellediting');\
              if (cellediting && cellediting.editors) {\
                cellediting.editors.each(Ext.destroy, Ext);\
                cellediting.editors.clear();\
              }\
            }\
            app.setColumns(columns, card);\
            card.grid.reconfigure(null, columns);\
            card.lastSql = card.sql;\
          }\
          card.hintLabel.setText('耗时：' + store.proxy.reader.rawData.elapsed + ' ms');\
          if (card.isSql) {\
            var sqlStore = app.sqlGrid.store,\
              rec = Wb.find(sqlStore, 'sql', card.sql);\
            if (rec)\
              sqlStore.remove(rec);\
            sqlStore.insert(0, {\
              sql: card.sql\
            });\
            card.grid.setDisabled(false);\
          }\
        }\
      }\
    };\
  }\
  //公有方法\
Ext.apply(app, {\
  //服务端使用事务\
  useTrans: true,\
  //添加新的SQL tab页\
  newSql: function(jndi) {\
    if (!app.sqlIndex)\
      app.sqlIndex = 0;\
    app.sqlIndex++;\
    var card;\
    card = app.tab.add({\
      title: 'SQL' + app.sqlIndex + (jndi == 'default' ? '' : (' - ' + jndi)),\
      jndi: jndi,\
      iconCls: 'sql_icon',\
      closable: true,\
      isSql: true,\
      layout: 'border',\
      items: [{\
        itemId: 'sqlPanel',\
        xtype: 'container',\
        html: '<textarea><\/textarea>',\
        region: 'north',\
        height: 120,\
        split: true,\
        listeners: {\
          resize: function(panel, width, height) {\
            if (panel.editor && !panel.destroying) {\
              Ext.fly(panel.editor.getScrollerElement()).setHeight(height);\
              panel.editor.refresh();\
            }\
          },\
          afterrender: {\
            single: true,\
            fn: function(panel) {\
              panel.editor = CodeMirror.fromTextArea(panel.el.down('textarea', true), {\
                lineNumbers: true,\
                mode: 'text/x-sql',\
                matchBrackets: true,\
                extraKeys: {\
                  \"Ctrl-Enter\": function() {\
                    app.runSqlBtn.fireEvent('click');\
                  },\
                  \"Ctrl-H\": function() {\
                    app.sqlHisBtn.fireEvent('click');\
                  }\
                }\
              });\
              panel.ownerCt.editor = panel.editor;\
            }\
          }\
        }\
      }, {\
        xtype: 'grid',\
        region: 'center',\
        border: false,\
        editable: true,\
        loadColumns: 'none',\
        disabled: true,\
        store: getStore(true),\
        viewConfig: {\
          enableTextSelection: true\
        }\
      }],\
      listeners: {\
        activate: function(panel) {\
          setTimeout(function() {\
            panel.editor.focus();\
          }, 20);\
        }\
      }\
    });\
    setCard(card);\
    setTimeout(function() {\
      card.editor.focus();\
    }, 20);\
  },\
  showFileDialog: function(callback, isOpen) {\
    Wb.promptFile(callback, {\
      extName: isOpen ? null : '.gz',\
      autoClose: false,\
      forceSelection: isOpen,\
      title: isOpen ? '导入' : '导出',\
      show: isOpen ? function(scope) {\
        app.bbar = scope.win.getDockedItems('toolbar[dock=\"bottom\"]')[0];\
        app.bbar.insert(0, [{\
          xtype: 'checkbox',\
          itemId: 'transCheck',\
          boxLabel: '导入过程使用事务',\
          checked: app.useTrans\
        }, '->']);\
      } : null,\
      hide: isOpen ? function() {\
        app.bbar.remove(app.bbar.items.items[0]);\
        app.bbar.remove(app.bbar.items.items[0]);\
      } : null\
    });\
  },\
  newTable: function(jndi, schema, table) {\
    var card;\
    app.tab.items.each(function(item) {\
      if (item.table == table && item.jndi == jndi && item.schema == schema) {\
        card = item;\
        return false;\
      }\
    });\
    if (card)\
      app.tab.setActiveTab(card);\
    else {\
      card = app.tab.add({\
        title: table + (jndi == 'default' ? '' : (' - ' + jndi)),\
        jndi: jndi,\
        isTable: true,\
        sql: 'select * from ' + Wb.addPrefix(schema, table),\
        table: table,\
        schema: schema,\
        exportFilename: table,\
        iconCls: 'table_icon',\
        hideMode: 'offsets',\
        closable: true,\
        xtype: 'grid',\
        loadColumns: 'none',\
        downloadBlob: app.downloadBlob,\
        uploadBlob: app.uploadBlob,\
        removeBlob: app.removeBlob,\
        multiSelect: true,\
        editable: true,\
        store: getStore(false),\
        listeners: {\
          beforeclose: function(card) {\
            if (card.isModified) {\
              Wb.choose('表\"' + card.table + '\" 已经被修改，保存所做的更改吗？',\
                function(btn) {\
                  if (btn == 'yes')\
                    app.save(false, function() {\
                      card.close();\
                    });\
                  else if (btn == 'no') {\
                    Wb.unModified(card);\
                    card.close();\
                  }\
                });\
              return false;\
            }\
          },\
          selectionchange: function() {\
            app.setButtons();\
          }\
        }\
      });\
      setCard(card);\
      app.runSql(card, true);\
    }\
  },\
  runSql: function(card, callback) {\
    card.store.load({\
      params: {\
        jndi: card.jndi,\
        sql: card.sql\
      },\
      callback: callback\
    });\
  },\
  autoSize: function(grid) {\
    var cols = grid.columns,\
      i, j = cols.length;\
\
    Ext.suspendLayouts();\
    for (i = 1; i < j; i++) {\
      if (cols[i].autoSize)\
        cols[i].autoSize();\
    }\
    Ext.resumeLayouts(true);\
  },\
  addHisSql: function() {\
    var record, card = app.active();\
    record = app.sqlGrid.getSelection()[0];\
    if (record && card && card.editor)\
      card.editor.setValue(record.get('sql'));\
    app.sqlsWin.close(); //closeAction为hide\
  },\
  active: function() {\
    return app.tab.getActiveTab() || {};\
  },\
  setColumns: function(cols, card) {\
    Wb.each(cols, function(col) {\
\
      if (col.category == 'blob') {\
        card.hasBlob = true; //如果存在blob强制从服务器下载数据，因为客户端无blob数据\
      }\
      if (col.editor) {\
        //数据库浏览器为编辑原始数据而进行特殊处理，通常情况无需使用这些步骤，直接使用对应类型控件编辑即可\
        col.editor.listeners = {\
          change: app.onChange\
        };\
        switch (col.category) {\
          case 'timestamp':\
          case 'date':\
          case 'time':\
            col.editor.xtype = 'textfield';\
            col.editor.category = col.category;\
            col.editor.validator = app.dateValidator;\
            col.editor.getValue = app.getDate;\
            col.editor.setValue = app.setDate;\
            col.editor.isEqual = app.isEqual; //重载日期时间型比较方法\
            col.renderer = app.dateRenderer;\
            col.scope = col;\
            break;\
        }\
      }\
      if (card.isSql) {\
        if (col.category == 'text')\
          col.editor.readOnly = true;\
        else\
          delete col.editor;\
      }\
    });\
  },\
  isEqual: function(date1, date2) {\
    if (Ext.isDate(date1) && Ext.isDate(date2))\
      return date1.getTime() === date2.getTime();\
    return !(date1 || date2);\
  },\
  dateRenderer: function(date) {\
    var str, category = this.category;\
    if (category == 'time')\
      return Wb.format(date, 'H:i:s');\
    else if (category == 'date')\
      return Wb.format(date, 'Y-m-d');\
    else {\
      //timestamp\
      str = Wb.dateToStr(date);\
      if (Ext.String.endsWith(str, '00:00:00.000'))\
        return str.substring(0, 10);\
      else if (Ext.String.endsWith(str, '.000'))\
        return str.substring(0, 19);\
      else return str;\
    }\
  },\
  setDate: function(date) {\
    var me = this,\
      value = app.dateRenderer.call(me, date);\
    me.setRawValue(me.valueToRaw(value));\
    return me.mixins.field.setValue.call(me, value);\
  },\
  getDate: function() {\
    var me = this,\
      val = me.rawToValue(me.processRawValue(me.getRawValue()));\
    me.value = val;\
    return app.checkDate.call(me, val, true) || val;\
  },\
  parseDate: function(value, formats) {\
    if (!value)\
      return null;\
    var date, formatArray = formats.split('|');\
    Wb.each(formatArray, function(item) {\
      date = Ext.Date.parse(value, item);\
      if (date)\
        return false;\
    });\
    if (date)\
      return date;\
    else\
      return null;\
  },\
  //编辑器change事件\
  onChange: function(me) {\
    Wb.setModified(me.up('grid'));\
    app.setButtons();\
  },\
  setButtons: function() {\
    var card = app.active();\
    app.runSqlBtn.setDisabled(!card.isSql);\
    app.addRecordBtn.setDisabled(!card.isTable || card.isSaving);\
    app.delRecordBtn.setDisabled(!card.isTable || !card.getSelection().length || card.isSaving);\
    app.saveBtn.setDisabled(!card.isTable || !card.isModified || card.isSaving);\
    app.saveAllBtn.setDisabled(Wb.getModifiedTitle(app.tab) === null);\
    app.rejectBtn.setDisabled(app.saveBtn.disabled);\
    app.filterBtn.setDisabled(!card.isTable || card.isSaving);\
    app.importBtn.setDisabled(!card.isTable || card.isSaving);\
    app.exportBtn.setDisabled(!card.isSql && !card.isTable);\
    app.propertyBtn.setDisabled(app.exportBtn.disabled);\
  },\
  save: function(isAll, callback) {\
    if (isAll && app.saveAllBtn.disabled || !isAll && app.saveBtn.disabled)\
      return;\
    var active = app.active();\
    if (active.isTable)\
      active.plugins[0].completeEdit();\
    if (!isAll && !Wb.verifyGrid(active)) {\
      return false;\
    }\
    app.tab.items.each(function(card) {\
      if (!card.isModified || card.isSaving)\
        return;\
      if (isAll || active == card) {\
        var store = card.store;\
        card.isSaving = true;\
        Wb.sync({\
          store: store,\
          url: 'm?xwl=system/admin/dbe/save',\
          mask: card,\
          message: '正在保存中...',\
          params: {\
            table: Wb.addPrefix(card.schema, card.table),\
            jndi: card.jndi\
          },\
          callback: function(a, succ) {\
            card.isSaving = false;\
            if (succ) {\
              store.commitChanges();\
              Wb.unModified(card);\
              Ext.callback(callback);\
            }\
            app.setButtons();\
          }\
        });\
      }\
    });\
    app.setButtons();\
  },\
  dateValidator: function(value) {\
    var metaType = this.column.metaType;\
    //处理类似Oracle Date类型的bug，表现为返回类型为timestamp但不允许毫秒\
    if (metaType && metaType.toUpperCase() == 'DATE' && value.indexOf('.') != -1)\
      return Wb.format('不允许输入毫秒 \"{0}\"', value);\
    return app.checkDate.call(this, value);\
  },\
  addRecord: function() {\
    if (app.addRecordBtn.disabled) return;\
    var card = app.active();\
    Wb.add(card.grid, {}, 'after', 1, false);\
    Wb.setModified(card);\
    app.setButtons();\
  },\
  delRecord: function() {\
    if (app.delRecordBtn.disabled) return;\
    var card = app.active();\
    Wb.remove(card.grid);\
    Wb.setModified(card);\
    app.setButtons();\
  },\
  reject: function() {\
    if (app.refreshBtn.disabled) return;\
    Wb.confirm('确定要撤消对表格所做的所有更改吗？', function() {\
      var grid = app.active();\
      Wb.reject(grid);\
      Wb.unModified(grid);\
      app.setButtons();\
    });\
  },\
  checkDate: function(value, returnDate) {\
    if (!value)\
      return returnDate ? value : true;\
    var date, time, dateFormats = Ext.form.field.Date.prototype.altFormats,\
      timeFormats = Ext.form.field.Time.prototype.altFormats;\
    if (this.category == 'time') {\
      if ((date = app.parseDate(value, timeFormats)))\
        return returnDate ? date : true;\
    } else if (this.category == 'date') {\
      if ((date = app.parseDate(value, dateFormats)))\
        return returnDate ? date : true;\
    } else {\
      var pos = value.indexOf(' ');\
      if (pos == -1) {\
        if ((date = app.parseDate(value, dateFormats)))\
          return returnDate ? date : true;\
      } else {\
        if ((date = app.parseDate(value.substring(0, pos), dateFormats)) &&\
          (time = app.parseDate(value.substring(pos + 1), timeFormats))) {\
          if (returnDate) {\
            date.setHours(time.getHours());\
            date.setMinutes(time.getMinutes());\
            date.setSeconds(time.getSeconds());\
            date.setMilliseconds(time.getMilliseconds());\
            return date;\
          } else return true;\
        }\
      }\
    }\
    return returnDate ? null : Wb.format('无效的值 \"{0}\"', value);\
  },\
  downloadBlob: function(fieldName, rowIndex) {\
    var grid = this;\
    Wb.download('m?xwl=system/admin/dbe/download-blob', Ext.apply({\
      __jndi: grid.jndi,\
      __tableName: Wb.addPrefix(grid.schema, grid.table),\
      __fieldName: fieldName\
    }, Wb.getData(grid.store.getAt(rowIndex), true)));\
  },\
  uploadBlob: function(fieldName, rowIndex) {\
    var grid = this,\
      ownerApp = app,\
      rec = grid.store.getAt(rowIndex);\
    if (rec.dirty) {\
      Wb.warn('请保存该记录然后再试一次。');\
      return;\
    }\
    Wb.run({\
      url: 'upload',\
      success: function(app) {\
        app.upload({\
          url: 'm?xwl=system/admin/dbe/upload-blob',\
          iconCls: 'import_icon',\
          title: '导入 - ' + fieldName,\
          params: Ext.apply({\
            __jndi: grid.jndi,\
            __tableName: Wb.addPrefix(grid.schema, grid.table),\
            __fieldName: fieldName\
          }, Wb.getData(rec, true)),\
          success: function() {\
            rec.set(fieldName, 'blob');\
            rec.commit();\
          }\
        });\
      }\
    });\
  },\
  removeBlob: function(fieldName, rowIndex) {\
    var grid = this,\
      rec = grid.store.getAt(rowIndex);\
    if (rec.dirty) {\
      Wb.warn('请保存该记录然后再试一次。');\
      return;\
    }\
    Wb.confirm('确定要删除该记录字段 \u201c' + fieldName + '\u201d 的内容吗？', function() {\
      Wb.request({\
        url: 'm?xwl=system/admin/dbe/clear-blob',\
        params: Ext.apply({\
          __jndi: grid.jndi,\
          __tableName: Wb.addPrefix(grid.schema, grid.table),\
          __fieldName: fieldName\
        }, Wb.getData(rec, true)),\
        success: function(resp) {\
          rec.set(fieldName, '');\
          rec.commit();\
        }\
      });\
    });\
  },\
  loadApp: function() {\
    function render() {\
      if (contextOwner)\
        contextOwner.add(app.viewport1);\
      else\
        new Ext.container.Viewport(app.viewport1);\
    }\
    if (window.CodeMirror)\
      render();\
    else {\
      Wb.addLink(['wb/libs/cm/cmirror.css', 'wb/libs/cm/cmirror.js'],\
        render\
      );\
    }\
  }\
});"
  }
 }],
 "roles": {},
 "title": "数据库浏览器",
 "iconCls": "db_icon",
 "inframe": false,
 "pageLink": ""
}